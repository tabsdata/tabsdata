#
# Copyright 2024 Tabs Data Inc.
#

env_files = [
    { path = "${HOME}/.tabsdata-dev/test.env", defaults_only = true },
    { path = "${HOME}/.tabsdata-dev/make.env", defaults_only = true },

    { path = "./make/settings/product.env", defaults_only = true },
    { path = "./make/settings/output.env", defaults_only = true },
    { path = "./make/settings/makers.env", defaults_only = true },
    { path = "./make/settings/toolchain.env", defaults_only = true },
]

extend = [
    { path = "./make/fragments/scripts/environment.toml" },

    { path = "./make/fragments/hooks/splash.toml" },
    { path = "./make/fragments/hooks/init.toml" },
    { path = "./make/fragments/hooks/end.toml" },
    { path = "./make/fragments/hooks/error.toml" },

    { path = "./make/fragments/aliases/default.toml" },
    { path = "./make/fragments/aliases/custom.toml" },

    { path = "./make/fragments/tasks/clean_rs.toml" },
    { path = "./make/fragments/tasks/clean_py.toml" },

    { path = "./make/fragments/tasks/build_rs.toml" },
    { path = "./make/fragments/tasks/build_py.toml" },

    { path = "./make/fragments/tasks/test_rs.toml" },
    { path = "./make/fragments/tasks/test_py.toml" },

    { path = "./make/fragments/tasks/book.toml" },
]

[env]
MAKE_SUCCESS = true
ECHO_ENV_FILES = true

CLEAN = "${clean:false}"
PROFILE = "${profile:dev}"

PROJECT_ROOT_FOLDER = { value = "${ROOT_PROJECT_FOLDER}/", normalize = true }
PROJECT_RS_TD_MACROS_FOLDER = { value = "${ROOT_PROJECT_FOLDER}/macros/", normalize = true }
PROJECT_RS_TY_EXPANSIONS_FOLDER = { value = "${ROOT_PROJECT_FOLDER}/expansions/polars/", normalize = true }
PROJECT_PY_TA_FEATURES_FOLDER = { value = "${ROOT_PROJECT_FOLDER}/client/td-lib/ta_features/", normalize = true }
PROJECT_PY_TA_TABLEFRAME_FOLDER = { value = "${ROOT_PROJECT_FOLDER}/client/td-lib/ta_tableframe/", normalize = true }
PROJECT_PY_TE_TABLEFRAME_FOLDER = { value = "${ROOT_PROJECT_FOLDER}/extensions/python/td-lib/te_tableframe/", normalize = true }
PROJECT_PY_TD_SDK_FOLDER = { value = "${ROOT_PROJECT_FOLDER}/client/td-sdk/", normalize = true }
PROJECT_PY_TABSDATA_SALESFORCE_FOLDER = { value = "${ROOT_PROJECT_FOLDER}/connectors/python/tabsdata_salesforce/", normalize = true }
PROJECT_PY_TABSDATA_MONGODB_FOLDER = { value = "${ROOT_PROJECT_FOLDER}/connectors/python/tabsdata_mongodb/", normalize = true }

PROJECT_RS_ROOT_CARGO_TOML = { value = "${ROOT_PROJECT_FOLDER}/Cargo.toml", normalize = true }
PROJECT_RS_TD_MACROS_CARGO_TOML = { value = "${ROOT_PROJECT_FOLDER}/macros/Cargo.toml", normalize = true }
PROJECT_RS_TY_EXPANSIONS_CARGO_TOML = { value = "${ROOT_PROJECT_FOLDER}/expansions/polars/Cargo.toml", normalize = true }

BOOK_DEVELOPER_GUIDE_FOLDER = { value = "${ROOT_PROJECT_FOLDER}/books/dguide", normalize = true }

TESTS_PY_TA_FEATURES_FOLDER = { value = "tests_ta_features/", normalize = true }
TESTS_PY_TA_TABLEFRAME_FOLDER = { value = "tests_ta_tableframe/", normalize = true }
TESTS_PY_TE_TABLEFRAME_FOLDER = { value = "tests_te_tableframe/", normalize = true }
TESTS_PY_TABSDATA_FOLDER = { value = "tests_tabsdata/", normalize = true }
TESTS_PY_TABSDATA_SALESFORCE_FOLDER = { value = "tests_tabsdata_salesforce/", normalize = true }
TESTS_PY_TABSDATA_MONGODB_FOLDER = { value = "tests_tabsdata_mongodb/", normalize = true }

RUST_DOCS = { value = "${ROOT_PROJECT_FOLDER}/target/doc/tabsdatalib/index.html", normalize = true }
PYTHON_DOCS = { value = "${ROOT_PROJECT_FOLDER}/client/td-sdk/site/index.html", normalize = true }

AUDIT_TOML = { value = "${ROOT_PROJECT_FOLDER}/.cargo/audit.toml", normalize = true }
CLIPPY_CONF_DIR = { value = "${ROOT_PROJECT_FOLDER}/.cargo", normalize = true }
DENY_TOML = { value = "${ROOT_PROJECT_FOLDER}/.cargo/deny.toml", normalize = true }
PANTS_JSON = { value = "${ROOT_PROJECT_FOLDER}/.cargo/pants.json", normalize = true }

SWAGGER_UI_OVERWRITE_FOLDER = { value = "${ROOT_PROJECT_FOLDER}/server/binaries/td-server/resources/swagger", normalize = true }

MAKE_LIBRARIES_PATH = { value = "${ROOT_PROJECT_FOLDER}/make/libraries", normalize = true }

BUMP_VERSION_PY = { value = "${ROOT_PROJECT_FOLDER}/devutils/automation/tasks/makers/td-scripts/bump_version.py", normalize = true }
CLEAN_PYTHON_PY = { value = "${ROOT_PROJECT_FOLDER}/devutils/automation/tasks/makers/td-scripts/clean_python.py", normalize = true }
COPY_ASSETS_PY = { value = "${ROOT_PROJECT_FOLDER}/devutils/automation/tasks/makers/td-scripts/copy_assets.py", normalize = true }

VIRTUAL_PIP = { value = "${ROOT_PROJECT_FOLDER}/client/td-sdk/.venv/bin/pip3", normalize = true }
VIRTUAL_ACTIVATE = { value = "${ROOT_PROJECT_FOLDER}/client/td-sdk/.venv/bin/activate", normalize = true }

[config]
load_script = [
    '''
    #!@duckscript

    echo_env_files = get_env ECHO_ENV_FILES

    LOCAL_ROOT = pwd

    ok_make_env = is_path_exists ${HOME}/.tabsdata-dev/make.env
    if ${ok_make_env}
        if eq ${echo_env_files} "true"
            echo "ðŸ“Ž File ${HOME}/.tabsdata-dev/make.env alredy exists"
        end
    else
        if eq ${echo_env_files} "true"
            echo "ðŸ’ˆ Copying ${LOCAL_ROOT}/.custom/make-dev.env to ${HOME}/.tabsdata-dev/make.env"
        end
        cp ${LOCAL_ROOT}/.custom/make-dev.env ${HOME}/.tabsdata-dev/make.env
    end

    ok_test_env = is_path_exists ${HOME}/.tabsdata-dev/test.env
    if ${ok_test_env}
        if eq ${echo_env_files} "true"
            echo "ðŸ“Ž File ${HOME}/.tabsdata-dev/test.env alredy exists"
        end
    else
        if eq ${echo_env_files} "true"
            echo "ðŸ’ˆ Copying ${LOCAL_ROOT}/.custom/test-dev.env to ${HOME}/.tabsdata-dev/test.env"
        end
        cp ${LOCAL_ROOT}/.custom/test-dev.env ${HOME}/.tabsdata-dev/test.env
    end

    if eq ${echo_env_files} "true"
        echo "ðŸŽˆ This build is using the following environment variables files:"
        echo "   - ðŸª¬ ${HOME}/.tabsdata-dev/test.env"
        echo "   - ðŸª¬ ${HOME}/.tabsdata-dev/make.env"
        files = glob_array ${LOCAL_ROOT}/make/settings/*.env
        for file in ${files}
            echo "   - ðŸª¬ ${file}"
        end
    end

    set_env ECHO_ENV_FILES "false"
    ''']
skip_core_tasks = true
skip_rust_env_info = true
skip_crate_env_info = true
reduce_output = false
init_task = "setup"
end_task = "teardown"
on_error_task = "failure"

[tasks.clean]
category = "01 - Clean"
description = "Remove temporary, build, and target folders"
run_task = [
    { name = [
        "clean_rs",
        "clean_py"
    ] }
]

[tasks.build]
category = "02 - Build"
description = "Compile and build"
run_task = [
    { name = [
        "build_rs",
        "build_py"
    ] }
]

[tasks.test]
category = "02 - Test"
description = "Unitary automated tests"
run_task = [
    { name = [
        "test_rs",
        "test_py"
    ] }
]

#####

[tasks.duck]
cwd = "${ROOT_PROJECT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    info "ðŸ¦†"
    ''']


[tasks.make]
run_task = [
    { name = [
        "make_rs",
        "make_py"
    ] }
]

[tasks.make_rs]
run_task = [
    { name = [
        "clean_rs",
        "compose_rs"], condition = { env = { "CLEAN" = "true" } } },
    { name = [
        "compose_rs"
    ] }
]

[tasks.make_py]
run_task = [
    { name = [
        "clean_py",
        "compose_py"], condition = { env = { "CLEAN" = "true" } } },
    { name = [
        "compose_py"
    ] }
]

[tasks.compose]
private = true
run_task = [
    { name = [
        "compose_rs",
        "compose_py",
    ] }
]

[tasks.compose_rs]
private = true
run_task = [
    { name = [
        "build_rs",
        "test_rs",
        "check_rs",
        "fmt_rs",
        "license_rs",
        "upgrade_rs",
        "deny_rs",
        "audit_rs",
        "pants_rs",
        "machete_rs",
        "clippy_rs",
    ] }
]

[tasks.compose_py]
private = true
run_task = [
    { name = [
        "build_py",
        "test_py",
        "check_py",
        "fmt_py",
        "license_py",
        "upgrade_py",
        "deny_py",
        "audit_py",
        "pants_py",
        "machete_py",
        "clippy_py",
    ] }
]






[tasks.rstest]
alias = "rstest_modules"

[tasks.rstest_logging]
alias = "rstest_modules_logging"

[tasks.rstest_tower]
alias = "rstest_modules_tower"

[tasks.rstest_macros]
cwd = "${PROJECT_ROOT_FOLDER}"
command = "cargo"
args = ["test", "@@split(CARGO_MAKE_TASK_ARGS, ;)", "--profile", "${td-profile}", "--manifest-path", "${PROJECT_RS_TD_MACROS_CARGO_TOML}", "--features", "${macros-test-features}", "--", "--nocapture"]

[tasks.rstest_modules]
cwd = "${PROJECT_ROOT_FOLDER}"
command = "cargo"
args = ["test", "@@split(CARGO_MAKE_TASK_ARGS, ;)", "--profile", "${td-profile}", "--manifest-path", "${PROJECT_RS_ROOT_CARGO_TOML}", "--features", "${modules-test-features}", "--", "--nocapture"]

[tasks.rstest_modules_logging]
cwd = "${PROJECT_ROOT_FOLDER}"
command = "cargo"
args = ["test", "@@split(CARGO_MAKE_TASK_ARGS, ;)", "--profile", "${td-profile}", "--manifest-path", "${PROJECT_RS_ROOT_CARGO_TOML}", "--features", "${modules-test-features-test_logging}", "--", "test_logging", "--", "--nocapture"]

[tasks.rstest_modules_tower]
cwd = "${PROJECT_ROOT_FOLDER}"
command = "cargo"
args = ["test", "@@split(CARGO_MAKE_TASK_ARGS, ;)", "--profile", "${td-profile}", "--manifest-path", "${PROJECT_RS_ROOT_CARGO_TOML}", "--features", "${modules-test-features-test_tower_metadata}", "--", "test_tower_metadata", "--", "--nocapture"]

[tasks.rsnext]
alias = "rsnext_modules"

[tasks.rsnext_logging]
alias = "rsnext_modules_logging"

[tasks.rsnext_tower]
alias = "rsnext_modules_tower"

[tasks.rsnext_macros]
cwd = "${PROJECT_ROOT_FOLDER}"
command = "cargo"
args = ["nextest", "run", "--nocapture", "--cargo-profile", "${td-profile}", "--manifest-path", "${PROJECT_RS_TD_MACROS_CARGO_TOML}", "--features", "${macros-test-features}", "@@split(CARGO_MAKE_TASK_ARGS, ;)"]

[tasks.rsnext_modules]
cwd = "${PROJECT_ROOT_FOLDER}"
command = "cargo"
args = ["nextest", "run", "--nocapture", "--cargo-profile", "${td-profile}", "--manifest-path", "${PROJECT_RS_ROOT_CARGO_TOML}", "--features", "${modules-test-features}", "@@split(CARGO_MAKE_TASK_ARGS, ;)"]

[tasks.rsnext_modules_logging]
cwd = "${PROJECT_ROOT_FOLDER}"
command = "cargo"
args = ["nextest", "run", "--nocapture", "--cargo-profile", "${td-profile}", "--manifest-path", "${PROJECT_RS_ROOT_CARGO_TOML}", "--features", "${modules-test-features-test_logging}", "--", "test_logging", "@@split(CARGO_MAKE_TASK_ARGS, ;)"]

[tasks.rsnext_modules_tower]
cwd = "${PROJECT_ROOT_FOLDER}"
command = "cargo"
args = ["nextest", "run", "--nocapture", "--cargo-profile", "${td-profile}", "--manifest-path", "${PROJECT_RS_ROOT_CARGO_TOML}", "--features", "${modules-test-features-test_tower_metadata}", "--", "test_tower_metadata", "@@split(CARGO_MAKE_TASK_ARGS, ;)"]

[tasks.pytest]
dependencies = ["set_mode_test_py"]
cwd = "${PROJECT_PY_TD_SDK_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    verbose = get_env TD_VERBOSE
    compile = get_env TD_COMPILE

    if eq ${compile} "true"
        echo "_____ Compiling first..."
        cm_run_task build
    end

    echo "_____ Testing next..."
    arguments = set ${@}
    parameters = array
    configuration = temp_file "ini"
    found = set false
    for argument in ${arguments}
        if ${found}
            array_push ${parameters} ${argument}
            appendfile ${configuration} ${argument}\n
        else
            if eq ${argument} "--"
                found = set true
            end
        end
    end
    echo "_____ Running command: pytest @${configuration}"
    exec --fail-on-error pytest @${configuration}
    rm ${configuration}
    ''']

[tasks.check]
run_task = [
    { name = [
        "check_rs",
        "check_py"
    ] }
]

[tasks.check_rs]
run_task = [
    { name = [
        "check_rs_macros",
        "check_rs_modules"
    ] }
]

[tasks.check_py]

[tasks.check_rs_macros]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} check --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} check --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML}
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} check --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} check --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML}
        end
    end
    ''']

[tasks.check_rs_modules]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} check --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} check --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML}
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} check --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} check --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML}
        end
    end
    ''']

[tasks.fmt]
run_task = [
    { name = [
        "fmt_rs",
        "fmt_py"
    ] }
]

[tasks.fmt_rs]
run_task = [
    { name = [
        "fmt_rs_macros",
        "fmt_rs_modules"
    ] }
]

[tasks.fmt_py]
run_task = [
    { name = [
        "fmt_py_flake8_conventions",
        "fmt_py_flake8_complexity",
        "fmt_py_black",
        "fmt_py_isort"
    ] }
]

[tasks.fmt_rs_macros]
private = true
command = "cargo"
args = ["fmt", "--manifest-path", "${PROJECT_RS_TD_MACROS_CARGO_TOML}", "--all", "--", "--check"]

[tasks.fmt_rs_modules]
private = true
command = "cargo"
args = ["fmt", "--manifest-path", "${PROJECT_RS_ROOT_CARGO_TOML}", "--all", "--", "--check"]

[tasks.fmt_py_flake8_conventions]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: ${ENV_PREFIX}flake8 --select=E9,F63,F7,F82 --ignore=E203,W503 --show-source --statistics . --extend-exclude .venv,dist,build,.tabsdata,venv,test_*,tests_*"
    exec --fail-on-error ${ENV_PREFIX}flake8 --select=E9,F63,F7,F82 --ignore=E203,W503 --show-source --statistics . --extend-exclude .venv,dist,build,.tabsdata,venv,test_*,tests_*
    ''']

[tasks.fmt_py_flake8_complexity]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: ${ENV_PREFIX}flake8 --max-complexity=10 --ignore=E203,W503 --max-line-length=88 --statistics  . --extend-exclude .venv,dist,build,.tabsdata,venv,test_*,tests_*"
    exec --fail-on-error ${ENV_PREFIX}flake8 --max-complexity=10 --ignore=E203,W503 --max-line-length=88 --statistics  . --extend-exclude .venv,dist,build,.tabsdata,venv,test_*,tests_*
    ''']

[tasks.fmt_py_black]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: ${ENV_PREFIX}black --preview --enable-unstable-feature string_processing --check . --extend-exclude .tabsdata,test_*,tests_*"
    exec --fail-on-error ${ENV_PREFIX}black --preview --enable-unstable-feature string_processing --check . --extend-exclude .tabsdata,test_*,tests_*
    ''']

[tasks.fmt_py_isort]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: ${ENV_PREFIX}isort --check . --extend-skip .tabsdata,test_*,tests_*"
    exec --fail-on-error ${ENV_PREFIX}isort --check . --extend-skip .tabsdata,test_*,tests_*
    ''']

[tasks.format]
run_task = [
    { name = [
        "format_rs",
        "format_py"
    ] }
]

[tasks.format_rs]

[tasks.format_py]
run_task = [
    { name = [
        "format_py_black",
        "format_py_isort"
    ] }
]

[tasks.format_py_black]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: ${ENV_PREFIX}black --preview --enable-unstable-feature string_processing ."
    exec --fail-on-error ${ENV_PREFIX}black --preview --enable-unstable-feature string_processing .
    ''']

[tasks.format_py_isort]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: ${ENV_PREFIX}isort ."
    exec --fail-on-error ${ENV_PREFIX}isort .
    ''']

[tasks.license]
cwd = "${PROJECT_ROOT_FOLDER}"
dependencies = ["license_rs", "license_py"]
script_runner = "@duckscript"
script = [
    '''
    exec --fail-on-error python ./devutils/automation/tasks/makers/td-scripts/report_licenses.py
    ''']

[tasks.license_rs]
run_task = [
    { name = [
        "license_check_rs",
        "license_report_rs"
    ] }
]

[tasks.license_check_rs]
private = true
run_task = [
    { name = [
        "license_check_rs_macros",
        "license_check_rs_modules"
    ] }
]

[tasks.license_check_rs_macros]
private = true
run_task = [
    { name = [
        "license_check_list_rs_macros",
        "license_check_deny_rs_macros"
    ] }
]

[tasks.license_check_rs_modules]
private = true
run_task = [
    { name = [
        "license_check_list_rs_modules",
        "license_check_deny_rs_modules"
    ] }
]

[tasks.license_check_list_rs_macros]
private = true
command = "cargo"
args = ["license", "--manifest-path", "${PROJECT_RS_TD_MACROS_CARGO_TOML}", "--all-features"]

[tasks.license_check_deny_rs_macros]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error cargo deny --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} check --config ${DENY_TOML} --hide-inclusion-graph license
        else
            exec --fail-on-error cargo +${td-toolchain} deny --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} check --config ${DENY_TOML} --hide-inclusion-graph license
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error cargo deny --target ${td-target} --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} check --config ${DENY_TOML} --hide-inclusion-graph license
        else
            exec --fail-on-error cargo +${td-toolchain} deny --target ${td-target} --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} check --config ${DENY_TOML} --hide-inclusion-graph license
        end
    end
    ''']

[tasks.license_check_list_rs_modules]
private = true
command = "cargo"
args = ["license", "--manifest-path", "${PROJECT_RS_ROOT_CARGO_TOML}", "--all-features"]

[tasks.license_check_deny_rs_modules]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error cargo deny --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML} check --config ${DENY_TOML} --hide-inclusion-graph license
        else
            exec --fail-on-error cargo +${td-toolchain} deny --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML} check --config ${DENY_TOML} --hide-inclusion-graph license
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error cargo deny --target ${td-target} --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML} check --config ${DENY_TOML} --hide-inclusion-graph license
        else
            exec --fail-on-error cargo +${td-toolchain} deny --target ${td-target} --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML} check --config ${DENY_TOML} --hide-inclusion-graph license
        end
    end
    ''']

[tasks.license_report_rs]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    exec --fail-on-error python ./devutils/automation/tasks/makers/td-scripts/report_licenses_rs.py
    ''']

[tasks.license_py]
run_task = [
    { name = [
        #"license_check_py",
        "license_report_py"
    ] }
]

[tasks.license_report_py]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    exec --fail-on-error pip-compile --no-strip-extras --quiet ./requirements-third-party-all.txt_ --output-file ./target/requirements.txt
    cd target
    exec --fail-on-error python ../devutils/automation/tasks/makers/td-scripts/report_licenses_py.py
    ''']

[tasks.license_check_py]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    exec --fail-on-error pip-compile ./requirements-third-party-all.txt_ --output-file ./target/requirements.txt
    cd target
    exec --fail-on-error licensecheck -r requirements.txt
    cd ..
    ''']

[tasks.sourcetrack]
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    exists = is_path_exists ./variant/devutils/automation/tasks/makers/td-scripts/repositories_sourcetrack.py
    if eq ${exists} true
        exec --fail-on-error python ./variant/devutils/automation/tasks/makers/td-scripts/repositories_sourcetrack.py
    else
        echo "Generating source track metadata file does not apply for this project"
    end
    ''']

[tasks.upgrade]
run_task = [
    { name = [
        "upgrade_rs",
        "upgrade_py"
    ] }
]

[tasks.upgrade_rs]
run_task = [
    { name = [
        "upgrade_rs_macros",
        "upgrade_rs_modules"
    ] }
]

[tasks.upgrade_py]

[tasks.upgrade_rs_macros]
private = true
command = "cargo"
args = ["upgrade", "--dry-run", "--verbose", "--manifest-path", "${PROJECT_RS_TD_MACROS_CARGO_TOML}"]

[tasks.upgrade_rs_modules]
private = true
command = "cargo"
args = ["upgrade", "--dry-run", "--verbose", "--manifest-path", "${PROJECT_RS_ROOT_CARGO_TOML}"]

[tasks.deny]
    run_task = [
    { name = [
        "deny_rs",
        "deny_py"
    ] }
]

[tasks.deny_rs]
run_task = [
    { name = [
        "deny_rs_macros",
        "deny_rs_modules"
    ] }
]

[tasks.deny_py]

[tasks.deny_rs_macros]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error cargo deny --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
        else
            exec --fail-on-error cargo +${td-toolchain} deny --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error cargo deny --target ${td-target} --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
        else
            exec --fail-on-error cargo +${td-toolchain} deny --target ${td-target} --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
        end
    end
    ''']

[tasks.deny_rs_modules]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error cargo deny --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
        else
            exec --fail-on-error cargo +${td-toolchain} deny --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error cargo deny --target ${td-target} --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
        else
            exec --fail-on-error cargo +${td-toolchain} deny --target ${td-target} --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
        end
    end
    ''']

[tasks.audit]
run_task = [
    { name = [
        "audit_rs",
        "audit_py"
    ] }
]

[tasks.audit_rs]
run_task = [
    { name = [
        "audit_rs_macros",
        "audit_rs_modules"
    ] }
]

[tasks.audit_py]

[tasks.audit_rs_macros]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
command = "cargo"
args = ["audit", "--file", "${AUDIT_TOML}"]

[tasks.audit_rs_modules]
private = true
cwd = "${ROOT_PROJECT_FOLDER}"
command = "cargo"
args = ["audit", "--file", "${AUDIT_TOML}"]

[tasks.pants]
run_task = [
    { name = [
        "pants_rs",
        "pants_py"
    ] }
]

[tasks.pants_rs]
run_task = [
    { name = [
        "pants_rs_macros",
        "pants_rs_modules"
    ] }
]

[tasks.pants_py]

[tasks.pants_rs_macros]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
command = "cargo"
args = ["pants", "--ignore-file", "${PANTS_JSON}", "--tomlfile", "${PROJECT_RS_TD_MACROS_CARGO_TOML}"]

[tasks.pants_rs_modules]
private = true
cwd = "${ROOT_PROJECT_FOLDER}"
command = "cargo"
args = ["pants", "--ignore-file", "${PANTS_JSON}", "--tomlfile", "${PROJECT_RS_ROOT_CARGO_TOML}"]

[tasks.machete]
run_task = [
    { name = [
        "machete_rs",
        "machete_py"
    ] }
]

[tasks.machete_rs]
command = "cargo"
args = ["machete", "--with-metadata"]

[tasks.machete_py]

[tasks.clippy]
run_task = [
    { name = [
        "clippy_rs",
        "clippy_py"
    ] }
]

[tasks.clippy_rs]
run_task = [
    { name = [
        "clippy_rs_macros",
        "clippy_rs_modules"
    ] }
]

[tasks.clippy_py]

[tasks.clippy_rs_macros]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clippy --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} -- -D warnings
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clippy --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} -- -D warnings
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clippy --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} -- -D warnings
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clippy --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} -- -D warnings
        end
    end
    ''']

[tasks.clippy_rs_modules]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clippy --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML} -- -D warnings
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clippy --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML} -- -D warnings
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clippy --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML} -- -D warnings
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clippy --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML} -- -D warnings
        end
    end
    ''']

[tasks.fix]
run_task = [
    { name = [
        "fix_rs",
        "fix_py"
    ] }
]

[tasks.fix_rs]
run_task = [
    { name = [
        "fix_rs_macros",
        "fix_rs_modules"
    ] }
]

[tasks.fix_py]

[tasks.fix_rs_macros]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clippy --fix --allow-dirty --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} -- -D warnings
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clippy --fix --allow-dirty --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} -- -D warnings
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clippy --fix --allow-dirty --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} -- -D warnings
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clippy --fix --allow-dirty --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} -- -D warnings
        end
    end
    ''']

[tasks.fix_rs_modules]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clippy --fix --allow-dirty --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML} -- -D warnings
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clippy --fix --allow-dirty --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML} -- -D warnings
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clippy --fix --allow-dirty --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML} -- -D warnings
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clippy --fix --allow-dirty --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML} -- -D warnings
        end
    end
    ''']

[tasks.doc]
run_task = [
    { name = [
        "doc_rs",
        "doc_py"
    ] }
]

[tasks.doc_rs]
run_task = [
    { name = [
        "doc_rs_macros",
        "doc_rs_modules"
    ] }
]

[tasks.doc_py]
cwd = "${PROJECT_PY_TD_SDK_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: {ENV_PREFIX}mkdocs build"
    exec --fail-on-error ${ENV_PREFIX}mkdocs build
    ''']

[tasks.doc_rs_macros]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} doc --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} doc --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML}
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} doc --target ${td-target} --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} doc --target ${td-target} --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML}
        end
    end
    ''']

[tasks.doc_rs_modules]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} doc --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} doc --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML}
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} doc --target ${td-target} --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} doc --target ${td-target} --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_ROOT_CARGO_TOML}
        end
    end
    ''']

[tasks.chrome]
run_task = [
    { name = [
        "chrome_rs",
        "chrome_py"
    ] }
]

[tasks.chrome_rs]
script = "open -b com.google.Chrome ${RUST_DOCS}"

[tasks.chrome_py]
cwd = "${PROJECT_PY_TD_SDK_FOLDER}"
script = "open -b com.google.Chrome ${PYTHON_DOCS}"

[tasks.opendoc]
run_task = [
    { name = [
        "opendoc_rs",
        "opendoc_py"
    ] }
]

[tasks.opendoc_rs]
script = "open ${RUST_DOCS}"

[tasks.opendoc_py]
cwd = "${PROJECT_PY_TD_SDK_FOLDER}"
script = "open ${PYTHON_DOCS}"

[tasks.examples]
command = "pwsh"
args = ["${PROJECT_PY_TD_SDK_FOLDER}examples/persons/persons.ps1", "${td-profile}"]

[tasks.package]
run_task = [
    { name = [
        "package_rs",
        "package_py",
    ] }
]

[tasks.package_rs]

[tasks.package_py]
run_task = [
    { name = [
        "package_py_tabsdata",
        "package_py_tabsdata_salesforce",
        "package_py_tabsdata_mongodb",
    ] }
]

[tasks.package_py_tabsdata]
cwd = "${ROOT_PROJECT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: python3 setup.py sdist --dist-dir target/python/dist --formats=tar bdist_wheel --dist-dir target/python/dist --compression stored"
    exec --fail-on-error python3 setup.py sdist --dist-dir target/python/dist --formats=tar bdist_wheel --dist-dir target/python/dist --compression stored
    ''']

[tasks.package_py_tabsdata_salesforce]
cwd = "${PROJECT_PY_TABSDATA_SALESFORCE_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: python3 setup.py sdist --dist-dir target/python/dist --formats=tar bdist_wheel --dist-dir target/python/dist --compression stored"
    exec --fail-on-error python3 setup.py sdist --dist-dir target/python/dist --formats=tar bdist_wheel --dist-dir target/python/dist --compression stored
    ''']

[tasks.package_py_tabsdata_mongodb]
cwd = "${PROJECT_PY_TABSDATA_MONGODB_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: python3 setup.py sdist --dist-dir target/python/dist --formats=tar bdist_wheel --dist-dir target/python/dist --compression stored"
    exec --fail-on-error python3 setup.py sdist --dist-dir target/python/dist --formats=tar bdist_wheel --dist-dir target/python/dist --compression stored
    ''']

[tasks.assembly]
run_task = [
    { name = [
        "assembly_rs",
        "assembly_py",
    ] }
]

[tasks.assembly_rs]

[tasks.assembly_py]
run_task = [
    { name = [
        "assembly_py_tabsdata",
        "assembly_py_tabsdata_salesforce",
        "assembly_py_tabsdata_mongodb",
    ] }
]

[tasks.assembly_py_tabsdata]
dependencies = ["license", "copy_assets"]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    cd "${ROOT_PROJECT_FOLDER}"

    td_pypi_linked = get_env TD_PYTHON_LINKED_TO_REPOSITORY
    if eq ${td_pypi_linked} ""
        info "ðŸ”— Unespecified link to python repository status... defaulting to true"
        td_pypi_linked = set "true"
    else
        info "ðŸ”— Specified link to python repository status: true"
    end
    if eq ${td_pypi_linked} "true"
        set_env REQUIRE_SERVER_BINARIES "true"
        set_env REQUIRE_THIRD_PARTY "true"
        set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "false"
        set_env TD_SKIP_NON_EXISTING_ASSETS "false"
    else
        set_env REQUIRE_SERVER_BINARIES "false"
        set_env REQUIRE_THIRD_PARTY "false"
        set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "true"
        set_env TD_SKIP_NON_EXISTING_ASSETS "true"
    end
    # This must be false when using a local PyPi reopsitory.
    set_env PYTHON_IGNORE_UNAVAILABLE_PUBLIC_PACKAGES = "true"

    echo "Running command: python3 setup.py sdist --dist-dir target/python/dist bdist_wheel --dist-dir target/python/dist"
    exec --fail-on-error python3 setup.py sdist --dist-dir target/python/dist bdist_wheel --dist-dir target/python/dist
    ''']

[tasks.assembly_py_tabsdata_salesforce]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    cd "${PROJECT_PY_TABSDATA_SALESFORCE_FOLDER}"

    td_pypi_linked = get_env TD_PYTHON_LINKED_TO_REPOSITORY
    if eq ${td_pypi_linked} ""
        info "ðŸ”— Unespecified link to python repository status... defaulting to true"
        td_pypi_linked = set "true"
    else
        info "ðŸ”— Specified link to python repository status: true"
    end
    if eq ${td_pypi_linked} "true"
        set_env REQUIRE_SERVER_BINARIES "true"
        set_env REQUIRE_THIRD_PARTY "true"
        set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "false"
        set_env TD_SKIP_NON_EXISTING_ASSETS "false"
    else
        set_env REQUIRE_SERVER_BINARIES "false"
        set_env REQUIRE_THIRD_PARTY "false"
        set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "true"
        set_env TD_SKIP_NON_EXISTING_ASSETS "true"
    end
    # This must be false when using a local PyPi reopsitory.
    set_env PYTHON_IGNORE_UNAVAILABLE_PUBLIC_PACKAGES = "true"

    echo "Running command: python3 setup.py sdist --dist-dir target/python/dist bdist_wheel --dist-dir target/python/dist"
    exec --fail-on-error python3 setup.py sdist --dist-dir target/python/dist bdist_wheel --dist-dir target/python/dist
    ''']

[tasks.assembly_py_tabsdata_mongodb]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    cd "${PROJECT_PY_TABSDATA_MONGODB_FOLDER}"

    td_pypi_linked = get_env TD_PYTHON_LINKED_TO_REPOSITORY
    if eq ${td_pypi_linked} ""
        info "ðŸ”— Unespecified link to python repository status... defaulting to true"
        td_pypi_linked = set "true"
    else
        info "ðŸ”— Specified link to python repository status: true"
    end
    if eq ${td_pypi_linked} "true"
        set_env REQUIRE_SERVER_BINARIES "true"
        set_env REQUIRE_THIRD_PARTY "true"
        set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "false"
        set_env TD_SKIP_NON_EXISTING_ASSETS "false"
    else
        set_env REQUIRE_SERVER_BINARIES "false"
        set_env REQUIRE_THIRD_PARTY "false"
        set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "true"
        set_env TD_SKIP_NON_EXISTING_ASSETS "true"
    end
    # This must be false when using a local PyPi reopsitory.
    set_env PYTHON_IGNORE_UNAVAILABLE_PUBLIC_PACKAGES = "true"

    echo "Running command: python3 setup.py sdist --dist-dir target/python/dist bdist_wheel --dist-dir target/python/dist"
    exec --fail-on-error python3 setup.py sdist --dist-dir target/python/dist bdist_wheel --dist-dir target/python/dist
    ''']

[tasks.install]
dependencies = ["assembly"]
run_task = [
    { name = [
        "install_rs",
        "install_py",
    ] }
]

[tasks.install_rs]

[tasks.install_py]
run_task = [
    { name = [
        "install_py_tabsdata_salesforce",
        "install_py_tabsdata_mongodb",
        "install_py_tabsdata",
    ] }
]

[tasks.install_py_tabsdata_salesforce]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    cd "${PROJECT_PY_TABSDATA_SALESFORCE_FOLDER}"

    td_pypi_linked = get_env TD_PYTHON_LINKED_TO_REPOSITORY
    if eq ${td_pypi_linked} ""
        info "ðŸ”— Unespecified link to python repository status... defaulting to true"
        td_pypi_linked = set "true"
    else
        info "ðŸ”— Specified link to python repository status: true"
    end
    if eq ${td_pypi_linked} "true"
        set_env REQUIRE_SERVER_BINARIES "true"
        set_env REQUIRE_THIRD_PARTY "true"
        set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "false"
        set_env TD_SKIP_NON_EXISTING_ASSETS "false"
    else
        set_env REQUIRE_SERVER_BINARIES "false"
        set_env REQUIRE_THIRD_PARTY "false"
        set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "true"
        set_env TD_SKIP_NON_EXISTING_ASSETS "true"
    end
    # This must be false when using a local PyPi reopsitory.
    set_env PYTHON_IGNORE_UNAVAILABLE_PUBLIC_PACKAGES = "true"

    exec --fail-on-error pip3 uninstall tabsdata_salesforce --yes
    wheels = glob_array ./target/python/dist/tabsdata_salesforce*.whl
    for wheel in ${wheels}
        echo "Running command: pip3 install ${wheel}"
        exec --fail-on-error pip3 install ${wheel}
    end
    ''']

[tasks.install_py_tabsdata_mongodb]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    cd "${PROJECT_PY_TABSDATA_MONGODB_FOLDER}"

    td_pypi_linked = get_env TD_PYTHON_LINKED_TO_REPOSITORY
    if eq ${td_pypi_linked} ""
        info "ðŸ”— Unespecified link to python repository status... defaulting to true"
        td_pypi_linked = set "true"
    else
        info "ðŸ”— Specified link to python repository status: true"
    end
    if eq ${td_pypi_linked} "true"
        set_env REQUIRE_SERVER_BINARIES "true"
        set_env REQUIRE_THIRD_PARTY "true"
        set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "false"
        set_env TD_SKIP_NON_EXISTING_ASSETS "false"
    else
        set_env REQUIRE_SERVER_BINARIES "false"
        set_env REQUIRE_THIRD_PARTY "false"
        set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "true"
        set_env TD_SKIP_NON_EXISTING_ASSETS "true"
    end
    # This must be false when using a local PyPi reopsitory.
    set_env PYTHON_IGNORE_UNAVAILABLE_PUBLIC_PACKAGES = "true"

    exec --fail-on-error pip3 uninstall tabsdata_mongodb --yes
    wheels = glob_array ./target/python/dist/tabsdata_mongodb*.whl
    for wheel in ${wheels}
        echo "Running command: pip3 install ${wheel}"
        exec --fail-on-error pip3 install ${wheel}
    end
    ''']

[tasks.install_py_tabsdata]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    cd "${ROOT_PROJECT_FOLDER}"

    td_pypi_linked = get_env TD_PYTHON_LINKED_TO_REPOSITORY
    if eq ${td_pypi_linked} ""
        info "ðŸ”— Unespecified link to python repository status... defaulting to true"
        td_pypi_linked = set "true"
    else
        info "ðŸ”— Specified link to python repository status: true"
    end
    if eq ${td_pypi_linked} "true"
        set_env REQUIRE_SERVER_BINARIES "true"
        set_env REQUIRE_THIRD_PARTY "true"
        set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "false"
        set_env TD_SKIP_NON_EXISTING_ASSETS "false"
    else
        set_env REQUIRE_SERVER_BINARIES "false"
        set_env REQUIRE_THIRD_PARTY "false"
        set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "true"
        set_env TD_SKIP_NON_EXISTING_ASSETS "true"
    end
    # This must be false when using a local PyPi reopsitory.
    set_env PYTHON_IGNORE_UNAVAILABLE_PUBLIC_PACKAGES = "true"

    exec --fail-on-error pip3 uninstall tabsdata --yes
    wheels = glob_array ./target/python/dist/tabsdata*.whl
    for wheel in ${wheels}
        echo "Running command: pip3 install ${wheel}"
        exec --fail-on-error pip3 install ${wheel}
    end
    ''']

[tasks.uninstall]
run_task = [
    { name = [
        "uninstall_rs",
        "uninstall_py",
    ] }
]

[tasks.uninstall_rs]

[tasks.uninstall_py]
run_task = [
    { name = [
        "uninstall_py_tabsdata",
        "uninstall_py_tabsdata_salesforce",
        "uninstall_py_tabsdata_mongodb",
    ] }
]

[tasks.uninstall_py_tabsdata]
cwd = "${ROOT_PROJECT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    exec --fail-on-error pip3 uninstall tabsdata --yes
    exec uv cache clean
    exec pip cache purge
    exec python setup.py clean --all
    rm -r ${ROOT_PROJECT_FOLDER}/target/python/
    ''']

[tasks.uninstall_py_tabsdata_salesforce]
cwd = "${PROJECT_PY_TABSDATA_SALESFORCE_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    exec --fail-on-error pip3 uninstall tabsdata_salesforce --yes
    exec uv cache clean
    exec pip cache purge
    exec python setup.py clean --all
    rm -r ${PROJECT_PY_TABSDATA_SALESFORCE_FOLDER}/target/python/
    ''']

[tasks.uninstall_py_tabsdata_mongodb]
cwd = "${PROJECT_PY_TABSDATA_MONGODB_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    exec --fail-on-error pip3 uninstall tabsdata_mongodb --yes
    exec uv cache clean
    exec pip cache purge
    exec python setup.py clean --all
    rm -r ${PROJECT_PY_TABSDATA_MONGODB_FOLDER}/target/python/
    ''']

[tasks.deploy]
dependencies = ["build", "assembly", "install"]

[tasks.bump]
run_task = [
    { name = [
        "bump_cargo",
        "bump_other",
    ] }
]

[tasks.bump_cargo]
private = true
run_task = [
    { name = [
        "bump_cargo_modules",
        "bump_cargo_macros",
    ] }
]

[tasks.bump_cargo_modules]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    exec --fail-on-error cargo workspaces -v version custom ${CARGO_MAKE_TASK_ARGS} --all --no-git-commit --yes
    ''']

[tasks.bump_cargo_macros]
private = true
cwd = "${PROJECT_RS_TD_MACROS_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    exec --fail-on-error cargo workspaces -v version custom ${CARGO_MAKE_TASK_ARGS} --all --no-git-commit --yes
    ''']

[tasks.bump_other]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
command = "python3"
args = ["${BUMP_VERSION_PY}", "${PROJECT_ROOT_FOLDER}", "${CARGO_MAKE_TASK_ARGS}"]

[tasks.virtualenv]
cwd = "${ROOT_PROJECT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    exec --fail-on-error rm -rf .venv
    exec --fail-on-error python3 -m venv .venv
    exec --fail-on-error ${VIRTUAL_PIP} install -U pip
    exec --fail-on-error ${VIRTUAL_PIP} install -e .[test]

    echo "Virtual environment created. Use 'source ${VIRTUAL_ACTIVATE}' to activate it"
    ''']