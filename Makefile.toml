#
# Copyright 2024 Tabs Data Inc.
#

env_scripts = [
    # Display build information
    '''
    #!@duckscript
    echo "CARGO_MAKE_PROFILE.............................: '${CARGO_MAKE_PROFILE}'"
    echo "CARGO_MAKE_CARGO_PROFILE.......................: '${CARGO_MAKE_CARGO_PROFILE}'"
    echo "CARGO_MAKE_RUST_CHANNEL........................: '${CARGO_MAKE_RUST_CHANNEL}'"
    echo "CARGO_MAKE_RUST_TARGET_ARCH....................: '${CARGO_MAKE_RUST_TARGET_ARCH}'"
    echo "CARGO_MAKE_RUST_TARGET_POINTER_WIDTH...........: '${CARGO_MAKE_RUST_TARGET_POINTER_WIDTH}'"
    echo "CARGO_MAKE_RUST_TARGET_VENDOR..................: '${CARGO_MAKE_RUST_TARGET_VENDOR}'"
    echo "CARGO_MAKE_RUST_TARGET_OS......................: '${CARGO_MAKE_RUST_TARGET_OS}'"
    echo "CARGO_MAKE_RUST_TARGET_ENV.....................: '${CARGO_MAKE_RUST_TARGET_ENV}'"
    echo "CARGO_MAKE_RUST_TARGET_TRIPLE..................: '${CARGO_MAKE_RUST_TARGET_TRIPLE}'"
    echo "CARGO_MAKE_CRATE_TARGET_TRIPLE.................: '${CARGO_MAKE_CRATE_TARGET_TRIPLE}'"
    echo "CARGO_MAKE_CRATE_TARGET_DIRECTORY..............: '${CARGO_MAKE_CRATE_TARGET_DIRECTORY}'"
    echo "CARGO_MAKE_CRATE_CUSTOM_TRIPLE_TARGET_DIRECTORY: '${CARGO_MAKE_CRATE_CUSTOM_TRIPLE_TARGET_DIRECTORY}'"
    ''',

    # Set up root folder
    '''
    #!@duckscript
    # (env_project_root_folder.ds)

    current_folder = pwd
    echo "Current project folder is: ${current_folder}"
    ko = set true
    while eq ${ko} true
        git_folder = concat ${current_folder} "/.git"
        if is_dir ${git_folder}
            echo "Root project folder is: ${current_folder}"
            set_env ROOT_PROJECT_FOLDER ${current_folder}
            ko = set false
        else
            parent_folder = dirname ${current_folder}
            if eq ${current_folder} ${parent_folder}
                assert_fail "Current folder not inside a Git repository"
            else
                current_folder = set ${parent_folder}
            end
        end
    end
    ''',

    # Set up python binary
    '''
    python3 -c "if __import__('pathlib').Path('.venv/bin/pip').exists(): print('.venv/bin/')"
    ''',

    # Set up rust settings (rustflags, target, toolchain, build folder, path)
    '''
    #!@duckscript
    root_folder = get_env ROOT_PROJECT_FOLDER

    # if is_empty ${td-target}
    #     os_family = os_family
    #     if eq ${os_family} "windows"
    #         td-target = set "x86_64-pc-windows-msvc"
    #     else
    #         if eq ${os_family} "mac"
    #             td-target = set "aarch64-apple-darwin"
    #         else
    #             if eq ${os_family} "linux"
    #                 td-target = set "x86_64-unknown-linux-gnu"
    #             end
    #         end
    #     end
    # end
    if not is_empty ${td-target}
        set_env td-target ${td-target}
        echo "Using td target: '${td-target}'"
    end

    if not is_empty ${td-cross}
        use_cross = eq ${td-cross} "true"
        if ${use_cross}
            set_env td-cargo "cross"
        else
            set_env td-cargo "cargo"
        end
    else
        set_env td-cargo "cargo"
    end
    td-cargo = get_env td-cargo
    echo "Using Cargo tool: '${td-cargo}'"

    set_env RUSTFLAGS ""
    td-profile = set ${profile}
    if is_empty ${profile}
        build-folder = set "debug"
        td-profile = set "dev"
    else
        is_dev = eq ${profile} "dev"
        if ${is_dev}
            build-folder = set "debug"
        else
            build-folder = set ${profile}
            is_assembly = eq ${profile} "assembly"
            if ${is_assembly}
                os_family = os_family
                flags = readfile ${root_folder}/.cargo/rustflags-${os_family}.cfg
                rust-flags = replace ${flags} "\n" " "
                set_env RUSTFLAGS ${rust-flags}
            end
        end
    end
    set_env td-profile ${td-profile}
    td-profile = get_env td-profile
    echo "Using tabsdata profile: '${td-profile}'"

    if not is_empty ${td-target}
        build-folder = set ${td-target}/${build-folder}
    end
    echo "Computed build folder is: '${build-folder}'"

    rustflags = get_env RUSTFLAGS
    echo "RUSTFLAGS environment variable is: '${rustflags}'"

    old_path = get_env PATH
    os_name = get_env OS
    is_windows = contains ${os_name} "Windows"
    if ${is_windows}
        separator = set ";"
    else
        separator = set ":"
    end
    new_path = concat ${root_folder}/target/${build-folder} ${separator} ${root_folder}/target/pytest/build ${separator} ${old_path}
    set_env PATH ${new_path}
    set_path = get_env PATH
    echo "System PATH: ${set_path}"

    is_musl = eq ${td-target} "x86_64-unknown-linux-musl"
    if ${is_musl}
        PROJECT_ROOT_CARGO_TOML = set "./Cargo.toml"
        PROJECT_MACROS_CARGO_TOML = set "./macros/Cargo.toml"
        set_env PROJECT_ROOT_CARGO_TOML ${PROJECT_ROOT_CARGO_TOML}
        set_env PROJECT_MACROS_CARGO_TOML ${PROJECT_MACROS_CARGO_TOML}
    end
    PROJECT_ROOT_CARGO_TOML = get_env PROJECT_ROOT_CARGO_TOML
    PROJECT_MACROS_CARGO_TOML = get_env PROJECT_MACROS_CARGO_TOML
    echo "Materialized PROJECT_ROOT_CARGO_TOML: '${PROJECT_ROOT_CARGO_TOML}'"
    echo "Materialized PROJECT_MACROS_CARGO_TOML: '${PROJECT_MACROS_CARGO_TOML}'"

    if not is_empty ${macros-features}
        macros-test-features = concat "dummy" "," ${macros-features}
    else
        macros-test-features = set "td-test"
    end
    if not is_empty ${modules-features}
        modules-test-features = concat "dummy" "," ${modules-features}
        modules-test-features-test_logging = concat "dummy" "," ${modules-features} "," "test_logging"
        modules-test-features-test_tower_metadata = concat "dummy" "," ${modules-features} "," "test_tower_metadata"
    else
        modules-test-features = set "td-test"
        modules-test-features-test_logging = set "td-test,test_logging"
        modules-test-features-test_tower_metadata = set "td-test,test_tower_metadata"
    end

    set_env macros-test-features ${macros-test-features}
    set_env modules-test-features ${modules-test-features}
    set_env modules-test-features-test_logging ${modules-test-features-test_logging}
    set_env modules-test-features-test_tower_metadata ${modules-test-features-test_tower_metadata}

    macros-test-features = get_env macros-test-features
    modules-test-features = get_env modules-test-features
    modules-test-features-test_logging = get_env modules-test-features-test_logging
    modules-test-features-test_tower_metadata = get_env modules-test-features-test_tower_metadata

    echo "Using 'macros-test-features': ${macros-test-features}"
    echo "Using 'modules-test-features': ${modules-test-features}"
    echo "Using 'modules-test-features-test_logging': ${modules-test-features-test_logging}"
    echo "Using 'modules-test-features-test_tower_metadata': ${modules-test-features-test_tower_metadata}"
    ''',

    # Check path
    '''
    #!@duckscript
    PATH = get_env PATH
    echo "Current PATH: ${PATH}"
    ''',

    # Set up python markers
    '''
    #!@duckscript
    MARKERS = get_env MARKERS
    no_markers = eq ${MARKERS} ""
    if ${no_markers}
        set_env MARKERS ""
    end
    echo "Using markers: '${MARKERS}'"
    ''',

    # Set up the TDX tests environment variable
    '''
    #!@duckscript
    tmp_dir = temp_dir
    tmp_folder = random_text 16
    tdx = join_path ${tmp_dir} ${tmp_folder} tdx
    set_env TDX ${tdx}
    TDX = get_env TDX
    echo "Using TDX temprary folder: '${TDX}'"
    ''']

[env]
CARGO_TERM_COLOR = "always"
CLIPPY_CONF_DIR = { value = "${ROOT_PROJECT_FOLDER}/.cargo/clippy.toml", normalize = true }
RUST_BACKTRACE = 1
RUST_LOG = "error"
RUSTDOC_LOG = "error"
RUST_TEST_THREADS = 16
PROFILE = "${profile:dev}"
CLEAN = "${clean:false}"
MAKE_SUCCESS = true
SWAGGER_UI_OVERWRITE_FOLDER = { value = "${ROOT_PROJECT_FOLDER}/server/binaries/td-server/resources/swagger", normalize = true }

PROJECT_ROOT_CARGO_TOML = { value = "${ROOT_PROJECT_FOLDER}/Cargo.toml", normalize = true }
PROJECT_MACROS_CARGO_TOML = { value = "${ROOT_PROJECT_FOLDER}/macros/Cargo.toml", normalize = true }
AUDIT_TOML = { value = "${ROOT_PROJECT_FOLDER}/.cargo/audit.toml", normalize = true }
DENY_TOML = { value = "${ROOT_PROJECT_FOLDER}/.cargo/deny.toml", normalize = true }
PANTS_JSON = { value = "${ROOT_PROJECT_FOLDER}/.cargo/pants.json", normalize = true }
PROJECT_ROOT_FOLDER = { value = "${ROOT_PROJECT_FOLDER}/", normalize = true }
PROJECT_MACROS_FOLDER = { value = "${ROOT_PROJECT_FOLDER}/macros/", normalize = true }
PROJECT_TD_FEATURES_ROOT = { value = "${ROOT_PROJECT_FOLDER}/client/td-lib/td_features/", normalize = true }
PROJECT_TA_INTERCEPTOR_ROOT = { value = "${ROOT_PROJECT_FOLDER}/client/td-lib/ta_interceptor/", normalize = true }
PROJECT_TD_INTERCEPTOR_ROOT = { value = "${ROOT_PROJECT_FOLDER}/plugins/python/td-lib/td_interceptor/", normalize = true }
PROJECT_TD_SDK_ROOT = { value = "${ROOT_PROJECT_FOLDER}/client/td-sdk/", normalize = true }
CLEAN_PYTHON_PY = { value = "${ROOT_PROJECT_FOLDER}/devutils/automation/tasks/makers/td-scripts/clean_python.py", normalize = true }
COPY_ASSETS_PY = { value = "${ROOT_PROJECT_FOLDER}/devutils/automation/tasks/makers/td-scripts/copy_assets.py", normalize = true }
TESTS_FOLDER = { value = "tests/", normalize = true }
RUST_DOCS = { value = "${ROOT_PROJECT_FOLDER}/target/doc/tabsdatalib/index.html", normalize = true }
PYTHON_DOCS = { value = "${ROOT_PROJECT_FOLDER}/client/td-sdk/site/index.html", normalize = true }
VIRTUAL_PIP = { value = "${ROOT_PROJECT_FOLDER}/client/td-sdk/.venv/bin/pip3", normalize = true }
VIRTUAL_ACTIVATE = { value = "${ROOT_PROJECT_FOLDER}/client/td-sdk/.venv/bin/activate", normalize = true }

[config]
skip_core_tasks = true
skip_rust_env_info = true
skip_crate_env_info = true
reduce_output = false
init_task = "setup"
end_task = "teardown"
on_error_task = "failure"

[tasks.setup]
script_runner = "@duckscript"
script = [
    '''
    # PATH = get_env PATH
    # echo "Real PATH: ${PATH}"
    ''']

[tasks.teardown]
script_runner = "@duckscript"
script = [
    '''
    os_family = os_family
    if eq ${os_family} "windows"
        cm_run_task teardown_windows
    else
        if eq ${os_family} "mac"
            cm_run_task teardown_mac
        else
            if eq ${os_family} "linux"
                cm_run_task teardown_linux
            end
        end
    end
    ''']

[tasks.teardown_windows]
ignore_errors = true
condition = { env = { MAKE_SUCCESS = "true" } }

[tasks.teardown_linux]
ignore_errors = true
condition = { env = { MAKE_SUCCESS = "true" } }

[tasks.teardown_mac]
ignore_errors = true
condition = { env = { MAKE_SUCCESS = "true" } }
script = [
    '''
    if command -v viu &> /dev/null; then
        echo
        viu --width 32 ${ROOT_PROJECT_FOLDER}/assets/images/ferri-happy.png
    fi
    if command -v lolcat &> /dev/null && command -v figlet &> /dev/null; then
        echo
        figlet -f ${ROOT_PROJECT_FOLDER}/assets/fonts/3d.flf Done! | lolcat
        echo
    else
        echo "Ok!. Install figlet and lolcat for cooler messages..."
    fi
    ''']

[tasks.failure]
script_runner = "@duckscript"
script = [
    '''
    os_family = os_family
    if eq ${os_family} "windows"
        cm_run_task failure_windows
    else
        if eq ${os_family} "mac"
            cm_run_task failure_mac
        else
            if eq ${os_family} "linux"
                cm_run_task failure_linux
            end
        end
    end
    ''']

[tasks.failure_windows]
ignore_errors = true
env = { MAKE_SUCCESS = "false" }

[tasks.failure_linux]
ignore_errors = true
env = { MAKE_SUCCESS = "false" }

[tasks.failure_mac]
ignore_errors = true
env = { MAKE_SUCCESS = "false" }
script = [
    '''
    if command -v viu &> /dev/null; then
        echo
        viu --width 32 ${ROOT_PROJECT_FOLDER}/assets/images/ferri-sad.png
    fi
    if command -v lolcat &> /dev/null && command -v figlet &> /dev/null; then
        echo
        figlet -f ${ROOT_PROJECT_FOLDER}/assets/fonts/3d.flf Failed! | lolcat
        echo
    else
        echo "Ko!. Install figlet and lolcat for cooler messages..."
    fi
    ''']

[tasks.default]
alias = "make"

[tasks.make]
run_task = [
    { name = [
        "make_rs",
        "make_py"
    ] }
]

[tasks.make_rs]
run_task = [
    { name = [
        "clean_rs",
        "compose_rs"], condition = { env = { "CLEAN" = "true" } } },
    { name = [
        "compose_rs"
    ] }
]

[tasks.make_py]
run_task = [
    { name = [
        "clean_py",
        "compose_py"], condition = { env = { "CLEAN" = "true" } } },
    { name = [
        "compose_py"
    ] }
]

[tasks.compose]
private = true
run_task = [
    { name = [
        "compose_rs",
        "compose_py",
    ] }
]

[tasks.compose_rs]
private = true
run_task = [
    { name = [
        "build_rs",
        "test_rs",
        "check_rs",
        "fmt_rs",
        "license_rs",
        "upgrade_rs",
        "deny_rs",
        "audit_rs",
        "pants_rs",
        "machete_rs",
        "clippy_rs",
    ] }
]

[tasks.compose_py]
private = true
run_task = [
    { name = [
        "build_py",
        "test_py",
        "check_py",
        "fmt_py",
        "license_py",
        "upgrade_py",
        "deny_py",
        "audit_py",
        "pants_py",
        "machete_py",
        "clippy_py",
    ] }
]

[tasks.clean]
run_task = [
    { name = [
        "clean_rs",
        "clean_py"
    ] }
]

[tasks.clean_rs]
run_task = [
    { name = [
        "clean_rs_macros",
        "clean_rs_modules",
        "clean_rs_all"
    ] }
]

[tasks.clean_py]
run_task = [
    { name = [
        "clean_py_tabsdata",
        "clean_py_td_features",
        "clean_py_ta_interceptor",
        "clean_py_td_interceptor",
        "clean_py_td-sdk"
    ] }
]

[tasks.clean_rs_macros]
private = true
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clean --manifest-path ${PROJECT_MACROS_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clean --manifest-path ${PROJECT_MACROS_CARGO_TOML}
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clean --target ${td-target} --manifest-path ${PROJECT_MACROS_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clean --target ${td-target} --manifest-path ${PROJECT_MACROS_CARGO_TOML}
        end
    end
    ''']

[tasks.clean_rs_modules]
private = true
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clean --manifest-path ${PROJECT_ROOT_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clean --manifest-path ${PROJECT_ROOT_CARGO_TOML}
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clean --target ${td-target} --manifest-path ${PROJECT_ROOT_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clean --target ${td-target} --manifest-path ${PROJECT_ROOT_CARGO_TOML}
        end
    end
    ''']

[tasks.clean_rs_all]
private = true
command = "python3"
args = ["${CLEAN_PYTHON_PY}", "${PROJECT_ROOT_FOLDER}", "rs"]

[tasks.clean_py_tabsdata]
private = true
command = "python3"
args = ["${CLEAN_PYTHON_PY}", "${PROJECT_ROOT_FOLDER}", "py"]

[tasks.clean_py_td_features]
private = true
command = "python3"
args = ["${CLEAN_PYTHON_PY}", "${PROJECT_TD_FEATURES_ROOT}", "py"]

[tasks.clean_py_ta_interceptor]
private = true
command = "python3"
args = ["${CLEAN_PYTHON_PY}", "${PROJECT_TA_INTERCEPTOR_ROOT}", "py"]

[tasks.clean_py_td_interceptor]
private = true
command = "python3"
args = ["${CLEAN_PYTHON_PY}", "${PROJECT_TD_INTERCEPTOR_ROOT}", "py"]

[tasks.clean_py_td-sdk]
private = true
command = "python3"
args = ["${CLEAN_PYTHON_PY}", "${PROJECT_TD_SDK_ROOT}", "py"]

[tasks.build]
run_task = [
    { name = [
        "build_rs",
        "build_py"
    ] }
]

[tasks.build_rs]
run_task = [
    { name = [
        "build_all_rs",
        "build_none_rs"
    ] }
]

[tasks.build_py]
run_task = [
    { name = [
        "build_py_td_features",
        "build_py_ta_interceptor",
        "build_py_td_interceptor",
        "build_py_td-sdk"
    ] }
]

[tasks.build_all_rs]
private = true
run_task = [
    { name = [
        "build_all_rs_macros",
        "build_all_rs_modules"
    ] }
]

[tasks.build_all_rs_macros]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} build --profile ${td-profile} --workspace --manifest-path ${PROJECT_MACROS_CARGO_TOML} --all-features --lib --bins --examples
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} build --profile ${td-profile} --workspace --manifest-path ${PROJECT_MACROS_CARGO_TOML} --all-features --lib --bins --examples
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} build --target ${td-target} --profile ${td-profile} --workspace --manifest-path ${PROJECT_MACROS_CARGO_TOML} --all-features --lib --bins --examples
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} build --target ${td-target} --profile ${td-profile} --workspace --manifest-path ${PROJECT_MACROS_CARGO_TOML} --all-features --lib --bins --examples
        end
    end
    ''']

[tasks.build_all_rs_modules]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} build --profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --all-features --lib --bins --examples
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} build --profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --all-features --lib --bins --examples
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} build --target ${td-target} --profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --all-features --lib --bins --examples
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} build --target ${td-target} --profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --all-features --lib --bins --examples
        end
    end
    ''']

[tasks.build_none_rs]
private = true
run_task = [
    { name = [
        "build_none_rs_macros",
        "build_none_rs_modules"
    ] }
]

[tasks.build_none_rs_macros]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} build --profile ${td-profile} --workspace --manifest-path ${PROJECT_MACROS_CARGO_TOML} --lib --bins
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} build --profile ${td-profile} --workspace --manifest-path ${PROJECT_MACROS_CARGO_TOML} --lib --bins
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} build --target ${td-target} --profile ${td-profile} --workspace --manifest-path ${PROJECT_MACROS_CARGO_TOML} --lib --bins
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} build --target ${td-target} --profile ${td-profile} --workspace --manifest-path ${PROJECT_MACROS_CARGO_TOML} --lib --bins
        end
    end
    ''']

[tasks.build_none_rs_modules]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} build --profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --lib --bins
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} build --profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --lib --bins
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} build --target ${td-target} --profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --lib --bins
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} build --target ${td-target} --profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --lib --bins
        end
    end
    ''']

[tasks.build_py_td_features]
private = true

[tasks.build_py_ta_interceptor]
private = true

[tasks.build_py_td_interceptor]
private = true

[tasks.build_py_td-sdk]
private = true

[tasks.test]
run_task = [
    { name = [
        "test_rs",
        "test_py"
    ] }
]

[tasks.test_rs]
run_task = [
    { name = [
        "test_rs_macros",
        "test_rs_modules"
    ] }
]

[tasks.pre-test_py]
private = true
dependencies = ["set_mode_test_py", "license"]
script_runner = "@duckscript"
script = [
    '''
    echo "_____ Copying assets first..."
    cm_run_task copy_assets

    echo "_____ Compiling..."
    cm_run_task build

    echo "_____ Generating python binaries first..."
    cm_run_task setup_pytest_tabsdata

    echo "_____ Starting tabsdata server (pytest) first..."
    cm_run_task stop_pytest_tabsdata
    sleep 5000
    cm_run_task remove_pytest_tabsdata
    sleep 2000
    cm_run_task start_pytest_tabsdata
    sleep 5000
    cm_run_task status_pytest_tabsdata
    ''']

[tasks.post-test_py]
private = true
dependencies = ["set_mode_test_py"]
script_runner = "@duckscript"
script = [
    '''
    cm_run_task stop_pytest_tabsdata
    ''']

[tasks.copy_assets]
private = true
command = "python3"
args = ["${COPY_ASSETS_PY}"]

[tasks.start_pytest_tabsdata]
private = true
script_runner = "@duckscript"
script = [
    '''
    echo "_____ Starting tabsdata server (pytest)..."

    if is_empty ${profile}
        build-folder = set "debug"
    else
        is_dev = eq ${profile} "dev"
        if ${is_dev}
            build-folder = set "debug"
        else
            build-folder = set ${profile}
        end
    end

    if not is_empty ${td-target}
        build-folder = set ${td-target}/${build-folder}
    end

    os_family = os_family
    if eq ${os_family} "windows"
        tdserver = set "tdserver.exe"
    else
        tdserver = set "tdserver"
    end
    echo "Using tdserver binary: '${os_family}' - '${tdserver}'"

    TDX = get_env TDX
    echo "The tdserver process will use TDX location: '${TDX}'"

    echo Running command "${ROOT_PROJECT_FOLDER}/target/${build-folder}/${tdserver} start --instance pytest -- -- apisrv --address 127.0.0.1:2467"

    exec --fail-on-error ${ROOT_PROJECT_FOLDER}/target/${build-folder}/${tdserver} start --instance pytest -- -- apisrv --address 127.0.0.1:2467
    ''']

[tasks.status_pytest_tabsdata]
private = true
script_runner = "@duckscript"
script = [
    '''
    echo "_____ Starting tabsdata server (pytest)..."

    if is_empty ${profile}
        build-folder = set "debug"
    else
        is_dev = eq ${profile} "dev"
        if ${is_dev}
            build-folder = set "debug"
        else
            build-folder = set ${profile}
        end
    end

    if not is_empty ${td-target}
        build-folder = set ${td-target}/${build-folder}
    end

    os_family = os_family
    if eq ${os_family} "windows"
        tdserver = set "tdserver.exe"
    else
        tdserver = set "tdserver"
    end
    echo "Using tdserver binary: '${os_family}' - '${tdserver}'"

    echo Running command "${ROOT_PROJECT_FOLDER}/target/${build-folder}/${tdserver} status --instance pytest"

    exec --fail-on-error ${ROOT_PROJECT_FOLDER}/target/${build-folder}/${tdserver} status --instance pytest
    ''']

[tasks.stop_pytest_tabsdata]
private = true
script_runner = "@duckscript"
script = [
    '''
    echo "_____ Stopping tabsdata server (pytest)..."

    if is_empty ${profile}
        build-folder = set "debug"
    else
        is_dev = eq ${profile} "dev"
        if ${is_dev}
            build-folder = set "debug"
        else
            build-folder = set ${profile}
        end
    end

    if not is_empty ${td-target}
        build-folder = set ${td-target}/${build-folder}
    end

    os_family = os_family
    if eq ${os_family} "windows"
        tdserver = set "tdserver.exe"
    else
        tdserver = set "tdserver"
    end
    echo "Using tdserver binary: '${os_family}' - '${tdserver}'"

    echo Running command "${ROOT_PROJECT_FOLDER}/target/${build-folder}/${tdserver} stop --instance pytest"

    exec --fail-on-error ${ROOT_PROJECT_FOLDER}/target/${build-folder}/${tdserver} stop --instance pytest
    ''']

[tasks.setup_pytest_tabsdata]
private = true
script_runner = "@duckscript"
script = [
    '''
    echo "_____ Setting up tabsdata pytest context..."

    echo Running command "python3 setup.py --quiet develop --script-dir target/pytest/build"
    set_env PYTHONWARNINGS ignore
    exec --fail-on-error python3 setup.py --quiet develop --script-dir target/pytest/build

    echo "_____ Setting up tabsdata pytest python path..."

    echo Running command "python3 ${PROJECT_TD_SDK_ROOT}/tests/bootest.py"
    output = exec python3 ${PROJECT_TD_SDK_ROOT}/tests/bootest.py
    pythonpath = set ${output.stdout}
    echo "Python system path will be added: ${pythonpath}"

    old_pythonpath = get_env PYTHONPATH
    echo "Python system path before adjusting: ${old_pythonpath}"

    os_name = get_env OS
    is_windows = contains ${os_name} "Windows"
    if ${is_windows}
        separator = set ";"
    else
        separator = set ":"
    end
    new_pythonpath = concat ${pythonpath} ${separator} ${old_path}
    echo "Python system path after adjusting: ${new_pythonpath}"

    set_env PYTHONPATH ${new_pythonpath}
    set_pythonpath = get_env PYTHONPATH
    echo "Python system path persisted: ${set_pythonpath}"
    ''']

[tasks.remove_pytest_tabsdata]
private = true
script_runner = "@duckscript"
script = [
    '''
    echo "_____ Deleteing tabsdata server (pytest)..."
    home_folder = set ${HOME}
    instance_folder = set ${home_folder}/.tabsdata/instances/pytest
    echo "The tabsdata instance pytest folder is: ${instance_folder}"
    exists_instance_folder = is_path_exists ${instance_folder}
    if eq ${exists_instance_folder} true
        echo "The tabsdata instance pytest folder exists. Deleting it: ${target_dir}..."
        rm -r ${instance_folder}
        echo "The tabsdata instance pytest exists has been deleted: ${target_dir}!"
    else
        echo "The tabsdata instance pytest folder does not exist. Skipping deleting it: ${target_dir}..."
    end
    ''']

[tasks.test_py]
dependencies = ["set_mode_test_py"]
run_task = [
    { name = [
        "pre-test_py",
        "test_py_td_features",
        "test_py_ta_interceptor",
        "test_py_td_interceptor",
        "test_py_td-sdk",
        "post-test_py"
    ] }
]

[tasks.set_mode_test_py]
private = true
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${verbose}
        set_env TD_VERBOSE "false"
    end

    if is_empty ${compile}
        set_env TD_COMPILE "true"
    else
        if eq ${compile} "true"
            set_env TD_COMPILE "true"
        else
            if eq ${compile} "false"
                set_env TD_COMPILE "false"
            else
                set_env TD_COMPILE "false"
            end
        end
    end
    ''']

[tasks.test_rs_macros]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if eq ${td-cargo} "cross"
        if is_empty ${td-target}
            if is_empty ${td-toolchain}
                exec --fail-on-error ${td-cargo} test --jobs 8 --all-targets --profile ${td-profile} --workspace --manifest-path ${PROJECT_MACROS_CARGO_TOML} --features ${macros-test-features}
            else
                exec --fail-on-error ${td-cargo} +${td-toolchain} test --jobs 8 --all-targets --profile ${td-profile} --workspace --manifest-path ${PROJECT_MACROS_CARGO_TOML} --features ${macros-test-features}
           end
        else
            if is_empty ${td-toolchain}
                exec --fail-on-error ${td-cargo} test --target ${td-target} --jobs 8 --all-targets --profile ${td-profile} --workspace --manifest-path ${PROJECT_MACROS_CARGO_TOML} --features ${macros-test-features}
            else
                exec --fail-on-error ${td-cargo} +${td-toolchain} test --target ${td-target} --jobs 8 --all-targets --profile ${td-profile} --workspace --manifest-path ${PROJECT_MACROS_CARGO_TOML} --features ${macros-test-features}
            end
        end
    else
        if is_empty ${td-target}
            if is_empty ${td-toolchain}
                exec --fail-on-error ${td-cargo} nextest run --test-threads 8 --cargo-profile ${td-profile} --workspace --manifest-path ${PROJECT_MACROS_CARGO_TOML} --features ${macros-test-features}
            else
                exec --fail-on-error ${td-cargo} +${td-toolchain} nextest run --test-threads 8 --cargo-profile ${td-profile} --workspace --manifest-path ${PROJECT_MACROS_CARGO_TOML} --features ${macros-test-features}
           end
        else
            if is_empty ${td-toolchain}
                exec --fail-on-error ${td-cargo} nextest run --target ${td-target} --test-threads 8 --cargo-profile ${td-profile} --workspace --manifest-path ${PROJECT_MACROS_CARGO_TOML} --features ${macros-test-features}
            else
                exec --fail-on-error ${td-cargo} +${td-toolchain} nextest run --target ${td-target} --test-threads 8 --cargo-profile ${td-profile} --workspace --manifest-path ${PROJECT_MACROS_CARGO_TOML} --features ${macros-test-features}
            end
        end
    end
    ''']

[tasks.test_rs_modules]
private = true
run_task = [
    { name = [
        "test_rs_modules_standard",
        "test_rs_modules_logging",
        "test_rs_modules_tower"
    ] }
]

[tasks.test_rs_modules_standard]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if eq ${td-cargo} "cross"
        if is_empty ${td-target}
            if is_empty ${td-toolchain}
                exec --fail-on-error ${td-cargo} test --jobs 8 --all-targets --profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features}
            else
                exec --fail-on-error ${td-cargo} +${td-toolchain} test --jobs 8 --all-targets --profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features}
           end
        else
            if is_empty ${td-toolchain}
                exec --fail-on-error ${td-cargo} test --target ${td-target} --jobs 8 --all-targets --profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features}
            else
                exec --fail-on-error ${td-cargo} +${td-toolchain} test --target ${td-target} --jobs 8 --all-targets --profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features}
            end
        end
    else
        if is_empty ${td-target}
            if is_empty ${td-toolchain}
                exec --fail-on-error ${td-cargo} nextest run --test-threads 8 --cargo-profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features}
            else
                exec --fail-on-error ${td-cargo} +${td-toolchain} nextest run --test-threads 8 --cargo-profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features}
           end
        else
            if is_empty ${td-toolchain}
                exec --fail-on-error ${td-cargo} nextest run --target ${td-target} --test-threads 8 --cargo-profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features}
            else
                exec --fail-on-error ${td-cargo} +${td-toolchain} nextest run --target ${td-target} --test-threads 8 --cargo-profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features}
            end
        end
    end
    ''']

[tasks.test_rs_modules_logging]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if eq ${td-cargo} "cross"
        if is_empty ${td-target}
            if is_empty ${td-toolchain}
                exec --fail-on-error ${td-cargo} test --jobs 8 --all-targets --profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features-test_logging} -- test_logging
            else
                exec --fail-on-error ${td-cargo} +${td-toolchain} test --jobs 8 --all-targets --profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features-test_logging} -- test_logging
           end
        else
            if is_empty ${td-toolchain}
                exec --fail-on-error ${td-cargo} test --target ${td-target} --jobs 8 --all-targets --profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features-test_logging} -- test_logging
            else
                exec --fail-on-error ${td-cargo} +${td-toolchain} test --target ${td-target} --jobs 8 --all-targets --profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features-test_logging} -- test_logging
            end
        end
    else
        if is_empty ${td-target}
            if is_empty ${td-toolchain}
                exec --fail-on-error ${td-cargo} nextest run --test-threads 8 --cargo-profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features-test_logging} -- test_logging
            else
                exec --fail-on-error ${td-cargo} +${td-toolchain} nextest run --test-threads 8 --cargo-profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features-test_logging} -- test_logging
           end
        else
            if is_empty ${td-toolchain}
                exec --fail-on-error ${td-cargo} nextest run --target ${td-target} --test-threads 8 --cargo-profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features-test_logging} -- test_logging
            else
                exec --fail-on-error ${td-cargo} +${td-toolchain} nextest run --target ${td-target} --test-threads 8 --cargo-profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features-test_logging} -- test_logging
            end
        end
    end
    ''']

[tasks.test_rs_modules_tower]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if eq ${td-cargo} "cross"
        if is_empty ${td-target}
            if is_empty ${td-toolchain}
                exec --fail-on-error ${td-cargo} test --jobs 8 --all-targets --profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features-test_tower_metadata} -- test_tower_metadata
            else
                exec --fail-on-error ${td-cargo} +${td-toolchain} test --jobs 8 --all-targets --profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features-test_tower_metadata} -- test_tower_metadata
           end
        else
            if is_empty ${td-toolchain}
                exec --fail-on-error ${td-cargo} test --target ${td-target} --jobs 8 --all-targets --profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features-test_tower_metadata} -- test_tower_metadata
            else
                exec --fail-on-error ${td-cargo} +${td-toolchain} test --target ${td-target} --jobs 8 --all-targets --profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features-test_tower_metadata} -- test_tower_metadata
            end
        end
    else
        if is_empty ${td-target}
            if is_empty ${td-toolchain}
                exec --fail-on-error ${td-cargo} nextest run --test-threads 8 --cargo-profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features-test_tower_metadata} -- test_tower_metadata
            else
                exec --fail-on-error ${td-cargo} +${td-toolchain} nextest run --test-threads 8 --cargo-profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features-test_tower_metadata} -- test_tower_metadata
           end
        else
            if is_empty ${td-toolchain}
                exec --fail-on-error ${td-cargo} nextest run --target ${td-target} --test-threads 8 --cargo-profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features-test_tower_metadata} -- test_tower_metadata
            else
                exec --fail-on-error ${td-cargo} +${td-toolchain} nextest run --target ${td-target} --test-threads 8 --cargo-profile ${td-profile} --workspace --manifest-path ${PROJECT_ROOT_CARGO_TOML} --features ${modules-test-features-test_tower_metadata} -- test_tower_metadata
            end
        end
    end
    ''']

[tasks.test_py_td_features]
private = true
dependencies = ["set_mode_test_py"]
cwd = "${PROJECT_TD_FEATURES_ROOT}"
script_runner = "@duckscript"
script = [
    '''
    verbose = get_env TD_VERBOSE
    compile = get_env TD_COMPILE

    if eq ${verbose} "false"
        echo "_____ Running command: pytest -n 16 ${TESTS_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest -n 16 ${TESTS_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
        if not eq ${exit_code} "5"
            code = exit ${exit_code}
        end
    else
        echo "_____ Running command: pytest -${verbose} --full-trace --log-level=DEBUG -n 16 ${TESTS_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest -${verbose} --full-trace --log-level=DEBUG -n 16 ${TESTS_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
        if not eq ${exit_code} "5"
            code = exit ${exit_code}
        end
    end
    ''']

[tasks.test_py_ta_interceptor]
private = true
dependencies = ["set_mode_test_py"]
cwd = "${PROJECT_TA_INTERCEPTOR_ROOT}"
script_runner = "@duckscript"
script = [
    '''
    verbose = get_env TD_VERBOSE
    compile = get_env TD_COMPILE

    if eq ${verbose} "false"
        echo "_____ Running command: pytest -n 16 ${TESTS_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest -n 16 ${TESTS_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
        if not eq ${exit_code} "5"
            code = exit ${exit_code}
        end
    else
        echo "_____ Running command: pytest -${verbose} --full-trace --log-level=DEBUG -n 16 ${TESTS_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest -${verbose} --full-trace --log-level=DEBUG -n 16 ${TESTS_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
        if not eq ${exit_code} "5"
            code = exit ${exit_code}
        end
    end
    ''']

[tasks.test_py_td_interceptor]
private = true
dependencies = ["set_mode_test_py"]
cwd = "${PROJECT_TD_INTERCEPTOR_ROOT}"
script_runner = "@duckscript"
script = [
    '''
    verbose = get_env TD_VERBOSE
    compile = get_env TD_COMPILE

    if eq ${verbose} "false"
        echo "_____ Running command: pytest -n 16 ${TESTS_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest pytest -n 16 ${TESTS_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
        if not eq ${exit_code} "5"
            code = exit ${exit_code}
        end
    else
        echo "_____ Running command: pytest -${verbose} --full-trace --log-level=DEBUG -n 16 ${TESTS_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest -${verbose} --full-trace --log-level=DEBUG -n 16 ${TESTS_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
        if not eq ${exit_code} "5"
            code = exit ${exit_code}
        end

    end
    ''']

[tasks.test_py_td-sdk]
private = true
dependencies = ["set_mode_test_py"]
cwd = "${PROJECT_TD_SDK_ROOT}"
script_runner = "@duckscript"
script = [
    '''
    verbose = get_env TD_VERBOSE
    compile = get_env TD_COMPILE

    if eq ${verbose} "false"
        echo "_____ Running command: pytest -n 16 ${TESTS_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest -n 16 ${TESTS_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
        if not eq ${exit_code} "5"
            code = exit ${exit_code}
        end
    else
        echo "_____ Running command: pytest -v --full-trace --log-level=DEBUG -n 16 ${TESTS_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest -v --full-trace --log-level=DEBUG -n 16 ${TESTS_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
        if not eq ${exit_code} "5"
            code = exit ${exit_code}
        end
    end
    ''']

[tasks.rstest]
alias = "rstest_modules"

[tasks.rstest_logging]
alias = "rstest_modules_logging"

[tasks.rstest_tower]
alias = "rstest_modules_tower"

[tasks.rstest_macros]
cwd = "${PROJECT_ROOT_FOLDER}"
command = "cargo"
args = ["test", "@@split(CARGO_MAKE_TASK_ARGS, ;)", "--profile", "${td-profile}", "--manifest-path", "${PROJECT_MACROS_CARGO_TOML}", "--features", "${macros-test-features}", "--", "--nocapture"]

[tasks.rstest_modules]
cwd = "${PROJECT_ROOT_FOLDER}"
command = "cargo"
args = ["test", "@@split(CARGO_MAKE_TASK_ARGS, ;)", "--profile", "${td-profile}", "--manifest-path", "${PROJECT_ROOT_CARGO_TOML}", "--features", "${modules-test-features}", "--", "--nocapture"]

[tasks.rstest_modules_logging]
cwd = "${PROJECT_ROOT_FOLDER}"
command = "cargo"
args = ["test", "@@split(CARGO_MAKE_TASK_ARGS, ;)", "--profile", "${td-profile}", "--manifest-path", "${PROJECT_ROOT_CARGO_TOML}", "--features", "${modules-test-features-test_logging}", "--", "test_logging", "--", "--nocapture"]

[tasks.rstest_modules_tower]
cwd = "${PROJECT_ROOT_FOLDER}"
command = "cargo"
args = ["test", "@@split(CARGO_MAKE_TASK_ARGS, ;)", "--profile", "${td-profile}", "--manifest-path", "${PROJECT_ROOT_CARGO_TOML}", "--features", "${modules-test-features-test_tower_metadata}", "--", "test_tower_metadata", "--", "--nocapture"]

[tasks.rsnext]
alias = "rsnext_modules"

[tasks.rsnext_logging]
alias = "rsnext_modules_logging"

[tasks.rsnext_tower]
alias = "rsnext_modules_tower"

[tasks.rsnext_macros]
cwd = "${PROJECT_ROOT_FOLDER}"
command = "cargo"
args = ["nextest", "run", "--nocapture", "--cargo-profile", "${td-profile}", "--manifest-path", "${PROJECT_MACROS_CARGO_TOML}", "--features", "${macros-test-features}", "@@split(CARGO_MAKE_TASK_ARGS, ;)"]

[tasks.rsnext_modules]
cwd = "${PROJECT_ROOT_FOLDER}"
command = "cargo"
args = ["nextest", "run", "--nocapture", "--cargo-profile", "${td-profile}", "--manifest-path", "${PROJECT_ROOT_CARGO_TOML}", "--features", "${modules-test-features}", "@@split(CARGO_MAKE_TASK_ARGS, ;)"]

[tasks.rsnext_modules_logging]
cwd = "${PROJECT_ROOT_FOLDER}"
command = "cargo"
args = ["nextest", "run", "--nocapture", "--cargo-profile", "${td-profile}", "--manifest-path", "${PROJECT_ROOT_CARGO_TOML}", "--features", "${modules-test-features-test_logging}", "--", "test_logging", "@@split(CARGO_MAKE_TASK_ARGS, ;)"]

[tasks.rsnext_modules_tower]
cwd = "${PROJECT_ROOT_FOLDER}"
command = "cargo"
args = ["nextest", "run", "--nocapture", "--cargo-profile", "${td-profile}", "--manifest-path", "${PROJECT_ROOT_CARGO_TOML}", "--features", "${modules-test-features-test_tower_metadata}", "--", "test_tower_metadata", "@@split(CARGO_MAKE_TASK_ARGS, ;)"]

[tasks.pytest]
dependencies = ["set_mode_test_py"]
cwd = "${PROJECT_TD_SDK_ROOT}"
script_runner = "@duckscript"
script = [
    '''
    verbose = get_env TD_VERBOSE
    compile = get_env TD_COMPILE

    if eq ${compile} "true"
        echo "_____ Compiling first..."
        cm_run_task build
    end

    echo "_____ Testing next..."
    arguments = set ${@}
    parameters = array
    configuration = temp_file "ini"
    found = set false
    for argument in ${arguments}
        if ${found}
            array_push ${parameters} ${argument}
            appendfile ${configuration} ${argument}\n
        else
            if eq ${argument} "--"
                found = set true
            end
        end
    end
    echo "_____ Running command: pytest @${configuration}"
    exec --fail-on-error pytest @${configuration}
    rm ${configuration}
    ''']

[tasks.check]
run_task = [
    { name = [
        "check_rs",
        "check_py"
    ] }
]

[tasks.check_rs]
run_task = [
    { name = [
        "check_rs_macros",
        "check_rs_modules"
    ] }
]

[tasks.check_py]

[tasks.check_rs_macros]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} check --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_MACROS_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} check --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_MACROS_CARGO_TOML}
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} check --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_MACROS_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} check --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_MACROS_CARGO_TOML}
        end
    end
    ''']

[tasks.check_rs_modules]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} check --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_ROOT_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} check --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_ROOT_CARGO_TOML}
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} check --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_ROOT_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} check --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_ROOT_CARGO_TOML}
        end
    end
    ''']

[tasks.fmt]
run_task = [
    { name = [
        "fmt_rs",
        "fmt_py"
    ] }
]

[tasks.fmt_rs]
run_task = [
    { name = [
        "fmt_rs_macros",
        "fmt_rs_modules"
    ] }
]

[tasks.fmt_py]
run_task = [
    { name = [
        "fmt_py_flake8_conventions",
        "fmt_py_flake8_complexity",
        "fmt_py_black",
        "fmt_py_isort"
    ] }
]

[tasks.fmt_rs_macros]
private = true
command = "cargo"
args = ["fmt", "--manifest-path", "${PROJECT_MACROS_CARGO_TOML}", "--all", "--", "--check"]

[tasks.fmt_rs_modules]
private = true
command = "cargo"
args = ["fmt", "--manifest-path", "${PROJECT_ROOT_CARGO_TOML}", "--all", "--", "--check"]

[tasks.fmt_py_flake8_conventions]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: ${ENV_PREFIX}flake8 --select=E9,F63,F7,F82 --ignore=E203,W503 --show-source --statistics . --extend-exclude .venv,dist,build,.tabsdata"
    exec --fail-on-error ${ENV_PREFIX}flake8 --select=E9,F63,F7,F82 --ignore=E203,W503 --show-source --statistics . --extend-exclude .venv,dist,build,.tabsdata
    ''']

[tasks.fmt_py_flake8_complexity]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: ${ENV_PREFIX}flake8 --max-complexity=10 --ignore=E203,W503 --max-line-length=88 --statistics  . --extend-exclude .venv,dist,build,.tabsdata"
    exec --fail-on-error ${ENV_PREFIX}flake8 --max-complexity=10 --ignore=E203,W503 --max-line-length=88 --statistics  . --extend-exclude .venv,dist,build,.tabsdata
    ''']

[tasks.fmt_py_black]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: ${ENV_PREFIX}black --preview --enable-unstable-feature string_processing --check . --extend-exclude .tabsdata"
    exec --fail-on-error ${ENV_PREFIX}black --preview --enable-unstable-feature string_processing --check . --extend-exclude .tabsdata
    ''']

[tasks.fmt_py_isort]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: ${ENV_PREFIX}isort --check . --extend-skip .tabsdata"
    exec --fail-on-error ${ENV_PREFIX}isort --check . --extend-skip .tabsdata
    ''']

[tasks.format]
run_task = [
    { name = [
        "format_rs",
        "format_py"
    ] }
]

[tasks.format_rs]

[tasks.format_py]
run_task = [
    { name = [
        "format_py_black",
        "format_py_isort"
    ] }
]

[tasks.format_py_black]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: ${ENV_PREFIX}black --preview --enable-unstable-feature string_processing ."
    exec --fail-on-error ${ENV_PREFIX}black --preview --enable-unstable-feature string_processing .
    ''']

[tasks.format_py_isort]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: ${ENV_PREFIX}isort ."
    exec --fail-on-error ${ENV_PREFIX}isort .
    ''']

[tasks.license]
cwd = "${PROJECT_ROOT_FOLDER}"
dependencies = ["license_rs", "license_py"]
script = [
    '''
    (cat ./target/audit/licenses_rs.txt; cat ./target/audit/licenses_py.txt) > ./target/audit/licenses.txt
    (cat ./target/audit/licenses_rs.txt; cat ./target/audit/licenses_py.txt) > ./variant/assets/manifest/THIRD-PARTY
    ''']
ignore_errors = true

[tasks.license_rs]
run_task = [
    { name = [
        "license_check_rs",
        "license_report_rs"
    ] }
]

[tasks.license_check_rs]
private = true
run_task = [
    { name = [
        "license_check_rs_macros",
        "license_check_rs_modules"
    ] }
]

[tasks.license_check_rs_macros]
private = true
run_task = [
    { name = [
        "license_check_list_rs_macros",
        "license_check_deny_rs_macros"
    ] }
]

[tasks.license_check_rs_modules]
private = true
run_task = [
    { name = [
        "license_check_list_rs_modules",
        "license_check_deny_rs_modules"
    ] }
]

[tasks.license_check_list_rs_macros]
private = true
command = "cargo"
args = ["license", "--manifest-path", "${PROJECT_MACROS_CARGO_TOML}", "--all-features"]

[tasks.license_check_deny_rs_macros]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error cargo deny --log-level error --workspace --all-features --manifest-path ${PROJECT_MACROS_CARGO_TOML} check --config ${DENY_TOML} --hide-inclusion-graph license
        else
            exec --fail-on-error cargo +${td-toolchain} deny --log-level error --workspace --all-features --manifest-path ${PROJECT_MACROS_CARGO_TOML} check --config ${DENY_TOML} --hide-inclusion-graph license
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error cargo deny --target ${td-target} --log-level error --workspace --all-features --manifest-path ${PROJECT_MACROS_CARGO_TOML} check --config ${DENY_TOML} --hide-inclusion-graph license
        else
            exec --fail-on-error cargo +${td-toolchain} deny --target ${td-target} --log-level error --workspace --all-features --manifest-path ${PROJECT_MACROS_CARGO_TOML} check --config ${DENY_TOML} --hide-inclusion-graph license
        end
    end
    ''']

[tasks.license_check_list_rs_modules]
private = true
command = "cargo"
args = ["license", "--manifest-path", "${PROJECT_ROOT_CARGO_TOML}", "--all-features"]

[tasks.license_check_deny_rs_modules]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error cargo deny --log-level error --workspace --all-features --manifest-path ${PROJECT_ROOT_CARGO_TOML} check --config ${DENY_TOML} --hide-inclusion-graph license
        else
            exec --fail-on-error cargo +${td-toolchain} deny --log-level error --workspace --all-features --manifest-path ${PROJECT_ROOT_CARGO_TOML} check --config ${DENY_TOML} --hide-inclusion-graph license
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error cargo deny --target ${td-target} --log-level error --workspace --all-features --manifest-path ${PROJECT_ROOT_CARGO_TOML} check --config ${DENY_TOML} --hide-inclusion-graph license
        else
            exec --fail-on-error cargo +${td-toolchain} deny --target ${td-target} --log-level error --workspace --all-features --manifest-path ${PROJECT_ROOT_CARGO_TOML} check --config ${DENY_TOML} --hide-inclusion-graph license
        end
    end
    ''']

[tasks.license_report_rs]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script = { file = "${PROJECT_ROOT_FOLDER}/devutils/automation/tasks/makers/td-scripts/report_licenses_rs.sh", absolute_path = true }
ignore_errors = true

[tasks.license_py]
run_task = [
    { name = [
        "license_check_py",
        "license_report_py"
    ] }
]

[tasks.license_report_py]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script = { file = "${PROJECT_ROOT_FOLDER}/devutils/automation/tasks/makers/td-scripts/report_licenses_py.sh", absolute_path = true }
ignore_errors = true

[tasks.license_check_py]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script = [
    '''
    liccheck -s ./.cargo/liccheck.cfg -r requirements.txt
    licensecheck -u requirements:requirements.txt
    ''']

[tasks.upgrade]
run_task = [
    { name = [
        "upgrade_rs",
        "upgrade_py"
    ] }
]

[tasks.upgrade_rs]
run_task = [
    { name = [
        "upgrade_rs_macros",
        "upgrade_rs_modules"
    ] }
]

[tasks.upgrade_py]

[tasks.upgrade_rs_macros]
private = true
command = "cargo"
args = ["upgrade", "--dry-run", "--verbose", "--manifest-path", "${PROJECT_MACROS_CARGO_TOML}"]

[tasks.upgrade_rs_modules]
private = true
command = "cargo"
args = ["upgrade", "--dry-run", "--verbose", "--manifest-path", "${PROJECT_ROOT_CARGO_TOML}"]

[tasks.deny]
    run_task = [
    { name = [
        "deny_rs",
        "deny_py"
    ] }
]

[tasks.deny_rs]
run_task = [
    { name = [
        "deny_rs_macros",
        "deny_rs_modules"
    ] }
]

[tasks.deny_py]

[tasks.deny_rs_macros]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error cargo deny --log-level error --workspace --all-features --manifest-path ${PROJECT_MACROS_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
        else
            exec --fail-on-error cargo +${td-toolchain} deny --log-level error --workspace --all-features --manifest-path ${PROJECT_MACROS_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error cargo deny --target ${td-target} --log-level error --workspace --all-features --manifest-path ${PROJECT_MACROS_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
        else
            exec --fail-on-error cargo +${td-toolchain} deny --target ${td-target} --log-level error --workspace --all-features --manifest-path ${PROJECT_MACROS_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
        end
    end
    ''']

[tasks.deny_rs_modules]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error cargo deny --log-level error --workspace --all-features --manifest-path ${PROJECT_ROOT_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
        else
            exec --fail-on-error cargo +${td-toolchain} deny --log-level error --workspace --all-features --manifest-path ${PROJECT_ROOT_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error cargo deny --target ${td-target} --log-level error --workspace --all-features --manifest-path ${PROJECT_ROOT_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
        else
            exec --fail-on-error cargo +${td-toolchain} deny --target ${td-target} --log-level error --workspace --all-features --manifest-path ${PROJECT_ROOT_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
        end
    end
    ''']

[tasks.audit]
run_task = [
    { name = [
        "audit_rs",
        "audit_py"
    ] }
]

[tasks.audit_rs]
run_task = [
    { name = [
        "audit_rs_macros",
        "audit_rs_modules"
    ] }
]

[tasks.audit_py]

[tasks.audit_rs_macros]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
command = "cargo"
args = ["audit", "--file", "${AUDIT_TOML}"]

[tasks.audit_rs_modules]
private = true
cwd = "${ROOT_PROJECT_FOLDER}"
command = "cargo"
args = ["audit", "--file", "${AUDIT_TOML}"]

[tasks.pants]
run_task = [
    { name = [
        "pants_rs",
        "pants_py"
    ] }
]

[tasks.pants_rs]
run_task = [
    { name = [
        "pants_rs_macros",
        "pants_rs_modules"
    ] }
]

[tasks.pants_py]

[tasks.pants_rs_macros]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
command = "cargo"
args = ["pants", "--ignore-file", "${PANTS_JSON}", "--tomlfile", "${PROJECT_MACROS_CARGO_TOML}"]

[tasks.pants_rs_modules]
private = true
cwd = "${ROOT_PROJECT_FOLDER}"
command = "cargo"
args = ["pants", "--ignore-file", "${PANTS_JSON}", "--tomlfile", "${PROJECT_ROOT_CARGO_TOML}"]

[tasks.machete]
run_task = [
    { name = [
        "machete_rs",
        "machete_py"
    ] }
]

[tasks.machete_rs]
command = "cargo"
args = ["machete", "--with-metadata"]

[tasks.machete_py]

[tasks.clippy]
run_task = [
    { name = [
        "clippy_rs",
        "clippy_py"
    ] }
]

[tasks.clippy_rs]
run_task = [
    { name = [
        "clippy_rs_macros",
        "clippy_rs_modules"
    ] }
]

[tasks.clippy_py]

[tasks.clippy_rs_macros]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clippy --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_MACROS_CARGO_TOML} -- -D warnings
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clippy --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_MACROS_CARGO_TOML} -- -D warnings
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clippy --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_MACROS_CARGO_TOML} -- -D warnings
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clippy --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_MACROS_CARGO_TOML} -- -D warnings
        end
    end
    ''']

[tasks.clippy_rs_modules]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clippy --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_ROOT_CARGO_TOML} -- -D warnings
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clippy --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_ROOT_CARGO_TOML} -- -D warnings
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clippy --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_ROOT_CARGO_TOML} -- -D warnings
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clippy --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_ROOT_CARGO_TOML} -- -D warnings
        end
    end
    ''']

[tasks.doc]
run_task = [
    { name = [
        "doc_rs",
        "doc_py"
    ] }
]

[tasks.doc_rs]
run_task = [
    { name = [
        "doc_rs_macros",
        "doc_rs_modules"
    ] }
]

[tasks.doc_py]
cwd = "${PROJECT_TD_SDK_ROOT}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: {ENV_PREFIX}mkdocs build"
    exec --fail-on-error ${ENV_PREFIX}mkdocs build
    ''']

[tasks.doc_rs_macros]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} doc --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_MACROS_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} doc --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_MACROS_CARGO_TOML}
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} doc --target ${td-target} --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_MACROS_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} doc --target ${td-target} --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_MACROS_CARGO_TOML}
        end
    end
    ''']

[tasks.doc_rs_modules]
private = true
cwd = "${PROJECT_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} doc --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_ROOT_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} doc --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_ROOT_CARGO_TOML}
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} doc --target ${td-target} --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_ROOT_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} doc --target ${td-target} --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_ROOT_CARGO_TOML}
        end
    end
    ''']

[tasks.chrome]
run_task = [
    { name = [
        "chrome_rs",
        "chrome_py"
    ] }
]

[tasks.chrome_rs]
script = "open -b com.google.Chrome ${RUST_DOCS}"

[tasks.chrome_py]
cwd = "${PROJECT_TD_SDK_ROOT}"
script = "open -b com.google.Chrome ${PYTHON_DOCS}"

[tasks.opendoc]
run_task = [
    { name = [
        "opendoc_rs",
        "opendoc_py"
    ] }
]

[tasks.opendoc_rs]
script = "open ${RUST_DOCS}"

[tasks.opendoc_py]
cwd = "${PROJECT_TD_SDK_ROOT}"
script = "open ${PYTHON_DOCS}"

[tasks.examples]
command = "pwsh"
args = ["${PROJECT_TD_SDK_ROOT}examples/persons/persons.ps1", "${td-profile}"]

[tasks.package]
run_task = [
    { name = [
        "package_rs",
        "package_py",
    ] }
]

[tasks.package_rs]

[tasks.package_py]
cwd = "${ROOT_PROJECT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: python3 setup.py sdist --dist-dir target/python/dist --formats=tar bdist_wheel --dist-dir target/python/dist --compression stored"
    exec --fail-on-error python3 setup.py sdist --dist-dir target/python/dist --formats=tar bdist_wheel --dist-dir target/python/dist --compression stored
    ''']

[tasks.assembly]
run_task = [
    { name = [
        "assembly_rs",
        "assembly_py",
    ] }
]

[tasks.assembly_rs]

[tasks.assembly_py]
cwd = "${ROOT_PROJECT_FOLDER}"
dependencies = ["license", "copy_assets"]
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: python3 setup.py sdist --dist-dir target/python/dist bdist_wheel --dist-dir target/python/dist"
    exec --fail-on-error python3 setup.py sdist --dist-dir target/python/dist bdist_wheel --dist-dir target/python/dist
    ''']

[tasks.install]
dependencies = ["assembly"]
run_task = [
    { name = [
        "install_rs",
        "install_py",
    ] }
]

[tasks.install_rs]

[tasks.install_py]
cwd = "${ROOT_PROJECT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    exec --fail-on-error pip3 uninstall tabsdata --yes
    wheels = glob_array ./target/python/dist/tabsdata*.whl
    for wheel in ${wheels}
        echo "Running command: pip3 install ${wheel}"
        exec --fail-on-error pip3 install ${wheel}
    end
    ''']

[tasks.uninstall]
run_task = [
    { name = [
        "uninstall_rs",
        "uninstall_py",
    ] }
]

[tasks.uninstall_rs]

[tasks.uninstall_py]
cwd = "${ROOT_PROJECT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    exec --fail-on-error pip3 uninstall tabsdata --yes
    exec uv cache clean
    exec python setup.py clean --all
    rm -r ${ROOT_PROJECT_FOLDER}/target/python/
    ''']

[tasks.deploy]
dependencies = ["build", "assembly", "install"]

[tasks.virtualenv]
cwd = "${ROOT_PROJECT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    exec --fail-on-error rm -rf .venv
    exec --fail-on-error python3 -m venv .venv
    exec --fail-on-error ${VIRTUAL_PIP} install -U pip
    exec --fail-on-error ${VIRTUAL_PIP} install -e .[test]

    echo "Virtual environment created. Use 'source ${VIRTUAL_ACTIVATE}' to activate it"
    ''']