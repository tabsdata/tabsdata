#
# Copyright 2024 Tabs Data Inc.
#

name: Setup
description: Sets up the environment for integration and release builds

inputs:
  working-directory:
    description: Working directory
    required: false
    default: .
  shell:
    description: Commands shell
    required: false
    default: bash
  rust-channel:
    description: Rust channel
    required: true
  rust-target:
    description: Rust target
    required: true
  rust-toolchain:
    description: Rust toolchain
    required: true
  td-channel:
    description: Tabsdata channel
    required: true
  td-target:
    description: Tabsdata target
    required: true
  td-toolchain:
    description: Tabsdata toolchain
    required: true
  td-cross:
    description: Run cross build
    required: true

defaults:
  run:
    shell: bash
    working-directory: .

runs:
  using: "composite"

  steps:
    - name: Get runner info
      id: get-runner-info
      uses: kenchan0130/actions-system-info@master

    - name: Show runner info
      id: show-runner-info
      shell: ${{ inputs.shell }}
      run: |
        echo "Logical CPU core size.................: ${{ steps.get-runner-info.outputs.cpu-core }}"
        echo "Logical CPU model name................: ${{ steps.get-runner-info.outputs.cpu-model }}"
        echo "Host name of the operating system.....: ${{ steps.get-runner-info.outputs.hostname }}"
        echo "Kernel release........................: ${{ steps.get-runner-info.outputs.kernel-release }}"
        echo "Kernel version........................: ${{ steps.get-runner-info.outputs.kernel-version }}"
        echo "Operating system distribution name....: ${{ steps.get-runner-info.outputs.name }}"
        echo "Operating system identity.............: ${{ steps.get-runner-info.outputs.platform }}"
        echo "Operating system distribution release.: ${{ steps.get-runner-info.outputs.release }}"
        echo "Total amount of system memory in bytes: ${{ steps.get-runner-info.outputs.totalmem }}"
      working-directory: ${{ inputs.working-directory }}

    - name: Show disk space (linux)
      id: show-disk-space-linux
      if: runner.os == 'Linux'
      shell: ${{ inputs.shell }}
      run: df -h
      working-directory: ${{ inputs.working-directory }}

    - name: Show disk space (macos)
      id: show-disk-space-macos
      if: runner.os == 'macOS'
      shell: ${{ inputs.shell }}
      run: df -h
      working-directory: ${{ inputs.working-directory }}

    - name: Show disk space (windows)
      id: show-disk-space-windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Get-PSDrive -PSProvider FileSystem | ForEach-Object {
          # Ensure the drive has valid Used and Free properties and avoid division by zero
          if ($_.Used -ne $null -and $_.Free -ne $null -and ($_.Used + $_.Free) -gt 0) {
            [PSCustomObject]@{
              Name            = $_.Name
              Used            = "{0:N2} GB" -f ($_.Used / 1GB)
              Free            = "{0:N2} GB" -f ($_.Free / 1GB)
              UsedPercentage  = "{0:N2} %" -f ($_.Used / ($_.Used + $_.Free) * 100)
            }
          }
        } | Format-Table -AutoSize
      working-directory: ${{ inputs.working-directory }}

    - name: Update system packages (linux)
      id: update-system-packages-linux
      if: runner.os == 'Linux'
      shell: ${{ inputs.shell }}
      run: sudo apt-get update -y
      working-directory: ${{ inputs.working-directory }}

    - name: Update system packages (macos)
      id: update-system-packages-macos
      if: runner.os == 'macOS'
      shell: ${{ inputs.shell }}
      run: echo "No system package to update..."
      working-directory: ${{ inputs.working-directory }}

    - name: Update system packages (windows)
      id: update-system-packages-windows
      if: runner.os == 'Windows'
      shell: ${{ inputs.shell }}
      run: echo "No system package to update..."
      working-directory: ${{ inputs.working-directory }}

    - name: Install cross platform tools tools (linux)
      id: install-cross-platform-tools-linux
      if: runner.os == 'Linux'
      shell: ${{ inputs.shell }}
      run: |
        sudo apt install musl-tools -y
        sudo apt install zlib1g-dev -y 
        sudo apt install libclang-dev -y
      working-directory: ${{ inputs.working-directory }}

    - name: Install cross platform tools tools (macos)
      id: install-cross-platform-tools-macos
      if: runner.os == 'macOS'
      shell: ${{ inputs.shell }}
      run: echo "No cross platform tool to install..."
      working-directory: ${{ inputs.working-directory }}

    - name: Install cross platform tools tools (windows)
      id: install-cross-platform-tools-windows
      if: runner.os == 'Windows'
      shell: ${{ inputs.shell }}
      run: echo "No cross platform tool to install..."
      working-directory: ${{ inputs.working-directory }}

    - name: Install rust
      id: install-rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ inputs.rust-channel }}
        target: ${{ inputs.rust-target }}
        profile: default
        override: true
        components: rustfmt, clippy

    - name: Setup rust channel
      id: setup-rust-channel
      shell: ${{ inputs.shell }}
      run: |
        rustup default ${{ inputs.rust-toolchain }}
        rustup show active-toolchain

    - name: Get rust version
      id: get-rust-version
      shell: ${{ inputs.shell }}
      run: |
        echo "rust_version=$(cargo --version | awk '{print $2}')" >> "$GITHUB_ENV"
        cargo --version
      working-directory: ${{ inputs.working-directory }}

    - name: Get rust targets
      id: get-rust-targets
      shell: ${{ inputs.shell }}
      run: rustup target list --installed
      working-directory: ${{ inputs.working-directory }}

    - name: List initial rust commands
      id: list-initial-rust-commands
      shell: ${{ inputs.shell }}
      run: cargo --list
      working-directory: ${{ inputs.working-directory }}

    - name: List initial rust crates
      id: list-initial-rust-crates
      shell: ${{ inputs.shell }}
      run: cargo install --list
      working-directory: ${{ inputs.working-directory }}

    - name: List initial cargo crates
      id: list-initial-cargo-crates
      shell: ${{ inputs.shell }}
      run: ls -lah ~/.cargo/bin/ || true
      working-directory: ${{ inputs.working-directory }}

    - name: List initial cargo-install crates
      id: list-initial-cargo-install-crates
      shell: ${{ inputs.shell }}
      run: ls -lah ~/.cargo-install/ || true
      working-directory: ${{ inputs.working-directory }}

    - name: Install rust crate cargo-audit
      id: install-rust-crate-cargo-audit
      uses: baptiste0928/cargo-install@v3
      with:
        crate: cargo-audit
        locked: false
        cache-key: ${{ env.rust_version }}-${{ env.rust_target }}

    - name: Install rust crate cross
      id: install-rust-crate-cross
      uses: baptiste0928/cargo-install@v3
      with:
        crate: cross
        locked: false
        cache-key: ${{ env.rust_version }}-${{ env.rust_target }}

    - name: Install rust crate cargo-deny
      id: install-rust-crate-cargo-deny
      uses: baptiste0928/cargo-install@v3
      with:
        crate: cargo-deny
        locked: false
        cache-key: ${{ env.rust_version }}-${{ env.rust_target }}

    - name: Install rust crate cargo-edit
      id: install-rust-crate-cargo-edit
      uses: baptiste0928/cargo-install@v3
      with:
        crate: cargo-edit
        locked: false
        cache-key: ${{ env.rust_version }}-${{ env.rust_target }}

    - name: Install rust crate cargo-license
      id: install-rust-crate-cargo-license
      uses: baptiste0928/cargo-install@v3
      with:
        crate: cargo-license
        locked: false
        cache-key: ${{ env.rust_version }}-${{ env.rust_target }}

    - name: Install rust crate cargo-machete
      id: install-rust-crate-cargo-machete
      uses: baptiste0928/cargo-install@v3
      with:
        crate: cargo-machete
        locked: false
        cache-key: ${{ env.rust_version }}-${{ env.rust_target }}

    - name: Install rust crate cargo-make
      id: install-rust-crate-cargo-make
      uses: baptiste0928/cargo-install@v3
      with:
        crate: cargo-make
        locked: false
        cache-key: ${{ env.rust_version }}-${{ env.rust_target }}

    - name: Install rust crate cargo-nextest
      id: install-rust-crate-cargo-nextest
      uses: baptiste0928/cargo-install@v3
      with:
        crate: cargo-nextest
        locked: false
        cache-key: ${{ env.rust_version }}-${{ env.rust_target }}

    - name: Install rust crate cargo-pants
      id: install-rust-crate-cargo-pants
      uses: baptiste0928/cargo-install@v3
      with:
        crate: cargo-pants
        locked: false
        cache-key: ${{ env.rust_version }}-${{ env.rust_target }}

    - name: List final rust commands
      id: list-final-rust-commands
      shell: ${{ inputs.shell }}
      run: cargo --list
      working-directory: ${{ inputs.working-directory }}

    - name: List final rust crates
      id: list-final-rust-crates
      shell: ${{ inputs.shell }}
      run: cargo install --list
      working-directory: ${{ inputs.working-directory }}

    - name: List final cargo crates
      id: list-final-cargo-crates
      shell: ${{ inputs.shell }}
      run: ls -lah ~/.cargo/bin/ || true
      working-directory: ${{ inputs.working-directory }}

    - name: List final cargo-install crates
      id: list-final-cargo-install-crates
      shell: ${{ inputs.shell }}
      run: ls -lah ~/.cargo-install/ || true
      working-directory: ${{ inputs.working-directory }}

    - name: Install graphviz (linux)
      id: install-graphviz-linux
      if: runner.os == 'Linux'
      shell: ${{ inputs.shell }}
      run: sudo apt-get install graphviz -y
      working-directory: ${{ inputs.working-directory }}

    - name: Install graphviz (macos)
      id: install-graphviz-macos
      if: runner.os == 'macOS'
      shell: ${{ inputs.shell }}
      run: brew install graphviz
      working-directory: ${{ inputs.working-directory }}

    - name: Install graphviz (windows)
      id: install-graphviz-windows
      if: runner.os == 'Windows'
      shell: ${{ inputs.shell }}
      run: choco install graphviz -y
      working-directory: ${{ inputs.working-directory }}

    - name: Install jq (linux)
      id: install-jq-linux
      if: runner.os == 'Linux'
      shell: ${{ inputs.shell }}
      run: sudo apt-get install jq -y
      working-directory: ${{ inputs.working-directory }}

    - name: Install jq (macos)
      id: install-jq-macos
      if: runner.os == 'macOS'
      shell: ${{ inputs.shell }}
      run: brew install jq
      working-directory: ${{ inputs.working-directory }}

    - name: Install jq (windows)
      id: install-jq-windows
      if: runner.os == 'Windows'
      shell: ${{ inputs.shell }}
      run: choco install jq -y
      working-directory: ${{ inputs.working-directory }}

    - name: Install python dependencies - sqlite (linux)
      id: install-python-dependencies-sqlite-linux
      if: runner.os == 'Linux'
      shell: ${{ inputs.shell }}
      run: sudo apt-get install libsqlite3-dev -y
      working-directory: ${{ inputs.working-directory }}

    - name: Install python dependencies - sqlite (macos)
      id: install-python-dependencies-sqlite-macos
      if: runner.os == 'macOS'
      shell: ${{ inputs.shell }}
      run: brew install sqlite3
      working-directory: ${{ inputs.working-directory }}

    - name: Install python dependencies - sqlite (windows)
      id: install-python-dependencies-sqlite-windows
      if: runner.os == 'Windows'
      shell: ${{ inputs.shell }}
      run: choco install sqlite -y
      working-directory: ${{ inputs.working-directory }}

    - name: Install python dependencies - oracle (linux)
      id: install-python-dependencies-oracle-linux
      if: runner.os == 'Linux'
      shell: ${{ inputs.shell }}
      run: echo "Work in progress..."
      working-directory: ${{ inputs.working-directory }}

    - name: Install python dependencies - oracle (macos)
      id: install-python-dependencies-oracle-macos
      if: runner.os == 'macOS'
      shell: ${{ inputs.shell }}
      run: echo "Work in progress..."
      working-directory: ${{ inputs.working-directory }}

    - name: Install python dependencies - oracle (windows)
      id: install-python-dependencies-oracle-windows
      if: runner.os == 'Windows'
      shell: ${{ inputs.shell }}
      run: echo "Work in progress..."
      working-directory: ${{ inputs.working-directory }}

    - name: Install python
      id: install-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.python-version }}

    - name: Get python version
      id: get-python-version
      shell: ${{ inputs.shell }}
      run: |
        echo "python_version=$(python --version | awk '{print $2}')" >> "$GITHUB_ENV"
        python --version
      working-directory: ${{ inputs.working-directory }}

    - name: List initial python packages
      id: list-initial-python-packages
      shell: ${{ inputs.shell }}
      run: pip list
      working-directory: ${{ inputs.working-directory }}

    - name: Install pyenv (linux)
      id: install-pyenv-linux
      if: runner.os == 'Linux'
      shell: ${{ inputs.shell }}
      run: |
        curl https://pyenv.run | bash
        echo "PYENV_ROOT=$HOME/.pyenv" >> "$GITHUB_ENV"
      working-directory: ${{ inputs.working-directory }}

    - name: Install pyenv (macos)
      id: install-pyenv-macos
      if: runner.os == 'macOS'
      shell: ${{ inputs.shell }}
      run: |
        curl https://pyenv.run | bash
        echo "PYENV_ROOT=$HOME/.pyenv" >> "$GITHUB_ENV"
      working-directory: ${{ inputs.working-directory }}

    - name: Install pyenv (windows)
      id: install-pyenv-windows
      if: runner.os == 'Windows'
      shell: bash
      run: pip install pyenv-win --target $HOME\\.pyenv
      working-directory: ${{ inputs.working-directory }}

    - name: Configure pyenv (linux)
      id: configure-pyenv-linux
      if: runner.os == 'Linux'
      shell: ${{ inputs.shell }}
      run: |
        echo "$PYENV_ROOT/bin" >> "$GITHUB_PATH"
        echo "$PYENV_ROOT/shims" >> "$GITHUB_PATH"
      working-directory: ${{ inputs.working-directory }}

    - name: Configure pyenv (macos)
      id: configure-pyenv-macos
      if: runner.os == 'macOS'
      shell: ${{ inputs.shell }}
      run: |
        echo "$PYENV_ROOT/bin" >> "$GITHUB_PATH"
        echo "$PYENV_ROOT/shims" >> "$GITHUB_PATH"
      working-directory: ${{ inputs.working-directory }}

    - name: Configure pyenv (windows)
      id: configure-pyenv-windows
      if: runner.os == 'Windows'
      shell: bash
      run: |
        echo "PYENV=$USERPROFILE\.pyenv\pyenv-win\\" >> $GITHUB_ENV
        echo "PYENV_ROOT=$USERPROFILE\.pyenv\pyenv-win\\" >> $GITHUB_ENV
        echo "PYENV_HOME=$USERPROFILE\.pyenv\pyenv-win\\" >> $GITHUB_ENV
        echo "$USERPROFILE\.pyenv\pyenv-win\\bin\\" >> $GITHUB_PATH

    - name: Get pyenv version
      id: get-pyenv-version
      shell: ${{ inputs.shell }}
      run: |
        echo "pyenv_version=$(pyenv --version | awk '{print $2}')" >> "$GITHUB_ENV"
        pyenv --version
      working-directory: ${{ inputs.working-directory }}

    - name: Install virtualenv
      id: install-virtualenv
      shell: bash
      run: pip install virtualenv

    - name: Update pip
      id: update-pip
      shell: ${{ inputs.shell }}
      run: python -m pip install --upgrade pip
      working-directory: ${{ inputs.working-directory }}

    - name: Get pip version
      id: get-pip-version
      shell: ${{ inputs.shell }}
      run: |
        echo "pip_version=$(pip --version | awk '{print $2}')" >> "$GITHUB_ENV"
        pip --version
      working-directory: ${{ inputs.working-directory }}

    - name: Install python package - uv
      id: install-python-package-uv
      shell: ${{ inputs.shell }}
      run: |
        python -m pip install --upgrade pip
        pip install uv
      working-directory: ${{ inputs.working-directory }}

    - name: Install python packages - integration (non windows)
      id: install-python-packages-integration-non-windows
      if: runner.os != 'Windows'
      shell: ${{ inputs.shell }}
      run: |
        python -m pip install --upgrade pip
        uv pip install --python $(which python) -r ./.github/dependencies/ci-requirements.txt
      working-directory: ${{ inputs.working-directory }}

    - name: Install python packages - integration (windows)
      id: install-python-packages-integration-windows
      if: runner.os == 'Windows'
      shell: ${{ inputs.shell }}
      run: |
        python -m pip install --upgrade pip
        pip install -r ./.github/dependencies/ci-requirements.txt
      working-directory: ${{ inputs.working-directory }}

    - name: Install python packages - development (non windows)
      id: install-python-packages-development-non-windows
      if: runner.os != 'Windows'
      shell: ${{ inputs.shell }}
      run: |
        python -m pip install --upgrade pip
        uv pip install --python $(which python) -r ./requirements-dev.txt
      working-directory: ${{ inputs.working-directory }}

    - name: Install python packages - development (windows)
      id: install-python-packages-development-windows
      if: runner.os == 'Windows'
      shell: ${{ inputs.shell }}
      run: |
        python -m pip install --upgrade pip
        pip install -r ./requirements-dev.txt
      working-directory: ${{ inputs.working-directory }}

    - name: Install python packages - product (non windows)
      id: install-python-packages-product-non-windows
      if: runner.os != 'Windows'
      shell: ${{ inputs.shell }}
      run: |
        python -m pip install --upgrade pip
        uv pip install --python $(which python) -r ./requirements.txt
      working-directory: ${{ inputs.working-directory }}

    - name: Install python packages - product (windows)
      id: install-python-packages-product-windows
      if: runner.os == 'Windows'
      shell: ${{ inputs.shell }}
      run: |
        python -m pip install --upgrade pip
        pip install -r ./requirements.txt
      working-directory: ${{ inputs.working-directory }}

    - name: List final python packages
      id: list-final-python-packages
      shell: ${{ inputs.shell }}
      run: pip list
      working-directory: ${{ inputs.working-directory }}

    - name: Get host identification
      id: get-host-identification
      shell: ${{ inputs.shell }}
      run: python ./devutils/automation/tasks/github/td-scripts/get_host_info.py
      working-directory: ${{ inputs.working-directory }}

    - name: Activate rust cache
      id: activate-rust-cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: |
          . -> target
          macros -> target