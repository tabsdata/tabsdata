#
# Copyright 2025 Tabs Data Inc.
#

name: Integration Workflow (Standard)

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ github.event_name == 'schedule' && 'weekly' || (inputs.runner_action == 'build' && 'build' || format('run-{0}', github.run_id))}}
  cancel-in-progress: true

defaults:
  run:
    shell: bash
    working-directory: .

run-name: >
  ${{ github.event_name == 'workflow_dispatch' && format('Integration Workflow (Standard) - ({0})', inputs.runner_action) || github.event_name == 'schedule' && 'Integration Workflow (Standard) - (Weekly)' || '' }}

on:
  pull_request:
  workflow_dispatch:
    inputs:
      job_timeout:
        description: "Minutes before job cancellation"
        required: true
        type: number
        default: 180
      dump_server:
        description: "Dump all instances contents"
        required: false
        type: choice
        options: ['true', 'false']
        default: 'false'
      runner_action:
        description: "Action"
        required: true
        type: choice
        options: ['build', 'lock', 'wheels4whl', 'wheels4repo']
        default: 'build'
      run_on_linux_x86_64:
        description: "Run on Ubuntu (x86_64)"
        required: false
        type: choice
        options: ['true', 'false']
        default: 'true'
      run_on_linux_arm_64:
        description: "Run on Ubuntu (arm_64)"
        required: false
        type: choice
        options: ['true', 'false']
        default: 'false'
      run_on_macos_x86_64:
        description: "Run on macOS (x86_64)"
        required: false
        type: choice
        options: ['true', 'false']
        default: 'false'
      run_on_macos_arm_64:
        description: "Run on macOS (arm_64)"
        required: false
        type: choice
        options: ['true', 'false']
        default: 'false'
      run_on_windows_x86_64:
        description: "Run on Windows (x86_64)"
        required: false
        type: choice
        options: ['true', 'false']
        default: 'false'
      run_on_windows_arm_64:
        description: "Run on Windows (arm_64)"
        required: false
        type: choice
        options: ['true', 'false']
        default: 'false'

jobs:
  cap-job:
    name: Cap Job
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      job_timeout: ${{ steps.set-timeout.outputs.job_timeout }}

    steps:
      - name: Set Timeout
        id: set-timeout
        run: echo "job_timeout=${{ inputs.job_timeout || 180 }}" >> $GITHUB_OUTPUT

  permit-job:
    name: Permit Job
    permissions: write-all
    needs:
      - cap-job
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    outputs:
      permit_workflow: ${{ steps.check-label.outputs.permit_workflow }}
    timeout-minutes: ${{ fromJson(needs.cap-job.outputs.job_timeout) }}

    steps:
      - name: Check label
        id: check-label
        run: |
          PR_LABEL_LIST='${{ toJson(github.event.pull_request.labels.*.name) }}'
          echo "Pull rquest labels: ${PR_LABEL_LIST}"      

          if echo "${PR_LABEL_LIST}" | jq -e '.[] | select(. == "skip-ci")' > /dev/null; then
            echo "⚠️ Not ready. ☹️ PR contains label 'skip-ci'. Skipping workflow."
            echo "permit_workflow=false" >> $GITHUB_ENV          
            echo "permit_workflow=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Ready. 🙂 PR does not contain label 'skip-ci'. Running workflow."
            echo "permit_workflow=true" >> $GITHUB_ENV
            echo "permit_workflow=true" >> $GITHUB_OUTPUT
          fi

      - name: Mark pull request
        id: mark-pull-request
        if: ${{ github.event_name == 'pull_request' && steps.check-label.outputs.permit_workflow == 'false' }}
        uses: LouisBrunner/checks-action@v2.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "😶 Skipped"
          conclusion: "skipped"
          output: |
            {"title": "⚠️ Run Skipped", "summary": "Run skipped as it is labelled as 'skip-ci'."}

  describe-job:
    name: Describe Job
    permissions: write-all
    needs:
      - cap-job
      - permit-job
    if: ${{ needs.permit-job.outputs.permit_workflow == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    outputs:
      runner_action: ${{ steps.set-outputs.outputs.runner_action }}
      run_on_linux_x86_64: ${{ steps.set-outputs.outputs.run_on_linux_x86_64 }}
      run_on_linux_arm_64: ${{ steps.set-outputs.outputs.run_on_linux_arm_64 }}
      run_on_macos_x86_64: ${{ steps.set-outputs.outputs.run_on_macos_x86_64 }}
      run_on_macos_arm_64: ${{ steps.set-outputs.outputs.run_on_macos_arm_64 }}
      run_on_windows_x86_64: ${{ steps.set-outputs.outputs.run_on_windows_x86_64 }}
      run_on_windows_arm_64: ${{ steps.set-outputs.outputs.run_on_windows_arm_64 }}
    timeout-minutes: ${{ fromJson(needs.cap-job.outputs.job_timeout) }}

    steps:
      - name: Show Inputs
        id: show-inputs
        run: |
          echo "Workflow Inputs:"
          echo "${{ toJSON(github.event.inputs) }}"    

      - name: Set Inputs
        id: set-outputs
        run: |
          normalize_boolean() {
            local input_value=$(echo "$1" | tr '[:upper:]' '[:lower:]')
            case "$input_value" in
              "true" | "yes" | "1") echo "true" ;;
              "false" | "not" | "0") echo "false" ;;
              *) echo "$2" ;; # Default value if invalid
            esac
          }

          expr_run_on_linux_x86_64="$(normalize_boolean "${{ github.event.inputs.run_on_linux_x86_64 }}" "false")"
          echo "run_on_linux_x86_64=$expr_run_on_linux_x86_64" >> $GITHUB_ENV
          echo "run_on_linux_x86_64=$expr_run_on_linux_x86_64" >> $GITHUB_OUTPUT

          expr_run_on_linux_arm_64="$(normalize_boolean "${{ github.event.inputs.run_on_linux_arm_64 }}" "false")"
          echo "run_on_linux_arm_64=$expr_run_on_linux_arm_64" >> $GITHUB_ENV
          echo "run_on_linux_arm_64=$expr_run_on_linux_arm_64" >> $GITHUB_OUTPUT

          expr_run_on_macos_x86_64="$(normalize_boolean "${{ github.event.inputs.run_on_macos_x86_64 }}" "false")"
          echo "run_on_macos_x86_64=$expr_run_on_macos_x86_64" >> $GITHUB_ENV
          echo "run_on_macos_x86_64=$expr_run_on_macos_x86_64" >> $GITHUB_OUTPUT

          expr_run_on_macos_arm_64="$(normalize_boolean "${{ github.event.inputs.run_on_macos_arm_64 }}" "false")"
          echo "run_on_macos_arm_64=$expr_run_on_macos_arm_64" >> $GITHUB_ENV
          echo "run_on_macos_arm_64=$expr_run_on_macos_arm_64" >> $GITHUB_OUTPUT

          expr_run_on_windows_x86_64="$(normalize_boolean "${{ github.event.inputs.run_on_windows_x86_64 }}" "false")"
          echo "run_on_windows_x86_64=$expr_run_on_windows_x86_64" >> $GITHUB_ENV
          echo "run_on_windows_x86_64=$expr_run_on_windows_x86_64" >> $GITHUB_OUTPUT

          expr_run_on_windows_arm_64="$(normalize_boolean "${{ github.event.inputs.run_on_windows_arm_64 }}" "false")"
          echo "run_on_windows_arm_64=$expr_run_on_windows_arm_64" >> $GITHUB_ENV
          echo "run_on_windows_arm_64=$expr_run_on_windows_arm_64" >> $GITHUB_OUTPUT   

      - name: Show Outputs
        id: show-outputs
        run: |
          echo "Workflow Outputs:"
          echo "- runner_action: ${{ steps.set-outputs.outputs.runner_action }}"
          echo "- run_on_linux_x86_64: ${{ steps.set-outputs.outputs.run_on_linux_x86_64 }}"
          echo "- run_on_linux_arm_64: ${{ steps.set-outputs.outputs.run_on_linux_arm_64 }}"
          echo "- run_on_macos_x86_64: ${{ steps.set-outputs.outputs.run_on_macos_x86_64 }}"
          echo "- run_on_macos_arm_64: ${{ steps.set-outputs.outputs.run_on_macos_arm_64 }}"
          echo "- run_on_windows_x86_64: ${{ steps.set-outputs.outputs.run_on_windows_x86_64 }}"
          echo "- run_on_windows_arm_64: ${{ steps.set-outputs.outputs.run_on_windows_arm_64 }}"

  dispatch-job:
    name: Dispatch Job
    permissions: write-all
    needs:
      - cap-job
      - permit-job
      - describe-job
    if: ${{ needs.permit-job.outputs.permit_workflow == 'true' }}
    uses: tabsdata/tabsdata-ci/.github/workflows/make.yml@main
    secrets:
      PAT_AOINOKIMI: ${{ secrets.PAT_AOINOKIMI }}
      S30__S3_ACCESS_KEY: ${{ secrets.S30__S3_ACCESS_KEY }}
      S30__S3_SECRET_KEY: ${{ secrets.S30__S3_SECRET_KEY }}
      S30__S3_REGION: ${{ secrets.S30__S3_REGION }}
      S30__S3_URI: ${{ secrets.S30__S3_URI }}
      COPY_AWS_AWS_ACCESS_KEY_ID: ${{ secrets.COPY_AWS_AWS_ACCESS_KEY_ID }}
      COPY_AWS_AWS_REGION: ${{ secrets.COPY_AWS_AWS_REGION }}
      COPY_AWS_AWS_SECRET_ACCESS_KEY: ${{ secrets.COPY_AWS_AWS_SECRET_ACCESS_KEY }}
      COPY_AWS_BASE_URL: ${{ secrets.COPY_AWS_BASE_URL }}
      IMPORT_AWS_ACCESS_KEY: ${{ secrets.IMPORT_AWS_ACCESS_KEY }}
      IMPORT_AWS_REGION: ${{ secrets.IMPORT_AWS_REGION }}
      IMPORT_AWS_SECRET_KEY: ${{ secrets.IMPORT_AWS_SECRET_KEY }}
      IMPORT_AWS_BASE_URL: ${{ secrets.IMPORT_AWS_BASE_URL }}
      TRANSPORTER_AWS_ACCESS_KEY_ID: ${{ secrets.TRANSPORTER_AWS_ACCESS_KEY_ID }}
      TRANSPORTER_AWS_REGION: ${{ secrets.TRANSPORTER_AWS_REGION }}
      TRANSPORTER_AWS_SECRET_ACCESS_KEY: ${{ secrets.TRANSPORTER_AWS_SECRET_ACCESS_KEY }}
      TRANSPORTER_AWS_URI: ${{ secrets.TRANSPORTER_AWS_URI }}
      AZ0__AZ_ACCOUNT_KEY: ${{ secrets.AZ0__AZ_ACCOUNT_KEY }}
      AZ0__AZ_ACCOUNT_NAME: ${{ secrets.AZ0__AZ_ACCOUNT_NAME }}
      AZ0__AZ_URI: ${{ secrets.AZ0__AZ_URI }}
      COPY_AZURE_ACCOUNT_KEY: ${{ secrets.COPY_AZURE_ACCOUNT_KEY }}
      COPY_AZURE_ACCOUNT_NAME: ${{ secrets.COPY_AZURE_ACCOUNT_NAME }}
      COPY_AZURE_BASE_URL: ${{ secrets.COPY_AZURE_BASE_URL }}
      IMPORT_AZURE_ACCOUNT_KEY: ${{ secrets.IMPORT_AZURE_ACCOUNT_KEY }}
      IMPORT_AZURE_ACCOUNT_NAME: ${{ secrets.IMPORT_AZURE_ACCOUNT_NAME }}
      IMPORT_AZURE_BASE_URL: ${{ secrets.IMPORT_AZURE_BASE_URL }}
      TRANSPORTER_AZURE_ACCOUNT_KEY: ${{ secrets.TRANSPORTER_AZURE_ACCOUNT_KEY }}
      TRANSPORTER_AZURE_ACCOUNT_NAME: ${{ secrets.TRANSPORTER_AZURE_ACCOUNT_NAME }}
      GCP0__GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP0__GCP_SERVICE_ACCOUNT_KEY }}
      GCP0__GCP_STORAGE_URI: ${{ secrets.GCP0__GCP_STORAGE_URI }}
      TD_DATABRICKS_CATALOG: ${{ secrets.TD_DATABRICKS_CATALOG }}
      TD_DATABRICKS_HOST: ${{ secrets.TD_DATABRICKS_HOST }}
      TD_DATABRICKS_SCHEMA: ${{ secrets.TD_DATABRICKS_SCHEMA }}
      TD_DATABRICKS_TOKEN: ${{ secrets.TD_DATABRICKS_TOKEN }}
      TD_DATABRICKS_VOLUME: ${{ secrets.TD_DATABRICKS_VOLUME }}
      TD_DATABRICKS_WAREHOUSE_NAME: ${{ secrets.TD_DATABRICKS_WAREHOUSE_NAME }}
      TD_DATABRICKS_WAREHOUSE_ID: ${{ secrets.TD_DATABRICKS_WAREHOUSE_ID }}
      SALESFORCE_INSTANCE_URL: ${{ secrets.SALESFORCE_INSTANCE_URL }}
      SALESFORCE_PASSWORD: ${{ secrets.SALESFORCE_PASSWORD }}
      SALESFORCE_SECURITY_TOKEN: ${{ secrets.SALESFORCE_SECURITY_TOKEN }}
      SALESFORCE_USERNAME: ${{ secrets.SALESFORCE_USERNAME }}
      TD_SNOWFLAKE_ACCOUNT: ${{ secrets.TD_SNOWFLAKE_ACCOUNT }}
      TD_SNOWFLAKE_DATABASE: ${{ secrets.TD_SNOWFLAKE_DATABASE }}
      TD_SNOWFLAKE_PAT: ${{ secrets.TD_SNOWFLAKE_PAT }}
      TD_SNOWFLAKE_ROLE: ${{ secrets.TD_SNOWFLAKE_ROLE }}
      TD_SNOWFLAKE_SCHEMA: ${{ secrets.TD_SNOWFLAKE_SCHEMA }}
      TD_SNOWFLAKE_USER: ${{ secrets.TD_SNOWFLAKE_USER }}
      TD_SNOWFLAKE_WAREHOUSE: ${{ secrets.TD_SNOWFLAKE_WAREHOUSE }}
    with:
      job_timeout: ${{ fromJson(needs.cap-job.outputs.job_timeout) }}
      dump_server: ${{ inputs.dump_server }}
      td_product: "standard"
      runner_mode: "integration"
      runner_action: ${{ inputs.runner_action || 'build' }}
      run_on_linux_x86_64: ${{ needs.describe-job.outputs.run_on_linux_x86_64 }}
      run_on_linux_arm_64: ${{ needs.describe-job.outputs.run_on_linux_arm_64 }}
      run_on_macos_x86_64: ${{ needs.describe-job.outputs.run_on_macos_x86_64 }}
      run_on_macos_arm_64: ${{ needs.describe-job.outputs.run_on_macos_arm_64 }}
      run_on_windows_x86_64: ${{ needs.describe-job.outputs.run_on_windows_x86_64 }}
      run_on_windows_arm_64: ${{ needs.describe-job.outputs.run_on_windows_arm_64 }}
