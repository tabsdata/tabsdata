#
# Copyright 2025 Tabs Data Inc.
#

name: Release Workflow (Standard)

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash
    working-directory: .

on:
  workflow_dispatch:
    inputs:
      job_timeout:
        description: "Minutes before job cancellation"
        required: true
        type: number
        default: 240
      dump_server:
        description: "Dump all instances contents"
        required: false
        type: choice
        options: [ 'true', 'false' ]
        default: 'false'
      runner_action:
        description: 'Action'
        required: true
        type: choice
        options: [ 'build', 'lock' ]
        default: 'build'
      run_on_linux_x86_64:
        description: "Run on Ubuntu (x86_64)"
        required: false
        type: choice
        options: [ 'true', 'false' ]
        default: 'true'
      run_on_linux_arm_64:
        description: "Run on Ubuntu (arm_64)"
        required: false
        type: choice
        options: [ 'true', 'false' ]
        default: 'false'
      run_on_macos_x86_64:
        description: "Run on macOS (x86_64)"
        required: false
        type: choice
        options: [ 'true', 'false' ]
        default: 'true'
      run_on_macos_arm_64:
        description: "Run on macOS (arm_64)"
        required: false
        type: choice
        options: [ 'true', 'false' ]
        default: 'true'
      run_on_windows_x86_64:
        description: "Run on Windows (x86_64)"
        required: false
        type: choice
        options: [ 'true', 'false' ]
        default: 'true'
      run_on_windows_arm_64:
        description: "Run on Windows (arm_64)"
        required: false
        type: choice
        options: [ 'true', 'false' ]
        default: 'false'

  schedule:
     # Run at 02:00 UTC (03:00 AM Spain time) Monday to Friday
    - cron: "0 2 * * 1-5"

jobs:
  cap-job:
    name: Cap Job
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      job_timeout: ${{ steps.set-timeout.outputs.job_timeout }}

    steps:
      - name: Set Timeout
        id: set-timeout
        run: echo "job_timeout=${{ inputs.job_timeout || 240 }}" >> $GITHUB_OUTPUT

  describe-job:
    name: Describe Job
    permissions: write-all
    needs:
      - cap-job
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    outputs:
      runner_action: ${{ steps.set-outputs.outputs.runner_action }}
      run_on_linux_x86_64: ${{ steps.set-outputs.outputs.run_on_linux_x86_64 }}
      run_on_linux_arm_64: ${{ steps.set-outputs.outputs.run_on_linux_arm_64 }}
      run_on_macos_x86_64: ${{ steps.set-outputs.outputs.run_on_macos_x86_64 }}
      run_on_macos_arm_64: ${{ steps.set-outputs.outputs.run_on_macos_arm_64 }}
      run_on_windows_x86_64: ${{ steps.set-outputs.outputs.run_on_windows_x86_64 }}
      run_on_windows_arm_64: ${{ steps.set-outputs.outputs.run_on_windows_arm_64 }}
    timeout-minutes: ${{ fromJson(needs.cap-job.outputs.job_timeout) }}

    steps:
      - name: Show Inputs
        id: show-inputs
        run: |
          echo "Workflow Inputs:"
          echo "${{ toJSON(github.event.inputs) }}"    

      - name: Set Inputs
        id: set-outputs
        run: |
          normalize_boolean() {
            local input_value=$(echo "$1" | tr '[:upper:]' '[:lower:]')
            case "$input_value" in
              "true" | "yes" | "1") echo "true" ;;
              "false" | "not" | "0") echo "false" ;;
              *) echo "$2" ;; # Default value if invalid
            esac
          }
          
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "run_on_linux_x86_64=false" >> $GITHUB_ENV
            echo "run_on_linux_x86_64=false" >> $GITHUB_OUTPUT
          
            echo "run_on_linux_arm_64=false" >> $GITHUB_ENV
            echo "run_on_linux_arm_64=false" >> $GITHUB_OUTPUT
          
            echo "run_on_macos_x86_64=false" >> $GITHUB_ENV
            echo "run_on_macos_x86_64=false" >> $GITHUB_OUTPUT
          
            echo "run_on_macos_arm_64=false" >> $GITHUB_ENV
            echo "run_on_macos_arm_64=false" >> $GITHUB_OUTPUT

            echo "run_on_windows_x86_64=true" >> $GITHUB_ENV
            echo "run_on_windows_x86_64=true" >> $GITHUB_OUTPUT          
          
            echo "run_on_windows_arm_64=false" >> $GITHUB_ENV
            echo "run_on_windows_arm_64=false" >> $GITHUB_OUTPUT
          else
            expr_run_on_linux_x86_64="$(normalize_boolean "${{ github.event.inputs.run_on_linux_x86_64 }}" "true")"
            echo "run_on_linux_x86_64=$expr_run_on_linux_x86_64" >> $GITHUB_ENV
            echo "run_on_linux_x86_64=$expr_run_on_linux_x86_64" >> $GITHUB_OUTPUT
            
            expr_run_on_linux_arm_64="$(normalize_boolean "${{ github.event.inputs.run_on_linux_arm_64 }}" "false")"
            echo "run_on_linux_arm_64=$expr_run_on_linux_arm_64" >> $GITHUB_ENV
            echo "run_on_linux_arm_64=$expr_run_on_linux_arm_64" >> $GITHUB_OUTPUT
            
            expr_run_on_macos_x86_64="$(normalize_boolean "${{ github.event.inputs.run_on_macos_x86_64 }}" "true")"
            echo "run_on_macos_x86_64=$expr_run_on_macos_x86_64" >> $GITHUB_ENV
            echo "run_on_macos_x86_64=$expr_run_on_macos_x86_64" >> $GITHUB_OUTPUT
            
            expr_run_on_macos_arm_64="$(normalize_boolean "${{ github.event.inputs.run_on_macos_arm_64 }}" "true")"
            echo "run_on_macos_arm_64=$expr_run_on_macos_arm_64" >> $GITHUB_ENV
            echo "run_on_macos_arm_64=$expr_run_on_macos_arm_64" >> $GITHUB_OUTPUT
            
            expr_run_on_windows_x86_64="$(normalize_boolean "${{ github.event.inputs.run_on_windows_x86_64 }}" "true")"
            echo "run_on_windows_x86_64=$expr_run_on_windows_x86_64" >> $GITHUB_ENV
            echo "run_on_windows_x86_64=$expr_run_on_windows_x86_64" >> $GITHUB_OUTPUT
            
            expr_run_on_windows_arm_64="$(normalize_boolean "${{ github.event.inputs.run_on_windows_arm_64 }}" "false")"
            echo "run_on_windows_arm_64=$expr_run_on_windows_arm_64" >> $GITHUB_ENV
            echo "run_on_windows_arm_64=$expr_run_on_windows_arm_64" >> $GITHUB_OUTPUT   
          fi

      - name: Show Outputs
        id: show-outputs
        run: |
          echo "Workflow Outputs:"
          echo "- runner_action: ${{ steps.set-outputs.outputs.runner_action }}"          
          echo "- run_on_linux_x86_64: ${{ steps.set-outputs.outputs.run_on_linux_x86_64 }}"
          echo "- run_on_linux_arm_64: ${{ steps.set-outputs.outputs.run_on_linux_arm_64 }}"
          echo "- run_on_macos_x86_64: ${{ steps.set-outputs.outputs.run_on_macos_x86_64 }}"
          echo "- run_on_macos_arm_64: ${{ steps.set-outputs.outputs.run_on_macos_arm_64 }}"
          echo "- run_on_windows_x86_64: ${{ steps.set-outputs.outputs.run_on_windows_x86_64 }}"
          echo "- run_on_windows_arm_64: ${{ steps.set-outputs.outputs.run_on_windows_arm_64 }}"

  dispatch-job:
    name: Dispatch Job
    permissions: write-all
    needs:
      - cap-job
      - describe-job
    uses: tabsdata/tabsdata-ci/.github/workflows/make.yml@main
    secrets:
      PAT_AOINOKIMI: ${{ secrets.PAT_AOINOKIMI }}
      TRANSPORTER_AWS_ACCESS_KEY_ID: ${{ secrets.TRANSPORTER_AWS_ACCESS_KEY_ID }}
      TRANSPORTER_AWS_SECRET_ACCESS_KEY: ${{ secrets.TRANSPORTER_AWS_SECRET_ACCESS_KEY }}
      TRANSPORTER_AZURE_ACCOUNT_KEY: ${{ secrets.TRANSPORTER_AZURE_ACCOUNT_KEY }}
      TRANSPORTER_AZURE_ACCOUNT_NAME: ${{ secrets.TRANSPORTER_AZURE_ACCOUNT_NAME }}
      SALESFORCE_INSTANCE_URL: ${{ secrets.SALESFORCE_INSTANCE_URL }}
      SALESFORCE_PASSWORD: ${{ secrets.SALESFORCE_PASSWORD }}
      SALESFORCE_SECURITY_TOKEN: ${{ secrets.SALESFORCE_SECURITY_TOKEN }}
      SALESFORCE_USERNAME: ${{ secrets.SALESFORCE_USERNAME }}
      TD_DATABRICKS_CATALOG: ${{ secrets.TD_DATABRICKS_CATALOG }}
      TD_DATABRICKS_CLIENT_ID: ${{ secrets.TD_DATABRICKS_CLIENT_ID }}
      TD_DATABRICKS_CLIENT_SECRET: ${{ secrets.TD_DATABRICKS_CLIENT_SECRET }}
      TD_DATABRICKS_HOST: ${{ secrets.TD_DATABRICKS_HOST }}
      TD_DATABRICKS_SCHEMA: ${{ secrets.TD_DATABRICKS_SCHEMA }}
      TD_DATABRICKS_TOKEN: ${{ secrets.TD_DATABRICKS_TOKEN }}
      TD_DATABRICKS_VOLUME: ${{ secrets.TD_DATABRICKS_VOLUME }}
      TD_DATABRICKS_WAREHOUSE_NAME: ${{ secrets.TD_DATABRICKS_WAREHOUSE_NAME }}
      TD_SNOWFLAKE_ACCOUNT: ${{ secrets.TD_SNOWFLAKE_ACCOUNT }}
      TD_SNOWFLAKE_DATABASE: ${{ secrets.TD_SNOWFLAKE_DATABASE }}
      TD_SNOWFLAKE_PAT: ${{ secrets.TD_SNOWFLAKE_PAT }}
      TD_SNOWFLAKE_ROLE: ${{ secrets.TD_SNOWFLAKE_ROLE }}
      TD_SNOWFLAKE_SCHEMA: ${{ secrets.TD_SNOWFLAKE_SCHEMA }}
      TD_SNOWFLAKE_USER: ${{ secrets.TD_SNOWFLAKE_USER }}
      TD_SNOWFLAKE_WAREHOUSE: ${{ secrets.TD_SNOWFLAKE_WAREHOUSE }}
    with:
      job_timeout: ${{ fromJson(needs.cap-job.outputs.job_timeout) }}
      td_product: "standard"
      dump_server: ${{ inputs.dump_server }}
      runner_mode: "release"
      runner_action: ${{ needs.describe-job.outputs.runner_action }}
      run_on_linux_x86_64: ${{ needs.describe-job.outputs.run_on_linux_x86_64 }}
      run_on_linux_arm_64: ${{ needs.describe-job.outputs.run_on_linux_arm_64 }}
      run_on_macos_x86_64: ${{ needs.describe-job.outputs.run_on_macos_x86_64 }}
      run_on_macos_arm_64: ${{ needs.describe-job.outputs.run_on_macos_arm_64 }}
      run_on_windows_x86_64: ${{ needs.describe-job.outputs.run_on_windows_x86_64 }}
      run_on_windows_arm_64: ${{ needs.describe-job.outputs.run_on_windows_arm_64 }}