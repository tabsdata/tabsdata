#
# Copyright 2025 Tabs Data Inc.
#

# How to use othe reporting plugins:

# pytest-html-reporter
#    --html-report=?/pytest.html
#
#    def _ensure_legacy_sessionstarttime(config_or_tr):
#        tr = getattr(config_or_tr, "pluginmanager", None)
#        if tr is not None:
#            tr = config_or_tr.pluginmanager.getplugin("terminalreporter")
#        else:
#            tr = config_or_tr
#
#        if tr is None:
#            return
#
#        if not hasattr(tr, "_sessionstarttime"):
#            start = getattr(tr, "_session_start", None)
#            try:
#                tr._sessionstarttime = float(start)
#            except Exception:
#                tr._sessionstarttime = time.time()
#
#    def pytest_sessionstart(session):
#        _ensure_legacy_sessionstarttime(session.config)
#
#    def pytest_terminal_summary(terminalreporter, exitstatus, config):
#        _ensure_legacy_sessionstarttime(terminalreporter)
#
#    def pytest_configure(config):
#        _ensure_legacy_sessionstarttime(config)

# pytest-reporter-html1
#    --template=html1/index.html --report=?/pytest.html

# pytest-html
#    --html=?/pytest.html

[tasks.test_py]
category = "05 - Test"
description = "Task 'test' for Python projects"
dependencies = ["set_mode_test_py"]
run_task = [
    { name = [
        "setup-test_py",
        "pre-test_py",
        "test_py_ta_features",
        "test_py_ta_tableframe",
        "test_py_te_examples",
        "test_py_te_tableframe",
        "test_py_ty_tableframe",
        "test_py_tabsdata",
        "test_py_connectors",
        "post-test_py",
        "cleanup-test_py",
    ] }
]

[tasks.setup-test_py]
category = "05 - Test"
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    arguments = split ${CARGO_MAKE_TASK_ARGS} ;
    for argument in ${arguments}
        if eq ${argument} "--fail-fast-py"
            info "‚åõÔ∏è Fail-Fast enabled. Groups of Python tests will execute until some group has failures."
            set_env TD_FAIL_FAST_PY true
        else
            set_env TD_FAIL_FAST_PY false
        end
    end
    set_env TD_TESTS_CODE_PY 0
    ''']

[tasks.test_py_ta_features]
category = "05 - Test"
private = true
dependencies = ["set_mode_test_py"]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    verbose = get_env TD_VERBOSE

    cd "${PROJECT_PY_TA_FEATURES_FOLDER}"

    td_temp = temp_dir
    set_env COVERAGE_FILE ${td_temp}/.tabsdata/.coverage.${PYTEST_XDIST_WORKER}

    report_folder = set "./target/reports/pytest/ta_features"
    rm -r ${report_folder}
    mkdir ${report_folder}
    report_file = set ${report_folder}/pytest.html

    if eq ${verbose} "false"
        debug "üöÄ pytest --import-mode=importlib -n 16 --dist=loadfile ${TESTS_PY_TA_FEATURES_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest --import-mode=importlib -n 16 --dist=loadfile ${TESTS_PY_TA_FEATURES_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m "${MARKERS}"
    else
        debug "üöÄ pytest --import-mode=importlib -${verbose} --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TA_FEATURES_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest --import-mode=importlib -${verbose} --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TA_FEATURES_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m "${MARKERS}"
    end

    is_zero = eq ${exit_code} "0"
    is_five = eq ${exit_code} "5"
    if ${is_zero} or ${is_five}
        info "‚åõÔ∏è Tests finished with zero-or-five exit code: '${exit_code}'"
    else
        info "‚åõÔ∏è Tests finished with non-zero-or-five exit code: '${exit_code}'"
        TD_FAIL_FAST_PY = get_env TD_FAIL_FAST_PY
        if not ${TD_FAIL_FAST_PY}
            info "‚åõÔ∏è Setting TD_TESTS_CODE_PY to ${exit_code}..."
            set_env TD_TESTS_CODE_PY ${exit_code}
        else
            info "‚åõÔ∏è Failing fast..."
            code = exit ${exit_code}
        end
    end

    exec --fail-on-error python ${PROJECT_TABSDATA_ROOT_FOLDER}/devutils/automation/tasks/makers/td-scripts/report_coverage.py ./.coverage/json/coverage.json .
    ''']

[tasks.test_py_ta_tableframe]
category = "05 - Test"
private = true
dependencies = ["set_mode_test_py"]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    verbose = get_env TD_VERBOSE

    cd "${PROJECT_PY_TA_TABLEFRAME_FOLDER}"

    td_temp = temp_dir
    set_env COVERAGE_FILE ${td_temp}/.tabsdata/.coverage.${PYTEST_XDIST_WORKER}

    report_folder = set "./target/reports/pytest/ta_tableframe"
    rm -r ${report_folder}
    mkdir ${report_folder}
    report_file = set ${report_folder}/pytest.html

    if eq ${verbose} "false"
        debug "üöÄ pytest --import-mode=importlib -n 16 --dist=loadfile ${TESTS_PY_TA_TABLEFRAME_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest --import-mode=importlib -n 16 --dist=loadfile ${TESTS_PY_TA_TABLEFRAME_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m "${MARKERS}"
    else
        debug "üöÄ pytest --import-mode=importlib -${verbose} --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TA_TABLEFRAME_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest --import-mode=importlib -${verbose} --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TA_TABLEFRAME_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m "${MARKERS}"
    end
    is_zero = eq ${exit_code} "0"
    is_five = eq ${exit_code} "5"
    if ${is_zero} or ${is_five}
        info "‚åõÔ∏è Tests finished with zero-or-five exit code: '${exit_code}'"
    else
        info "‚åõÔ∏è Tests finished with non-zero-or-five exit code: '${exit_code}'"
        TD_FAIL_FAST_PY = get_env TD_FAIL_FAST_PY
        if not ${TD_FAIL_FAST_PY}
            info "‚åõÔ∏è Setting TD_TESTS_CODE_PY to ${exit_code}..."
            set_env TD_TESTS_CODE_PY ${exit_code}
        else
            info "‚åõÔ∏è Failing fast..."
            code = exit ${exit_code}
        end
    end

    exec --fail-on-error python ${PROJECT_TABSDATA_ROOT_FOLDER}/devutils/automation/tasks/makers/td-scripts/report_coverage.py ./.coverage/json/coverage.json .
    ''']

[tasks.test_py_te_examples]
category = "05 - Test"
private = true
dependencies = ["set_mode_test_py"]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    verbose = get_env TD_VERBOSE

    cd "${PROJECT_PY_TE_EXAMPLES_FOLDER}"

    td_temp = temp_dir
    set_env COVERAGE_FILE ${td_temp}/.tabsdata/.coverage.${PYTEST_XDIST_WORKER}

    report_folder = set "./target/reports/pytest/te_examples"
    rm -r ${report_folder}
    mkdir ${report_folder}
    report_file = set ${report_folder}/pytest.html

    if eq ${verbose} "false"
        debug "üöÄ pytest --import-mode=importlib -n 16 --dist=loadfile ${TESTS_PY_TE_EXAMPLES_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest --import-mode=importlib -n 16  --dist=loadfile ${TESTS_PY_TE_EXAMPLES_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m "${MARKERS}"
    else
        debug "üöÄ pytest --import-mode=importlib -${verbose} --full-trace --log-level=DEBUG -n 16  --dist=loadfile ${TESTS_PY_TE_EXAMPLES_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest --import-mode=importlib -${verbose} --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TE_EXAMPLES_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m "${MARKERS}"
    end
    is_zero = eq ${exit_code} "0"
    is_five = eq ${exit_code} "5"
    if ${is_zero} or ${is_five}
        info "‚åõÔ∏è Tests finished with zero-or-five exit code: '${exit_code}'"
    else
        info "‚åõÔ∏è Tests finished with non-zero-or-five exit code: '${exit_code}'"
        TD_FAIL_FAST_PY = get_env TD_FAIL_FAST_PY
        if not ${TD_FAIL_FAST_PY}
            info "‚åõÔ∏è Setting TD_TESTS_CODE_PY to ${exit_code}..."
            set_env TD_TESTS_CODE_PY ${exit_code}
        else
            info "‚åõÔ∏è Failing fast..."
            code = exit ${exit_code}
        end
    end

    exec --fail-on-error python ${PROJECT_TABSDATA_ROOT_FOLDER}/devutils/automation/tasks/makers/td-scripts/report_coverage.py ./.coverage/json/coverage.json .
    ''']

[tasks.test_py_te_tableframe]
category = "05 - Test"
private = true
dependencies = ["set_mode_test_py"]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    verbose = get_env TD_VERBOSE

    cd "${PROJECT_PY_TE_TABLEFRAME_FOLDER}"

    td_temp = temp_dir
    set_env COVERAGE_FILE ${td_temp}/.tabsdata/.coverage.${PYTEST_XDIST_WORKER}

    report_folder = set "./target/reports/pytest/te_tableframe"
    rm -r ${report_folder}
    mkdir ${report_folder}
    report_file = set ${report_folder}/pytest.html

    if eq ${verbose} "false"
        debug "üöÄ pytest --import-mode=importlib -n 16 --dist=loadfile ${TESTS_PY_TE_TABLEFRAME_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest --import-mode=importlib -n 16  --dist=loadfile ${TESTS_PY_TE_TABLEFRAME_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m "${MARKERS}"
    else
        debug "üöÄ pytest --import-mode=importlib -${verbose} --full-trace --log-level=DEBUG -n 16  --dist=loadfile ${TESTS_PY_TE_TABLEFRAME_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest --import-mode=importlib -${verbose} --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TE_TABLEFRAME_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m "${MARKERS}"
    end
    is_zero = eq ${exit_code} "0"
    is_five = eq ${exit_code} "5"
    if ${is_zero} or ${is_five}
        info "‚åõÔ∏è Tests finished with zero-or-five exit code: '${exit_code}'"
    else
        info "‚åõÔ∏è Tests finished with non-zero-or-five exit code: '${exit_code}'"
        TD_FAIL_FAST_PY = get_env TD_FAIL_FAST_PY
        if not ${TD_FAIL_FAST_PY}
            info "‚åõÔ∏è Setting TD_TESTS_CODE_PY to ${exit_code}..."
            set_env TD_TESTS_CODE_PY ${exit_code}
        else
            info "‚åõÔ∏è Failing fast..."
            code = exit ${exit_code}
        end
    end

    exec --fail-on-error python ${PROJECT_TABSDATA_ROOT_FOLDER}/devutils/automation/tasks/makers/td-scripts/report_coverage.py ./.coverage/json/coverage.json .
    ''']

[tasks.test_py_ty_tableframe]
category = "05 - Test"
private = true
dependencies = ["set_mode_test_py"]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    verbose = get_env TD_VERBOSE

    cd "${PROJECT_PY_TY_TABLEFRAME_FOLDER}"

    td_temp = temp_dir
    set_env COVERAGE_FILE ${td_temp}/.tabsdata/.coverage.${PYTEST_XDIST_WORKER}

    report_folder = set "./target/reports/pytest/ty_tableframe"
    rm -r ${report_folder}
    mkdir ${report_folder}
    report_file = set ${report_folder}/pytest.html

    if eq ${verbose} "false"
        debug "üöÄ pytest --import-mode=importlib -n 16 --dist=loadfile ${TESTS_PY_TY_TABLEFRAME_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest --import-mode=importlib -n 16  --dist=loadfile ${TESTS_PY_TY_TABLEFRAME_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m "${MARKERS}"
    else
        debug "üöÄ pytest --import-mode=importlib -${verbose} --full-trace --log-level=DEBUG -n 16  --dist=loadfile ${TESTS_PY_TY_TABLEFRAME_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest --import-mode=importlib -${verbose} --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TY_TABLEFRAME_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m "${MARKERS}"
    end
    is_zero = eq ${exit_code} "0"
    is_five = eq ${exit_code} "5"
    if ${is_zero} or ${is_five}
        info "‚åõÔ∏è Tests finished with zero-or-five exit code: '${exit_code}'"
    else
        info "‚åõÔ∏è Tests finished with non-zero-or-five exit code: '${exit_code}'"
        TD_FAIL_FAST_PY = get_env TD_FAIL_FAST_PY
        if not ${TD_FAIL_FAST_PY}
            info "‚åõÔ∏è Setting TD_TESTS_CODE_PY to ${exit_code}..."
            set_env TD_TESTS_CODE_PY ${exit_code}
        else
            info "‚åõÔ∏è Failing fast..."
            code = exit ${exit_code}
        end
    end

    exec --fail-on-error python ${PROJECT_TABSDATA_ROOT_FOLDER}/devutils/automation/tasks/makers/td-scripts/report_coverage.py ./.coverage/json/coverage.json .
    ''']

[tasks.test_py_tabsdata]
category = "05 - Test"
private = true
dependencies = ["set_mode_test_py"]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    verbose = get_env TD_VERBOSE

    cd "${PROJECT_PY_TD_SDK_FOLDER}"

    td_temp = temp_dir
    set_env COVERAGE_FILE ${td_temp}/.tabsdata/.coverage.${PYTEST_XDIST_WORKER}

    report_folder = set "./target/reports/pytest/tabsdata"
    rm -r ${report_folder}
    mkdir ${report_folder}
    report_file = set ${report_folder}/pytest.html

    if eq ${verbose} "false"
        debug "üöÄ pytest --import-mode=importlib -n 16 --dist=loadfile ${TESTS_PY_TABSDATA_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest --import-mode=importlib -n 16 --dist=loadfile ${TESTS_PY_TABSDATA_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m "${MARKERS}"
    else
        debug "üöÄ pytest --import-mode=importlib -v --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TABSDATA_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest --import-mode=importlib -v --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TABSDATA_FOLDER} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m "${MARKERS}"
    end
    is_zero = eq ${exit_code} "0"
    is_five = eq ${exit_code} "5"
    if ${is_zero} or ${is_five}
        info "‚åõÔ∏è Tests finished with zero-or-five exit code: '${exit_code}'"
    else
        info "‚åõÔ∏è Tests finished with non-zero-or-five exit code: '${exit_code}'"
        TD_FAIL_FAST_PY = get_env TD_FAIL_FAST_PY
        if not ${TD_FAIL_FAST_PY}
            info "‚åõÔ∏è Setting TD_TESTS_CODE_PY to ${exit_code}..."
            set_env TD_TESTS_CODE_PY ${exit_code}
        else
            info "‚åõÔ∏è Failing fast..."
            code = exit ${exit_code}
        end
    end

    exec --fail-on-error python ${PROJECT_TABSDATA_ROOT_FOLDER}/devutils/automation/tasks/makers/td-scripts/report_coverage.py ./.coverage/json/coverage.json .
    ''']

[tasks.test_py_connectors]
category = "05 - Test"
private = true
dependencies = ["set_mode_test_py"]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    verbose = get_env TD_VERBOSE

    connectors = glob_array ${CONNECTORS_PY_ROOT_FOLDER}/tabsdata_*

    for connector in ${connectors}
        is_connector = is_dir ${connector}
        if ${is_connector}
            cd ${connector}

            td_temp = temp_dir
            set_env COVERAGE_FILE ${td_temp}/.tabsdata/.coverage.${PYTEST_XDIST_WORKER}

            connector_name = basename ${connector}
            tests_folder_name = set tests_${connector_name}
            tests_folder_path = join_path ${connector} ${tests_folder_name}

            report_folder = set ${connector}/target/reports/pytest/${connector_name}
            rm -r ${report_folder}
            mkdir ${report_folder}
            report_file = set ${report_folder}/pytest.html

            if eq ${verbose} "false"
                debug "üöÄ pytest --import-mode=importlib -n 16 --dist=loadfile ${tests_folder_path} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m \"${MARKERS}\""
                exit_code = exec --get-exit-code pytest --import-mode=importlib -n 16 --dist=loadfile ${tests_folder_path} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m "${MARKERS}"
            else
                debug "üöÄ pytest --import-mode=importlib -v --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${tests_folder_path} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m \"${MARKERS}\""
                exit_code = exec --get-exit-code pytest --import-mode=importlib -v --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${tests_folder_path} --template=html1/index.html --report=${report_file} -ra --durations=8 --cov-config=.coveragerc --cov --cov-report=html:.coverage/html --cov-report=json:.coverage/json/coverage.json --cov-report=lcov:.coverage/lcov/coverage.lcov -m "${MARKERS}"
            end
            is_zero = eq ${exit_code} "0"
            is_five = eq ${exit_code} "5"
            if ${is_zero} or ${is_five}
                info "‚åõÔ∏è Tests finished with zero-or-five exit code: '${exit_code}'"
            else
                info "‚åõÔ∏è Tests finished with non-zero-or-five exit code: '${exit_code}'"
                TD_FAIL_FAST_PY = get_env TD_FAIL_FAST_PY
                if not ${TD_FAIL_FAST_PY}
                    info "‚åõÔ∏è Setting TD_TESTS_CODE_PY to ${exit_code}..."
                    set_env TD_TESTS_CODE_PY ${exit_code}
                else
                    info "‚åõÔ∏è Failing fast..."
                    code = exit ${exit_code}
                end
            end

            exec --fail-on-error python ${PROJECT_TABSDATA_ROOT_FOLDER}/devutils/automation/tasks/makers/td-scripts/report_coverage.py ./.coverage/json/coverage.json .
        end
    end
    ''']

[tasks.set_mode_test_py]
category = "05 - Test"
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    if is_empty ${verbose}
        set_env TD_VERBOSE "false"
    end
    debug "üîÖ Using td verbose: '${TD_VERBOSE}'"
    compile = get_env TD_COMPILE
    compile_empty = is_empty ${compile}
    compile_true = eq ${compile} "true"
    on_ga = get_env TD_ON_GA
    on_ga_true = eq ${on_ga} "true"
    compile = set ${compile_empty} or ${compile_true}
    if ${on_ga_true}
        set_env TD_COMPILE "false"
    else
        if ${compile}
            set_env TD_COMPILE "true"
        else
            set_env TD_COMPILE "false"
        end
    end
    debug "üîÖ Using td compile: '${TD_COMPILE}'"
    ''']

[tasks.pre-test_py]
category = "05 - Test"
private = true
dependencies = ["set_mode_test_py", "license"]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    debug "üî∑ _____ Copying assets..."
    cm_run_task copy_assets

    compile = get_env TD_COMPILE
    if eq ${compile} "true"
        debug "üî∑ _____ Compiling..."
        cm_run_task build
    else
        debug "üî∑ _____ Not Compiling..."
    end

    debug "üî∑ _____ Generating python binaries..."
    cm_run_task setup_pytest_tabsdata

    no-server = set false
    arguments = split ${CARGO_MAKE_TASK_ARGS} ;
    for argument in ${arguments}
        if eq ${argument} "--no-server"
            no-server = set true
        end
    end

    if ${no-server}
        info "üöú Starting and stopping the pytest Tabsdata server skipped as requested."
    else
        debug "üî∑ _____ Starting tabsdata server (pytest) first..."
        cm_run_task stop_pytest_tabsdata
        sleep 10000
        cm_run_task remove_pytest_tabsdata
        sleep 5000
        cm_run_task start_pytest_tabsdata
        cm_run_task status_pytest_tabsdata
    end
    ''']

[tasks.copy_assets]
category = "05 - Test"
private = true
dependencies = ["set_mode_test_py"]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    debug "üöÄ python ${COPY_ASSETS_PY}"
    exec --fail-on-error python ${COPY_ASSETS_PY}
    ''']

[tasks.setup_pytest_tabsdata]
category = "05 - Test"
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    debug "üî∑ _____ Setting up tabsdata pytest context..."

    debug "üî∑ üî∑ _____ Setting up tabsdata pytest context (tabsdata)..."
    debug "üöÄ python setup.py --quiet develop --script-dir target/pytest/build"
    set_env PYTHONWARNINGS ignore
    exec --fail-on-error python setup.py --quiet develop --script-dir target/pytest/build

    # Prevent make from using the local system scripts generated by setup.py
    rm target/pytest/build/pip
    rm target/pytest/build/pip.exe
    rm target/pytest/build/pip3
    rm target/pytest/build/pip3.exe
    rm target/pytest/build/wheel
    rm target/pytest/build/wheel.exe

    connectors = glob_array ${CONNECTORS_PY_ROOT_FOLDER}/tabsdata_*

    for connector in ${connectors}
        is_connector = is_dir ${connector}
        if ${is_connector}
            connector_name = basename ${connector}
            debug "üî∑ üî∑ _____ Setting up tabsdata pytest context (${connector_name})..."
            cd ${connector}
            debug "üöÄ python setup.py --quiet develop --script-dir target/pytest/build"
            set_env PYTHONWARNINGS ignore
            exec --fail-on-error python setup.py --quiet develop --script-dir target/pytest/build

            # Prevent make from using the local system scripts generated by setup.py
            rm target/pytest/build/pip
            rm target/pytest/build/pip.exe
            rm target/pytest/build/pip3
            rm target/pytest/build/pip3.exe
            rm target/pytest/build/wheel
            rm target/pytest/build/wheel.exe

            cd ../../..
        end
    end

    debug "üî∑ _____ Setting up tabsdata pytest python path..."
    debug "üöÄ python ${PROJECT_PY_TD_SDK_FOLDER}/tests_tabsdata/bootest.py"
    output = exec --fail-on-error python ${PROJECT_PY_TD_SDK_FOLDER}tests_tabsdata/bootest.py
    debug "üì¶ The received pythonpath is ${output.stdout}"
    pythonpath = set ${output.stdout}
    debug "‚úÖ Python system path will be added: ${pythonpath}"
    old_pythonpath = get_env PYTHONPATH
    debug "‚úÖ Python system path before adjusting: ${old_pythonpath}"
    os_name = get_env OS
    is_windows = contains ${os_name} "Windows"
    if ${is_windows}
        separator = set ";"
    else
        separator = set ":"
    end
    new_pythonpath = concat ${pythonpath} ${separator} ${old_path}
    debug "‚úÖ Python system path after adjusting: ${new_pythonpath}"
    set_env PYTHONPATH ${new_pythonpath}
    set_pythonpath = get_env PYTHONPATH
    debug "üîÖ Python system path persisted: ${set_pythonpath}"

    debug "üî∑ _____ Setting up tabsdata development package mode..."
    set_env TD_TABSDATA_DEV_PKG ${PROJECT_TABSDATA_ROOT_FOLDER}
    set_td_tabsdata_dev_pkg = get_env TD_TABSDATA_DEV_PKG
    debug "üîÖ tabsdata development python package location set to: ${set_td_tabsdata_dev_pkg}"

    for connector in ${connectors}
        is_connector = is_dir ${connector}
        if ${is_connector}
            connector_name = basename ${connector}

            connector_name_upper = uppercase ${connector_name}
            connector_name_env = set TD_${connector_name_upper}_DEV_PKG

            debug "üî∑ _____ Setting up ${connector} development package mode..."
            set_env ${connector_name_env} ${connector}
            set_td_connector_dev_pkg_env = get_env ${connector_name_env}
            debug "üîÖ ${connector} development python package location set to: ${set_td_connector_dev_pkg_env}"
        end
    end
    ''']

[tasks.start_pytest_tabsdata]
category = "05 - Test"
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    debug "üî∑ _____ Starting tabsdata server (pytest)..."
    if is_empty ${profile}
        build-folder = set "debug"
    else
        is_dev = eq ${profile} "dev"
        if ${is_dev}
            build-folder = set "debug"
        else
            build-folder = set ${profile}
        end
    end
    if not is_empty ${td-target}
        build-folder = set ${td-target}/${build-folder}
    end
    debug "üîÖ Using build folder ${build-folder}"
    os_family = os_family
    if eq ${os_family} "windows"
        tdserver = set "tdserver.exe"
    else
        tdserver = set "tdserver"
    end
    debug "üîÖ Using tdserver binary: '${os_family}' - '${tdserver}'"
    debug "üöÄ ${ROOT_PROJECT_TABSDATA_FOLDER}/target/${build-folder}/${tdserver} start --instance pytest -- -- apiserver --address 127.0.0.1:2467 --internal-address 127.0.0.1:2468 --access-jwt-expiration 36288000"

    # Necessary until we figure out how to cleanly start the supervisor detached from tdserver.
    os = os_family
    if eq ${os} "windows"
        exec --fail-on-error ${ROOT_PROJECT_TABSDATA_FOLDER}/target/${build-folder}/${tdserver} start --instance pytest -- -- apiserver --address 127.0.0.1:2467 --internal-address 127.0.0.1:2468 --access-jwt-expiration 36288000
    else
        output = exec --fail-on-error ${ROOT_PROJECT_TABSDATA_FOLDER}/target/${build-folder}/${tdserver} start --instance pytest -- -- apiserver --address 127.0.0.1:2467 --internal-address 127.0.0.1:2468 --access-jwt-expiration 36288000
    end
    ''']

[tasks.status_pytest_tabsdata]
category = "05 - Test"
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    debug "üî∑ _____ Starting tabsdata server (pytest)..."
    if is_empty ${profile}
        build-folder = set "debug"
    else
        is_dev = eq ${profile} "dev"
        if ${is_dev}
            build-folder = set "debug"
        else
            build-folder = set ${profile}
        end
    end
    if not is_empty ${td-target}
        build-folder = set ${td-target}/${build-folder}
    end
    debug "üîÖ Using build folder ${build-folder}"
    os_family = os_family
    if eq ${os_family} "windows"
        tdserver = set "tdserver.exe"
    else
        tdserver = set "tdserver"
    end

    debug "üîÖ Using tdserver binary: '${os_family}' - '${tdserver}'"
    debug "üöÄ ${ROOT_PROJECT_TABSDATA_FOLDER}/target/${build-folder}/${tdserver} status --instance pytest"

    status_timeout = calc 3 * 60
    status_sleep = set 1000
    status_attempts = calc ${status_timeout} * 1000
    status_attempts = calc ${status_attempts} / ${status_sleep}

    status_attempt = set 0
    status_running = set true

    while ${status_running}
        output = exec --fail-on-error ${ROOT_PROJECT_TABSDATA_FOLDER}/target/${build-folder}/${tdserver} status --instance pytest
        status_started = contains ${output.stdout} "apiserver"
        if ${status_started}
            debug "üîÖ Verified supervisor & apiserver are running"
            status_running = set false
        else
            debug ". ${status_attempt}"
            status_attempt = calc ${status_attempt} + 1
            status_exhausted = eq ${status_attempt} ${status_attempts}
            if ${status_exhausted}
                error "üò° Cancelling execution as supervisor did not start after ${status_timeout} seconds"
                exit 1
            end
            sleep ${status_sleep}
        end
    end
    ''']

[tasks.stop_pytest_tabsdata]
category = "05 - Test"
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    debug "üî∑ _____ Stopping tabsdata server (pytest)..."
    if is_empty ${profile}
        build-folder = set "debug"
    else
        is_dev = eq ${profile} "dev"
        if ${is_dev}
            build-folder = set "debug"
        else
            build-folder = set ${profile}
        end
    end
    if not is_empty ${td-target}
        build-folder = set ${td-target}/${build-folder}
    end
    debug "üîÖ Using build folder ${build-folder}"
    os_family = os_family
    if eq ${os_family} "windows"
        tdserver = set "tdserver.exe"
    else
        tdserver = set "tdserver"
    end
    debug "üîÖ Using tdserver binary: '${os_family}' - '${tdserver}'"
    debug "üöÄ ${ROOT_PROJECT_TABSDATA_FOLDER}/target/${build-folder}/${tdserver} stop --instance pytest"
    output = exec --fail-on-error ${ROOT_PROJECT_TABSDATA_FOLDER}/target/${build-folder}/${tdserver} stop --instance pytest
    ''']

[tasks.remove_pytest_tabsdata]
category = "05 - Test"
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    debug "üî∑ _____ Deleteing tabsdata server (pytest)..."
    home_folder = set ${HOME}
    instance_folder = set ${home_folder}/.tabsdata/instances/pytest
    debug "‚úÖ The tabsdata instance pytest folder is: ${instance_folder}"
    exists_instance_folder = is_path_exists ${instance_folder}
    if eq ${exists_instance_folder} true
        debug "‚úÖ The tabsdata instance pytest folder exists. Deleting it: ${target_dir}..."
        rm -r ${instance_folder}
        debug "‚úÖ The tabsdata instance pytest has been deleted: ${target_dir}!"
    else
        debug "‚úÖ The tabsdata instance pytest folder does not exist. Skipping deleting it: ${target_dir}..."
    end
    ''']

[tasks.post-test_py]
category = "05 - Test"
private = true
dependencies = ["set_mode_test_py"]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    no-server = set false
    arguments = split ${CARGO_MAKE_TASK_ARGS} ;
    for argument in ${arguments}
        if eq ${argument} "--no-server"
            no-server = set true
        end
    end

    if ${no-server}
        info "üöú Starting and stopping the pytest Tabsdata server skipped as requested."
    else
        cm_run_task stop_pytest_tabsdata
    end
    ''']

[tasks.cleanup-test_py]
category = "05 - Test"
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    exit_code = get_env TD_TESTS_CODE_PY
    if not eq ${exit_code} "0"
        info "‚åõÔ∏è Marking py tests run as failed: '${exit_code}'"
        code = exit ${exit_code}
    else
        info "‚åõÔ∏è Marking py tests run as successful: '${exit_code}'"
        exit 0
    end
    ''']