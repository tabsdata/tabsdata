#
# Copyright 2025 Tabs Data Inc.
#

[tasks.test_py]
category = "02 - Test"
description = "Task 'test' for Python projects"
dependencies = ["set_mode_test_py"]
run_task = [
    { name = [
        "setup-test_py",
        "pre-test_py",
        "test_py_ta_features",
        "test_py_ta_tableframe",
        "test_py_te_tableframe",
        "test_py_tabsdata",
        "test_py_tabsdata_mongodb",
        "test_py_tabsdata_salesforce",
        "test_py_tabsdata_snowflake",
        "post-test_py",
        "cleanup-test_py",
    ] }
]

[tasks.setup-test_py]
category = "02 - Test"
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    arguments = split ${CARGO_MAKE_TASK_ARGS} ;
    for argument in ${arguments}
        if eq ${argument} "--fail-fast-py"
            info "‚åõÔ∏è Fail-Fast enabled. Groups of Python tests will execute until some group has failures."
            set_env TD_FAIL_FAST_PY true
        else
            set_env TD_FAIL_FAST_PY false
        end
    end
    set_env TD_TESTS_CODE_PY 0
    ''']

[tasks.test_py_ta_features]
category = "02 - Test"
private = true
dependencies = ["set_mode_test_py"]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    verbose = get_env TD_VERBOSE
    compile = get_env TD_COMPILE

    cd "${PROJECT_PY_TA_FEATURES_FOLDER}"

    if eq ${verbose} "false"
        debug "üöÄ pytest -n 16 --dist=loadfile ${TESTS_PY_TA_FEATURES_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest -n 16 --dist=loadfile ${TESTS_PY_TA_FEATURES_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
    else
        debug "üöÄ pytest -${verbose} --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TA_FEATURES_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest -${verbose} --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TA_FEATURES_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
    end

    is_zero = eq ${exit_code} "0"
    is_five = eq ${exit_code} "5"
    if ${is_zero} or ${is_five}
        info "‚åõÔ∏è Tests finished with zero-or-five exit code: '${exit_code}'"
    else
        info "‚åõÔ∏è Tests finished with non-zero-or-five exit code: '${exit_code}'"
        TD_FAIL_FAST_PY = get_env TD_FAIL_FAST_PY
        if not ${TD_FAIL_FAST_PY}
            info "‚åõÔ∏è Setting TD_TESTS_CODE_PY to ${exit_code}..."
            set_env TD_TESTS_CODE_PY ${exit_code}
        else
            info "‚åõÔ∏è Failing fast..."
            code = exit ${exit_code}
        end
    end
    ''']

[tasks.test_py_ta_tableframe]
category = "02 - Test"
private = true
dependencies = ["set_mode_test_py"]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    verbose = get_env TD_VERBOSE
    compile = get_env TD_COMPILE

    cd "${PROJECT_PY_TA_TABLEFRAME_FOLDER}"

    if eq ${verbose} "false"
        debug "üöÄ pytest -n 16 --dist=loadfile ${TESTS_PY_TA_TABLEFRAME_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest -n 16 --dist=loadfile ${TESTS_PY_TA_TABLEFRAME_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
    else
        debug "üöÄ pytest -${verbose} --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TA_TABLEFRAME_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest -${verbose} --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TA_TABLEFRAME_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
    end
    is_zero = eq ${exit_code} "0"
    is_five = eq ${exit_code} "5"
    if ${is_zero} or ${is_five}
        info "‚åõÔ∏è Tests finished with zero-or-five exit code: '${exit_code}'"
    else
        info "‚åõÔ∏è Tests finished with non-zero-or-five exit code: '${exit_code}'"
        TD_FAIL_FAST_PY = get_env TD_FAIL_FAST_PY
        if not ${TD_FAIL_FAST_PY}
            info "‚åõÔ∏è Setting TD_TESTS_CODE_PY to ${exit_code}..."
            set_env TD_TESTS_CODE_PY ${exit_code}
        else
            info "‚åõÔ∏è Failing fast..."
            code = exit ${exit_code}
        end
    end
    ''']

[tasks.test_py_te_tableframe]
category = "02 - Test"
private = true
dependencies = ["set_mode_test_py"]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    verbose = get_env TD_VERBOSE
    compile = get_env TD_COMPILE

    cd ${PROJECT_PY_TE_TABLEFRAME_FOLDER}

    if eq ${verbose} "false"
        debug "üöÄ pytest -n 16 --dist=loadfile ${TESTS_PY_TE_TABLEFRAME_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest -n 16  --dist=loadfile ${TESTS_PY_TE_TABLEFRAME_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
    else
        debug "üöÄ pytest -${verbose} --full-trace --log-level=DEBUG -n 16  --dist=loadfile ${TESTS_PY_TE_TABLEFRAME_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest -${verbose} --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TE_TABLEFRAME_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
    end
    is_zero = eq ${exit_code} "0"
    is_five = eq ${exit_code} "5"
    if ${is_zero} or ${is_five}
        info "‚åõÔ∏è Tests finished with zero-or-five exit code: '${exit_code}'"
    else
        info "‚åõÔ∏è Tests finished with non-zero-or-five exit code: '${exit_code}'"
        TD_FAIL_FAST_PY = get_env TD_FAIL_FAST_PY
        if not ${TD_FAIL_FAST_PY}
            info "‚åõÔ∏è Setting TD_TESTS_CODE_PY to ${exit_code}..."
            set_env TD_TESTS_CODE_PY ${exit_code}
        else
            info "‚åõÔ∏è Failing fast..."
            code = exit ${exit_code}
        end
    end
    ''']

[tasks.test_py_tabsdata]
category = "02 - Test"
private = true
dependencies = ["set_mode_test_py"]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    verbose = get_env TD_VERBOSE
    compile = get_env TD_COMPILE

    cd ${PROJECT_PY_TD_SDK_FOLDER}

    if eq ${verbose} "false"
        debug "üöÄ pytest -n 16 --dist=loadfile ${TESTS_PY_TABSDATA_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest -n 16 --dist=loadfile ${TESTS_PY_TABSDATA_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
    else
        debug "üöÄ pytest -v --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TABSDATA_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest -v --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TABSDATA_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
    end
    is_zero = eq ${exit_code} "0"
    is_five = eq ${exit_code} "5"
    if ${is_zero} or ${is_five}
        info "‚åõÔ∏è Tests finished with zero-or-five exit code: '${exit_code}'"
    else
        info "‚åõÔ∏è Tests finished with non-zero-or-five exit code: '${exit_code}'"
        TD_FAIL_FAST_PY = get_env TD_FAIL_FAST_PY
        if not ${TD_FAIL_FAST_PY}
            info "‚åõÔ∏è Setting TD_TESTS_CODE_PY to ${exit_code}..."
            set_env TD_TESTS_CODE_PY ${exit_code}
        else
            info "‚åõÔ∏è Failing fast..."
            code = exit ${exit_code}
        end
    end
    ''']

[tasks.test_py_tabsdata_mongodb]
category = "02 - Test"
private = true
dependencies = ["set_mode_test_py"]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    verbose = get_env TD_VERBOSE
    compile = get_env TD_COMPILE

    cd ${PROJECT_PY_TABSDATA_MONGODB_FOLDER}

    if eq ${verbose} "false"
        debug "üöÄ pytest -n 16 --dist=loadfile ${TESTS_PY_TABSDATA_MONGODB_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest -n 16 --dist=loadfile ${TESTS_PY_TABSDATA_MONGODB_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
    else
        debug "üöÄ pytest -v --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TABSDATA_MONGODB_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest -v --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TABSDATA_MONGODB_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
    end
    is_zero = eq ${exit_code} "0"
    is_five = eq ${exit_code} "5"
    if ${is_zero} or ${is_five}
        info "‚åõÔ∏è Tests finished with zero-or-five exit code: '${exit_code}'"
    else
        info "‚åõÔ∏è Tests finished with non-zero-or-five exit code: '${exit_code}'"
        TD_FAIL_FAST_PY = get_env TD_FAIL_FAST_PY
        if not ${TD_FAIL_FAST_PY}
            info "‚åõÔ∏è Setting TD_TESTS_CODE_PY to ${exit_code}..."
            set_env TD_TESTS_CODE_PY ${exit_code}
        else
            info "‚åõÔ∏è Failing fast..."
            code = exit ${exit_code}
        end
    end
    ''']

[tasks.test_py_tabsdata_salesforce]
category = "02 - Test"
private = true
dependencies = ["set_mode_test_py"]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    verbose = get_env TD_VERBOSE
    compile = get_env TD_COMPILE

    cd ${PROJECT_PY_TABSDATA_SALESFORCE_FOLDER}

    if eq ${verbose} "false"
        debug "üöÄ pytest -n 16 --dist=loadfile ${TESTS_PY_TABSDATA_SALESFORCE_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest -n 16 --dist=loadfile ${TESTS_PY_TABSDATA_SALESFORCE_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
    else
        debug "üöÄ pytest -v --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TABSDATA_SALESFORCE_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest -v --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TABSDATA_SALESFORCE_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
    end
    is_zero = eq ${exit_code} "0"
    is_five = eq ${exit_code} "5"
    if ${is_zero} or ${is_five}
        info "‚åõÔ∏è Tests finished with zero-or-five exit code: '${exit_code}'"
    else
        info "‚åõÔ∏è Tests finished with non-zero-or-five exit code: '${exit_code}'"
        TD_FAIL_FAST_PY = get_env TD_FAIL_FAST_PY
        if not ${TD_FAIL_FAST_PY}
            info "‚åõÔ∏è Setting TD_TESTS_CODE_PY to ${exit_code}..."
            set_env TD_TESTS_CODE_PY ${exit_code}
        else
            info "‚åõÔ∏è Failing fast..."
            code = exit ${exit_code}
        end
    end
    ''']

[tasks.test_py_tabsdata_snowflake]
category = "02 - Test"
private = true
dependencies = ["set_mode_test_py"]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    verbose = get_env TD_VERBOSE
    compile = get_env TD_COMPILE

    cd ${PROJECT_PY_TABSDATA_SNOWFLAKE_FOLDER}

    if eq ${verbose} "false"
        debug "üöÄ pytest -n 16 --dist=loadfile ${TESTS_PY_TABSDATA_SNOWFLAKE_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest -n 16 --dist=loadfile ${TESTS_PY_TABSDATA_SNOWFLAKE_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
    else
        debug "üöÄ pytest -v --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TABSDATA_SNOWFLAKE_FOLDER} --cov-config=.coveragerc --cov -m \"${MARKERS}\""
        exit_code = exec --get-exit-code pytest -v --full-trace --log-level=DEBUG -n 16 --dist=loadfile ${TESTS_PY_TABSDATA_SNOWFLAKE_FOLDER} --cov-config=.coveragerc --cov -m "${MARKERS}"
    end
    is_zero = eq ${exit_code} "0"
    is_five = eq ${exit_code} "5"
    if ${is_zero} or ${is_five}
        info "‚åõÔ∏è Tests finished with zero-or-five exit code: '${exit_code}'"
    else
        info "‚åõÔ∏è Tests finished with non-zero-or-five exit code: '${exit_code}'"
        TD_FAIL_FAST_PY = get_env TD_FAIL_FAST_PY
        if not ${TD_FAIL_FAST_PY}
            info "‚åõÔ∏è Setting TD_TESTS_CODE_PY to ${exit_code}..."
            set_env TD_TESTS_CODE_PY ${exit_code}
        else
            info "‚åõÔ∏è Failing fast..."
            code = exit ${exit_code}
        end
    end
    ''']

[tasks.set_mode_test_py]
category = "02 - Test"
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    if is_empty ${verbose}
        set_env TD_VERBOSE "false"
    end
    debug "üîÖ Using td verbose: '${TD_VERBOSE}'"
    _compile_empty = is_empty ${compile}
    _compile_true = eq ${compile} "true"
    _compile = set ${_compile_empty} or ${_compile_true}
    if ${_compile}
        set_env TD_COMPILE "true"
    else
        set_env TD_COMPILE "false"
    end
        debug "üîÖ Using td compile: '${TD_COMPILE}'"
    ''']

[tasks.pre-test_py]
category = "02 - Test"
private = true
dependencies = ["set_mode_test_py", "license"]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    debug "üî∑ _____ Copying assets..."
    cm_run_task copy_assets

    debug "üî∑ _____ Compiling..."
    cm_run_task build

    debug "üî∑ _____ Generating python binaries..."
    cm_run_task setup_pytest_tabsdata

    no-server = set false
    arguments = split ${CARGO_MAKE_TASK_ARGS} ;
    for argument in ${arguments}
        if eq ${argument} "--no-server"
            no-server = set true
        end
    end

    if ${no-server}
        info "üöú Starting and stopping the pytest Tabsdata server skipped as requested."
    else
        debug "üî∑ _____ Starting tabsdata server (pytest) first..."
        cm_run_task stop_pytest_tabsdata
        sleep 10000
        cm_run_task remove_pytest_tabsdata
        sleep 5000
        cm_run_task start_pytest_tabsdata
        sleep 30000
        cm_run_task status_pytest_tabsdata
    end
    ''']

[tasks.copy_assets]
category = "02 - Test"
private = true
command = "python"
args = ["${COPY_ASSETS_PY}"]

[tasks.setup_pytest_tabsdata]
category = "02 - Test"
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    debug "üî∑ _____ Setting up tabsdata pytest context..."

    debug "üî∑ üî∑ _____ Setting up tabsdata pytest context (tabsdata)..."
    debug "üöÄ python setup.py --quiet develop --script-dir target/pytest/build"
    set_env PYTHONWARNINGS ignore
    exec --fail-on-error python setup.py --quiet develop --script-dir target/pytest/build

    # Prevent make from using the local system scripts generated by setup.py
    rm target/pytest/build/pip
    rm target/pytest/build/pip.exe
    rm target/pytest/build/pip3
    rm target/pytest/build/pip3.exe
    rm target/pytest/build/wheel
    rm target/pytest/build/wheel.exe

    debug "üî∑ üî∑ _____ Setting up tabsdata pytest context (tabsdata_mongodb)..."
    cd connectors/python/tabsdata_mongodb
    debug "üöÄ python setup.py --quiet develop --script-dir target/pytest/build"
    set_env PYTHONWARNINGS ignore
    exec --fail-on-error python setup.py --quiet develop --script-dir target/pytest/build

    # Prevent make from using the local system scripts generated by setup.py
    rm target/pytest/build/pip
    rm target/pytest/build/pip.exe
    rm target/pytest/build/pip3
    rm target/pytest/build/pip3.exe
    rm target/pytest/build/wheel
    rm target/pytest/build/wheel.exe

    cd ../../..

    debug "üî∑ üî∑ _____ Setting up tabsdata pytest context (tabsdata_salesforce)..."
    cd connectors/python/tabsdata_salesforce
    debug "üöÄ python setup.py --quiet develop --script-dir target/pytest/build"
    set_env PYTHONWARNINGS ignore
    exec --fail-on-error python setup.py --quiet develop --script-dir target/pytest/build

    # Prevent make from using the local system scripts generated by setup.py
    rm target/pytest/build/pip
    rm target/pytest/build/pip.exe
    rm target/pytest/build/pip3
    rm target/pytest/build/pip3.exe
    rm target/pytest/build/wheel
    rm target/pytest/build/wheel.exe

    cd ../../..

    debug "üî∑ üî∑ _____ Setting up tabsdata pytest context (tabsdata_snowflake)..."
    cd connectors/python/tabsdata_snowflake
    debug "üöÄ python setup.py --quiet develop --script-dir target/pytest/build"
    set_env PYTHONWARNINGS ignore
    exec --fail-on-error python setup.py --quiet develop --script-dir target/pytest/build

    # Prevent make from using the local system scripts generated by setup.py
    rm target/pytest/build/pip
    rm target/pytest/build/pip.exe
    rm target/pytest/build/pip3
    rm target/pytest/build/pip3.exe
    rm target/pytest/build/wheel
    rm target/pytest/build/wheel.exe

    cd ../../..

    debug "üî∑ _____ Setting up tabsdata pytest python path..."
    debug "üöÄ python ${PROJECT_PY_TD_SDK_FOLDER}/tests_tabsdata/bootest.py"
    output = exec --fail-on-error python ${PROJECT_PY_TD_SDK_FOLDER}tests_tabsdata/bootest.py
    debug "üì¶ The received pythonpath is ${output.stdout}"
    pythonpath = set ${output.stdout}
    debug "‚úÖ Python system path will be added: ${pythonpath}"
    old_pythonpath = get_env PYTHONPATH
    debug "‚úÖ Python system path before adjusting: ${old_pythonpath}"
    os_name = get_env OS
    is_windows = contains ${os_name} "Windows"
    if ${is_windows}
        separator = set ";"
    else
        separator = set ":"
    end
    new_pythonpath = concat ${pythonpath} ${separator} ${old_path}
    debug "‚úÖ Python system path after adjusting: ${new_pythonpath}"
    set_env PYTHONPATH ${new_pythonpath}
    set_pythonpath = get_env PYTHONPATH
    debug "üîÖ Python system path persisted: ${set_pythonpath}"

    debug "üî∑ _____ Setting up tabsdata development package mode..."
    set_env TD_TABSDATA_DEV_PKG ${PROJECT_TABSDATA_ROOT_FOLDER}
    set_td_tabsdata_dev_pkg = get_env TD_TABSDATA_DEV_PKG
    debug "üîÖ tabsdata development python package location set to: ${set_td_tabsdata_dev_pkg}"

    debug "üî∑ _____ Setting up tabsdata_mongodb development package mode..."
    set_env TD_TABSDATA_MONGODB_DEV_PKG ${PROJECT_PY_TABSDATA_MONGODB_FOLDER}
    set_td_tabsdata_mongodb_dev_pkg = get_env TD_TABSDATA_MONGODB_DEV_PKG
    debug "üîÖ tabsdata_mongodb development python package location set to: ${set_td_tabsdata_mongodb_dev_pkg}"

    debug "üî∑ _____ Setting up tabsdata_salesforce development package mode..."
    set_env TD_TABSDATA_SALESFORCE_DEV_PKG ${PROJECT_PY_TABSDATA_SALESFORCE_FOLDER}
    set_td_tabsdata_salesforce_dev_pkg = get_env TD_TABSDATA_SALESFORCE_DEV_PKG
    debug "üîÖ tabsdata_salesforce development python package location set to: ${set_td_tabsdata_salesforce_dev_pkg}"

    debug "üî∑ _____ Setting up tabsdata_snowflake development package mode..."
    set_env TD_TABSDATA_SNOWFLAKE_DEV_PKG ${PROJECT_PY_TABSDATA_SNOWFLAKE_FOLDER}
    set_td_tabsdata_snowflake_dev_pkg = get_env TD_TABSDATA_SNOWFLAKE_DEV_PKG
    debug "üîÖ tabsdata_snowflake development python package location set to: ${set_td_tabsdata_snowflake_dev_pkg}"
    ''']

[tasks.start_pytest_tabsdata]
category = "02 - Test"
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    debug "üî∑ _____ Starting tabsdata server (pytest)..."
    if is_empty ${profile}
        build-folder = set "debug"
    else
        is_dev = eq ${profile} "dev"
        if ${is_dev}
            build-folder = set "debug"
        else
            build-folder = set ${profile}
        end
    end
    if not is_empty ${td-target}
        build-folder = set ${td-target}/${build-folder}
    end
    debug "üîÖ Using build folder ${build-folder}"
    os_family = os_family
    if eq ${os_family} "windows"
        tdserver = set "tdserver.exe"
    else
        tdserver = set "tdserver"
    end
    debug "üîÖ Using tdserver binary: '${os_family}' - '${tdserver}'"
    TDX = get_env TDX
    debug "üîÖ The tdserver process will use TDX location: '${TDX}'"
    debug "üöÄ ${ROOT_PROJECT_TABSDATA_FOLDER}/target/${build-folder}/${tdserver} start --instance pytest -- -- apiserver --address 127.0.0.1:2467"
    exec --fail-on-error ${ROOT_PROJECT_TABSDATA_FOLDER}/target/${build-folder}/${tdserver} start --instance pytest -- -- apiserver --address 127.0.0.1:2467
    ''']

[tasks.status_pytest_tabsdata]
category = "02 - Test"
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    debug "üî∑ _____ Starting tabsdata server (pytest)..."
    if is_empty ${profile}
        build-folder = set "debug"
    else
        is_dev = eq ${profile} "dev"
        if ${is_dev}
            build-folder = set "debug"
        else
            build-folder = set ${profile}
        end
    end
    if not is_empty ${td-target}
        build-folder = set ${td-target}/${build-folder}
    end
    debug "üîÖ Using build folder ${build-folder}"
    os_family = os_family
    if eq ${os_family} "windows"
        tdserver = set "tdserver.exe"
    else
        tdserver = set "tdserver"
    end
    debug "üîÖ Using tdserver binary: '${os_family}' - '${tdserver}'"
    debug "üöÄ ${ROOT_PROJECT_TABSDATA_FOLDER}/target/${build-folder}/${tdserver} status --instance pytest"
    exec --fail-on-error ${ROOT_PROJECT_TABSDATA_FOLDER}/target/${build-folder}/${tdserver} status --instance pytest
    ''']

[tasks.stop_pytest_tabsdata]
category = "02 - Test"
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    debug "üî∑ _____ Stopping tabsdata server (pytest)..."
    if is_empty ${profile}
        build-folder = set "debug"
    else
        is_dev = eq ${profile} "dev"
        if ${is_dev}
            build-folder = set "debug"
        else
            build-folder = set ${profile}
        end
    end
    if not is_empty ${td-target}
        build-folder = set ${td-target}/${build-folder}
    end
    debug "üîÖ Using build folder ${build-folder}"
    os_family = os_family
    if eq ${os_family} "windows"
        tdserver = set "tdserver.exe"
    else
        tdserver = set "tdserver"
    end
    debug "üîÖ Using tdserver binary: '${os_family}' - '${tdserver}'"
    debug "üöÄ ${ROOT_PROJECT_TABSDATA_FOLDER}/target/${build-folder}/${tdserver} stop --instance pytest"
    exec --fail-on-error ${ROOT_PROJECT_TABSDATA_FOLDER}/target/${build-folder}/${tdserver} stop --instance pytest
    ''']

[tasks.remove_pytest_tabsdata]
category = "02 - Test"
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    debug "üî∑ _____ Deleteing tabsdata server (pytest)..."
    home_folder = set ${HOME}
    instance_folder = set ${home_folder}/.tabsdata/instances/pytest
    debug "‚úÖ The tabsdata instance pytest folder is: ${instance_folder}"
    exists_instance_folder = is_path_exists ${instance_folder}
    if eq ${exists_instance_folder} true
        debug "‚úÖ The tabsdata instance pytest folder exists. Deleting it: ${target_dir}..."
        rm -r ${instance_folder}
        debug "‚úÖ The tabsdata instance pytest has been deleted: ${target_dir}!"
    else
        debug "‚úÖ The tabsdata instance pytest folder does not exist. Skipping deleting it: ${target_dir}..."
    end
    ''']

[tasks.post-test_py]
category = "02 - Test"
private = true
dependencies = ["set_mode_test_py"]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    no-server = set false
    arguments = split ${CARGO_MAKE_TASK_ARGS} ;
    for argument in ${arguments}
        if eq ${argument} "--no-server"
            no-server = set true
        end
    end

    if ${no-server}
        info "üöú Starting and stopping the pytest Tabsdata server skipped as requested."
    else
        cm_run_task stop_pytest_tabsdata
    end
    ''']

[tasks.cleanup-test_py]
category = "02 - Test"
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    exit_code = get_env TD_TESTS_CODE_PY
    if not eq ${exit_code} "0"
        info "‚åõÔ∏è Marking py tests run as failed: '${exit_code}'"
        code = exit ${exit_code}
    else
        info "‚åõÔ∏è Marking py tests run as successful: '${exit_code}'"
        exit 0
    end
    ''']