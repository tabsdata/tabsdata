#
# Copyright 2025 Tabs Data Inc.
#

env_scripts = [

    # Display build information
    '''
    #!@duckscript
    !include_files ./make/libraries/log.ds

    debug "üè∑Ô∏è CARGO_MANIFEST_DIR.............................: '${CARGO_MANIFEST_DIR}'"
    debug "üè∑Ô∏è CARGO_MAKE_PROFILE.............................: '${CARGO_MAKE_PROFILE}'"
    debug "üè∑Ô∏è CARGO_MAKE_CARGO_PROFILE.......................: '${CARGO_MAKE_CARGO_PROFILE}'"
    debug "üè∑Ô∏è CARGO_MAKE_RUST_CHANNEL........................: '${CARGO_MAKE_RUST_CHANNEL}'"
    debug "üè∑Ô∏è CARGO_MAKE_RUST_TARGET_ARCH....................: '${CARGO_MAKE_RUST_TARGET_ARCH}'"
    debug "üè∑Ô∏è CARGO_MAKE_RUST_TARGET_POINTER_WIDTH...........: '${CARGO_MAKE_RUST_TARGET_POINTER_WIDTH}'"
    debug "üè∑Ô∏è CARGO_MAKE_RUST_TARGET_VENDOR..................: '${CARGO_MAKE_RUST_TARGET_VENDOR}'"
    debug "üè∑Ô∏è CARGO_MAKE_RUST_TARGET_OS......................: '${CARGO_MAKE_RUST_TARGET_OS}'"
    debug "üè∑Ô∏è CARGO_MAKE_RUST_TARGET_ENV.....................: '${CARGO_MAKE_RUST_TARGET_ENV}'"
    debug "üè∑Ô∏è CARGO_MAKE_RUST_TARGET_TRIPLE..................: '${CARGO_MAKE_RUST_TARGET_TRIPLE}'"
    debug "üè∑Ô∏è CARGO_MAKE_CRATE_TARGET_TRIPLE.................: '${CARGO_MAKE_CRATE_TARGET_TRIPLE}'"
    debug "üè∑Ô∏è CARGO_MAKE_CRATE_TARGET_DIRECTORY..............: '${CARGO_MAKE_CRATE_TARGET_DIRECTORY}'"
    debug "üè∑Ô∏è CARGO_MAKE_CRATE_CUSTOM_TRIPLE_TARGET_DIRECTORY: '${CARGO_MAKE_CRATE_CUSTOM_TRIPLE_TARGET_DIRECTORY}'"
    fi
    ''',

    # Set up root folder
    '''
    #!@duckscript
    !include_files ./make/libraries/log.ds

    current_folder = pwd
    debug "‚úÖ Current project folder is: ${current_folder}"
    ko = set true
    while eq ${ko} true
        git_folder = concat ${current_folder} "/.git"
        if is_dir ${git_folder}
            debug "‚úÖ Root project folder is: ${current_folder}"
            set_env ROOT_PROJECT_FOLDER ${current_folder}
            ko = set false
        else
            parent_folder = dirname ${current_folder}
            if eq ${current_folder} ${parent_folder}
                assert_fail "Current folder not inside a Git repository"
            else
                current_folder = set ${parent_folder}
            end
        end
    end
    ''',

    # Set up rust settings (rustflags, target, toolchain, build folder, path)
    '''
    #!@duckscript
    !include_files ./make/libraries/log.ds

    os_name = get_env OS
    is_windows = contains ${os_name} "Windows"
    if ${is_windows}
        separator = set ";"
    else
        separator = set ":"
    end

    root_folder = get_env ROOT_PROJECT_FOLDER
    root_tabsdata_folder = set ${root_folder}
    root_tabsdata_salesforce_folder = set ${root_folder}/connectors/python/tabsdata_salesforce
    root_tabsdata_mongodb_folder = set ${root_folder}/connectors/python/tabsdata_mongodb

    if not is_empty ${td-target}
        set_env td-target ${td-target}
        set_env td-target-token "--target"
        td-target-token = set "--target"
    else
        unset_env td-target
        unset_env td-target-token
        td-target-token = set ""
    end
    debug "üîÖ Using td target: '${td-target}'"
    debug "üîÖ Using td target (token): '${td-target-token}'"

    if not is_empty ${td-toolchain}
        set_env td-toolchain ${td-toolchain}
        set_env td-toolchain-token "+"
    else
        unset_env td-toolchain
        unset_env td-toolchain-token
    end
    debug "üîÖ Using td toolchain: '${td-toolchain}'"
    debug "üîÖ Using td toolchain (token): '${td-toolchain-token}'"

    if not is_empty ${td-cross}
        use_cross = eq ${td-cross} "true"
        if ${use_cross}
            set_env td-cargo "cross"
        else
            set_env td-cargo "cargo"
        end
    else
        set_env td-cargo "cargo"
    end
    td-cargo = get_env td-cargo
    debug "üîÖ Using Cargo tool: '${td-cargo}'"

    set_env RUSTFLAGS ""
    td-profile = set ${profile}
    if is_empty ${profile}
        build-folder = set "debug"
        td-profile = set "dev"
    else
        is_dev = eq ${profile} "dev"
        if ${is_dev}
            build-folder = set "debug"
        else
            build-folder = set ${profile}
            is_assembly = eq ${profile} "assembly"
            if ${is_assembly}
                os_family = os_family
                flags = readfile ${root_folder}/.cargo/rustflags-${os_family}.cfg
                rust-flags = replace ${flags} "\n" " "
                set_env RUSTFLAGS ${rust-flags}
            end
        end
    end
    set_env td-profile ${td-profile}
    td-profile = get_env td-profile
    debug "‚úÖ Using tabsdata profile: '${td-profile}'"

    if not is_empty ${td-target}
        build-folder = set ${td-target}/${build-folder}
    end
    debug "‚úÖ Computed build folder is: '${build-folder}'"

    rustflags = get_env RUSTFLAGS
    debug "‚úÖ RUSTFLAGS environment variable is: '${rustflags}'"

    old_path = get_env PATH
    new_path = concat ${root_tabsdata_salesforce_folder}/target/${build-folder} ${separator} ${root_tabsdata_salesforce_folder}/target/pytest/build ${separator} ${old_path}
    new_path = concat ${root_tabsdata_mongodb_folder}/target/${build-folder} ${separator} ${root_tabsdata_mongodb_folder}/target/pytest/build ${separator} ${old_path}
    new_path = concat ${root_tabsdata_folder}/target/${build-folder} ${separator} ${root_tabsdata_folder}/target/pytest/build ${separator} ${old_path}
    set_env PATH ${new_path}
    set_path = get_env PATH
    debug "‚úÖ System PATH: ${set_path}"

    is_musl = eq ${td-target} "x86_64-unknown-linux-musl"
    if ${is_musl}
        PROJECT_ROOT_CARGO_TOML = set "./Cargo.toml"
        PROJECT_MACROS_CARGO_TOML = set "./macros/Cargo.toml"
        set_env PROJECT_ROOT_CARGO_TOML ${PROJECT_ROOT_CARGO_TOML}
        set_env PROJECT_MACROS_CARGO_TOML ${PROJECT_MACROS_CARGO_TOML}
    end
    PROJECT_ROOT_CARGO_TOML = get_env PROJECT_ROOT_CARGO_TOML
    PROJECT_MACROS_CARGO_TOML = get_env PROJECT_MACROS_CARGO_TOML
    debug "‚úÖ Materialized PROJECT_ROOT_CARGO_TOML: '${PROJECT_ROOT_CARGO_TOML}'"
    debug "‚úÖ Materialized PROJECT_MACROS_CARGO_TOML: '${PROJECT_MACROS_CARGO_TOML}'"

    if not is_empty ${macros-features}
        macros-test-features = concat "dummy" "," ${macros-features}
    else
        macros-test-features = set "td-test"
    end
    if not is_empty ${modules-features}
        modules-test-features = concat "dummy" "," ${modules-features}
        modules-test-features-test_logging = concat "dummy" "," ${modules-features} "," "test_logging"
        modules-test-features-test_tower_metadata = concat "dummy" "," ${modules-features} "," "test_tower_metadata"
    else
        modules-test-features = set "td-test"
        modules-test-features-test_logging = set "td-test,test_logging"
        modules-test-features-test_tower_metadata = set "td-test,test_tower_metadata"
    end

    set_env macros-test-features ${macros-test-features}
    set_env modules-test-features ${modules-test-features}
    set_env modules-test-features-test_logging ${modules-test-features-test_logging}
    set_env modules-test-features-test_tower_metadata ${modules-test-features-test_tower_metadata}

    macros-test-features = get_env macros-test-features
    modules-test-features = get_env modules-test-features
    modules-test-features-test_logging = get_env modules-test-features-test_logging
    modules-test-features-test_tower_metadata = get_env modules-test-features-test_tower_metadata

    debug "‚úÖ Using 'macros-test-features': ${macros-test-features}"
    debug "‚úÖ Using 'modules-test-features': ${modules-test-features}"
    debug "‚úÖ Using 'modules-test-features-test_logging': ${modules-test-features-test_logging}"
    debug "‚úÖ Using 'modules-test-features-test_tower_metadata': ${modules-test-features-test_tower_metadata}"
    ''',

    # Check path
    '''
    #!@duckscript
    !include_files ./make/libraries/log.ds

    PATH = get_env PATH
    debug "‚úÖ Current PATH: ${PATH}"
    ''',

    # Set up python markers
    '''
    #!@duckscript
    !include_files ./make/libraries/log.ds

    MARKERS = get_env MARKERS
    no_markers = eq ${MARKERS} ""
    if ${no_markers}
        set_env MARKERS ""
    end
    debug "‚úÖ Using markers: '${MARKERS}'"
    ''',

    # Set up the TDX tests environment variable
    '''
    #!@duckscript
    !include_files ./make/libraries/log.ds

    tmp_dir = temp_dir
    tmp_folder = random_text 16
    tdx = join_path ${tmp_dir} ${tmp_folder} tdx
    set_env TDX ${tdx}
    TDX = get_env TDX
    debug "‚úÖ Using TDX temporary folder: '${TDX}'"
    ''']