#
# Copyright 2024 Tabs Data Inc.
#

extend = [
    { path = "./make/fragments/tasks/permit_rs.toml" },
    { path = "./make/fragments/tasks/permit_py.toml" },

    { path = "./make/fragments/tasks/clean_rs.toml" },
    { path = "./make/fragments/tasks/clean_py.toml" },

    { path = "./make/fragments/tasks/license_rs.toml" },
    { path = "./make/fragments/tasks/license_py.toml" },

    { path = "./make/fragments/tasks/lock_rs.toml" },
    { path = "./make/fragments/tasks/lock_py.toml" },

    { path = "./make/fragments/tasks/build_rs.toml" },
    { path = "./make/fragments/tasks/build_py.toml" },

    { path = "./make/fragments/tasks/outdated_rs.toml" },
    { path = "./make/fragments/tasks/outdated_py.toml" },

    { path = "./make/fragments/tasks/test_rs.toml" },
    { path = "./make/fragments/tasks/test_py.toml" },

    { path = "./make/fragments/tasks/book.toml" },

    { path = "./make/fragments/aliases/custom.toml" },
]

[tasks.permit]
category = "00 - Verify"
description = "Verify that all essential language tools are available"
run_task = [
    { name = [
        "permit_py",
        "permit_rs",
    ] }
]

[tasks.clean]
category = "01 - Clean"
description = "Remove temporary, build, and target folders"
run_task = [
    { name = [
        "clean_rs",
        "clean_py",
    ] }
]

[tasks.license]
category = "06 - Compliance"
description = "Generate the dependencies' license files"
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
dependencies = ["set_mode_license"]
script_runner = "@duckscript"
script = [
    '''
    license = get_env TD_LICENSE
    if eq ${license} "true"
        cm_run_task license_rs
        cm_run_task license_py
    end

    exec --fail-on-error python ./devutils/automation/tasks/makers/td-scripts/report_licenses.py
    ''']

[tasks.set_mode_license]
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    license = get_env TD_LICENSE
    license_empty = is_empty ${license}
    license_true = eq ${license} "true"
    license = set ${license_empty} or ${license_true}
    if ${license}
        set_env TD_LICENSE "true"
    else
        set_env TD_LICENSE "false"
    end
    TD_LICENSE = get_env TD_LICENSE
    debug "üîÖ Using td license: '${TD_LICENSE}'"
    ''']

[tasks.lock]
category = "02 - Tidy"
description = "Generate the dependencies lock files"
run_task = [
    { name = [
        "lock_rs",
        "lock_py",
    ] }
]

[tasks.build]
category = "03 - Build"
description = "Compile and build from source code"
run_task = [
    { name = [
        "build_rs",
        "build_py",
    ] }
]

[tasks.link]
category = "03 - Build"
description = "Generate dynamic libraries from source code"
run_task = [
    { name = [
        "link_rs",
        "link_py",
    ] }
]

[tasks.egg]
category = "03 - Build"
description = "Generate editablue builds from source code"
run_task = [
    { name = [
        "egg_rs",
        "egg_py",
    ] }
]

[tasks.outdated]
category = "04 - Check"
description = "Find outdated dependencies"
run_task = [
    { name = [
        "outdated_rs",
        "outdated_py",
    ] }
]

[tasks.test]
category = "05 - Test"
description = "Run unit tests"
run_task = [
    { name = [
        "test_rs",
        "test_py",
    ] }
]

[tasks.deploy]
category = "80 - Install"
description = "Build and install a local assembly"
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    info "üõ†Ô∏è Configuring..."
    set_env RUST_BACKTRACE "1"
    set_env RUST_LOG "error"
    set_env RUSTDOC_LOG "error"
    set_env RUST_TEST_THREADS "16"
    set_env TABSDATA_ATTACH "false"
    set_env SWAGGER_UI_OVERWRITE_FOLDER "server/binaries/td-server/resources/swagger"
    set_env PYTEST_MAXIMUM_RETRY_COUNT "16"
    set_env TD_CLI_SHOW "false"
    set_env TD_SHOW_ENV "false"
    set_env LOG_CRATE_TM_WORKSPACE "false"
    set_env TD_DISABLE_OPENAPI_DOCS_ENDPOINT "false"
    set_env REQUIRE_SERVER_BINARIE "true"
    set_env REQUIRE_THIRD_PARTY "false"
    set_env REQUIRE_PYDOC_CSV "false"
    set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "false"
    set_env TD_SKIP_NON_EXISTING_ASSETS "false"
    set_env PYTHON_IGNORE_UNAVAILABLE_PUBLIC_PACKAGES "true"
    set_env TD_PYTHON_LINKED_TO_REPOSITORY "false"
    set_env TD_INHERIT_TABSDATA_PACKAGES "false"
    set_env TD_REMOTE_DEBUG "false"

    td_ui_mode = get_env TD_UI_MODE
    if ${td_ui_mode}
        info "‚òÇÔ∏è TD_UI_MODE set. Using '${td_ui_mode}' for install tasks..."
    else
        info "‚òÇÔ∏è TD_UI_MODE not set. Using 'internal' for install tasks..."
        set_env TD_UI_MODE "internal"
    end

    info "‚úÇÔ∏èÔ∏è Uninstalling..."
    cm_run_task uninstall
    debug "üöÄ pip uninstall tabsdata --yes"
    exec --fail-on-error pip uninstall tabsdata --yes
    connectors = glob_array ${CONNECTORS_PY_ROOT_FOLDER}/tabsdata_*
    for connector in ${connectors}
        is_connector = is_dir ${connector}
        if ${is_connector}
            connector_name = basename ${connector}
            connector_package = replace ${connector_name} "_" "-"
            debug "üöÄ pip uninstall ${connector_package} --yes"
            exec --fail-on-error pip uninstall ${connector_package} --yes
        end
    end

    info "üßπÔ∏è Cleaning..."
    cm_run_task clean

    info "üèïÔ∏è Installing..."
    cm_run_task install

    os = get_env OS
    if ${os}
        lower_os = lowercase ${os}
        contains_win = contains ${lower_os} "windows"
        if ${contains_win}
            exec cls
        else
            exec clear
        end
    else
        exec clear
    end

    lines = array
    array_push ${lines} "üéä Local tabsdata successfully deployed!"
    message = array_join ${lines} "\n"
    info ${message}

    lines = array
    array_push ${lines} ""
    array_push ${lines} ""
    array_push ${lines} "‚ùó Set the environment variables below for a better user experience:"
    array_push ${lines} ""
    array_push ${lines} "export PYTHON_IGNORE_UNAVAILABLE_PUBLIC_PACKAGES=true"
    array_push ${lines} "export TD_CLI_SHOW=true"
    array_push ${lines} "export TD_IGNORE_CONNECTOR_REQUIREMENTS=true"
    array_push ${lines} "export TD_INHERIT_TABSDATA_PACKAGES=true"
    array_push ${lines} "export TD_PYTHON_LINKED_TO_REPOSITORY=false"
    array_push ${lines} "export TD_SKIP_NON_EXISTING_ASSETS=true"
    message = array_join ${lines} "\n"
    info ${message}
    ''']

## wip...

#####

[tasks.duck]
cwd = "${ROOT_PROJECT_TABSDATA_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds
    ''']

[tasks.env]
cwd = "${ROOT_PROJECT_TABSDATA_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    env_keys = array
    array_push ${env_keys} CARGO_MAKE
    array_push ${env_keys} CARGO_MAKE_TASK
    array_push ${env_keys} CARGO_MAKE_TASK_ARGS
    array_push ${env_keys} CARGO_MAKE_CURRENT_TASK_NAME
    array_push ${env_keys} CARGO_MAKE_CURRENT_TASK_INITIAL_MAKEFILE
    array_push ${env_keys} CARGO_MAKE_CURRENT_TASK_INITIAL_MAKEFILE_DIRECTORY
    array_push ${env_keys} CARGO_MAKE_COMMAND
    array_push ${env_keys} CARGO_MAKE_WORKING_DIRECTORY
    array_push ${env_keys} CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY
    array_push ${env_keys} CARGO_MAKE_PROFILE
    array_push ${env_keys} CARGO_MAKE_ADDITIONAL_PROFILES
    array_push ${env_keys} CARGO_MAKE_PROJECT_NAME
    array_push ${env_keys} CARGO_MAKE_PROJECT_VERSION
    array_push ${env_keys} CARGO_MAKE_CARGO_HOME
    array_push ${env_keys} CARGO_MAKE_CARGO_PROFILE
    array_push ${env_keys} CARGO_MAKE_RUST_VERSION
    array_push ${env_keys} CARGO_MAKE_RUST_CHANNEL
    array_push ${env_keys} CARGO_MAKE_RUST_TARGET_ARCH
    array_push ${env_keys} CARGO_MAKE_RUST_TARGET_ENV
    array_push ${env_keys} CARGO_MAKE_RUST_TARGET_OS
    array_push ${env_keys} CARGO_MAKE_RUST_TARGET_POINTER_WIDTH
    array_push ${env_keys} CARGO_MAKE_RUST_TARGET_VENDOR
    array_push ${env_keys} CARGO_MAKE_RUST_TARGET_TRIPLE
    array_push ${env_keys} CARGO_MAKE_CRATE_TARGET_DIRECTORY
    array_push ${env_keys} CARGO_MAKE_CRATE_CUSTOM_TRIPLE_TARGET_DIRECTORY
    array_push ${env_keys} CARGO_MAKE_CRATE_HAS_DEPENDENCIES
    array_push ${env_keys} CARGO_MAKE_CRATE_IS_WORKSPACE
    array_push ${env_keys} CARGO_MAKE_CRATE_WORKSPACE_MEMBERS
    array_push ${env_keys} CARGO_MAKE_CRATE_CURRENT_WORKSPACE_MEMBER
    array_push ${env_keys} CARGO_MAKE_CRATE_LOCK_FILE_EXISTS
    array_push ${env_keys} CARGO_MAKE_CRATE_TARGET_TRIPLE
    array_push ${env_keys} CARGO_MAKE_WORKSPACE_PACKAGE_NAME
    array_push ${env_keys} CARGO_MAKE_WORKSPACE_PACKAGE_VERSION
    array_push ${env_keys} CARGO_MAKE_WORKSPACE_PACKAGE_DESCRIPTION
    array_push ${env_keys} CARGO_MAKE_WORKSPACE_PACKAGE_LICENSE
    array_push ${env_keys} CARGO_MAKE_WORKSPACE_PACKAGE_DOCUMENTATION
    array_push ${env_keys} CARGO_MAKE_WORKSPACE_PACKAGE_HOMEPAGE
    array_push ${env_keys} CARGO_MAKE_WORKSPACE_PACKAGE_REPOSITORY
    array_push ${env_keys} CARGO_MAKE_CI
    array_push ${env_keys} CARGO_MAKE_PR
    array_push ${env_keys} CARGO_MAKE_CI_BRANCH_NAME
    array_push ${env_keys} CARGO_MAKE_CI_VENDOR
    array_push ${env_keys} CARGO_MAKE_DUCKSCRIPT_VERSION
    array_push ${env_keys} CARGO_MAKE_DUCKSCRIPT_SDK_VERSION
    array_push ${env_keys} CARGO_MAKE_CRATE_NAME
    array_push ${env_keys} CARGO_MAKE_CRATE_FS_NAME
    array_push ${env_keys} CARGO_MAKE_CRATE_VERSION
    array_push ${env_keys} CARGO_MAKE_CRATE_DESCRIPTION
    array_push ${env_keys} CARGO_MAKE_CRATE_LICENSE
    array_push ${env_keys} CARGO_MAKE_CRATE_DOCUMENTATION
    array_push ${env_keys} CARGO_MAKE_CRATE_HOMEPAGE
    array_push ${env_keys} CARGO_MAKE_CRATE_REPOSITORY
    array_push ${env_keys} CARGO_MAKE_GIT_BRANCH
    array_push ${env_keys} CARGO_MAKE_GIT_USER_NAME
    array_push ${env_keys} CARGO_MAKE_GIT_USER_EMAIL
    array_push ${env_keys} CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH
    array_push ${env_keys} CARGO_MAKE_GIT_HEAD_LAST_COMMIT_HASH_PREFIX

    for env_key in ${env_keys}
        env_value = get_env ${env_key}
        debug "‚òòÔ∏è ${env_key} :: ${env_value}"
    end
    ''']

[tasks.make]
run_task = [
    { name = [
        "make_rs",
        "make_py"
    ] }
]

[tasks.make_rs]
run_task = [
    { name = [
        "clean_rs",
        "compose_rs"], condition = { env = { "CLEAN" = "true" } } },
    { name = [
        "compose_rs"
    ] }
]

[tasks.make_py]
run_task = [
    { name = [
        "clean_py",
        "compose_py"], condition = { env = { "CLEAN" = "true" } } },
    { name = [
        "compose_py"
    ] }
]

[tasks.compose]
private = true
run_task = [
    { name = [
        "compose_rs",
        "compose_py",
    ] }
]

[tasks.compose_rs]
private = true
run_task = [
    { name = [
        "build_rs",
        "test_rs",
        "check_rs",
        "fmt_rs",
        "license_rs",
        "outdated_rs",
        "deny_rs",
        "audit_rs",
        "pants_rs",
        "machete_rs",
        "clippy_rs",
    ] }
]

[tasks.compose_py]
private = true
run_task = [
    { name = [
        "build_py",
        "test_py",
        "check_py",
        "fmt_py",
        "license_py",
        "outdated_py",
        "deny_py",
        "audit_py",
        "pants_py",
        "machete_py",
        "clippy_py",
    ] }
]

[tasks.rstest]
alias = "rstest_modules"

[tasks.rstest_logging]
alias = "rstest_modules_logging"

[tasks.rstest_tower]
alias = "rstest_modules_tower"

[tasks.rstest_macros]
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
command = "cargo"
args = ["test", "--locked", "@@split(CARGO_MAKE_TASK_ARGS, ;)", "--profile", "${td-profile}", "--manifest-path", "${PROJECT_RS_TD_MACROS_CARGO_TOML}", "--features", "${macros-test-features}", "--", "--nocapture"]

[tasks.rstest_modules]
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
command = "cargo"
args = ["test", "--locked", "@@split(CARGO_MAKE_TASK_ARGS, ;)", "--profile", "${td-profile}", "--manifest-path", "${PROJECT_RS_TABSDATA_CARGO_TOML}", "--features", "${modules-test-features}", "--", "--nocapture"]

[tasks.rstest_modules_logging]
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
command = "cargo"
args = ["test", "--locked", "@@split(CARGO_MAKE_TASK_ARGS, ;)", "--profile", "${td-profile}", "--manifest-path", "${PROJECT_RS_TABSDATA_CARGO_TOML}", "--features", "${modules-test-features-test_logging}", "--", "test_logging", "--", "--nocapture"]

[tasks.rstest_modules_tower]
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
command = "cargo"
args = ["test", "--locked", "@@split(CARGO_MAKE_TASK_ARGS, ;)", "--profile", "${td-profile}", "--manifest-path", "${PROJECT_RS_TABSDATA_CARGO_TOML}", "--features", "${modules-test-features-test_tower_metadata}", "--", "test_tower_metadata", "--", "--nocapture"]

[tasks.rsnext]
alias = "rsnext_modules"

[tasks.rsnext_logging]
alias = "rsnext_modules_logging"

[tasks.rsnext_tower]
alias = "rsnext_modules_tower"

[tasks.rsnext_macros]
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
command = "cargo"
args = ["nextest", "run", "--locked", "--nocapture", "--cargo-profile", "${td-profile}", "--manifest-path", "${PROJECT_RS_TD_MACROS_CARGO_TOML}", "--features", "${macros-test-features}", "@@split(CARGO_MAKE_TASK_ARGS, ;)"]

[tasks.rsnext_modules]
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
command = "cargo"
args = ["nextest", "run", "--locked", "--nocapture", "--cargo-profile", "${td-profile}", "--manifest-path", "${PROJECT_RS_TABSDATA_CARGO_TOML}", "--features", "${modules-test-features}", "@@split(CARGO_MAKE_TASK_ARGS, ;)"]

[tasks.rsnext_modules_logging]
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
command = "cargo"
args = ["nextest", "run", "--locked", "--nocapture", "--cargo-profile", "${td-profile}", "--manifest-path", "${PROJECT_RS_TABSDATA_CARGO_TOML}", "--features", "${modules-test-features-test_logging}", "--", "test_logging", "@@split(CARGO_MAKE_TASK_ARGS, ;)"]

[tasks.rsnext_modules_tower]
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
command = "cargo"
args = ["nextest", "run", "--locked", "--nocapture", "--cargo-profile", "${td-profile}", "--manifest-path", "${PROJECT_RS_TABSDATA_CARGO_TOML}", "--features", "${modules-test-features-test_tower_metadata}", "--", "test_tower_metadata", "@@split(CARGO_MAKE_TASK_ARGS, ;)"]

[tasks.pytest]
dependencies = ["set_mode_test_py"]
cwd = "${PROJECT_PY_TD_SDK_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    verbose = get_env TD_VERBOSE
    compile = get_env TD_COMPILE

    if eq ${compile} "true"
        echo "_____ Compiling first..."
        cm_run_task build
    end

    echo "_____ Testing next..."
    arguments = set ${@}
    parameters = array
    configuration = temp_file "ini"
    found = set false
    for argument in ${arguments}
        if ${found}
            array_push ${parameters} ${argument}
            appendfile ${configuration} ${argument}\n
        else
            if eq ${argument} "--"
                found = set true
            end
        end
    end
    echo "_____ Running command: pytest @${configuration}"
    exec --fail-on-error pytest @${configuration}
    rm ${configuration}
    ''']

[tasks.check]
run_task = [
    { name = [
        "check_rs",
        "check_py"
    ] }
]

[tasks.check_rs]
run_task = [
    { name = [
        "check_rs_macros",
        "check_rs_modules"
    ] }
]

[tasks.check_py]

[tasks.check_rs_macros]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} check --locked --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} check --locked --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML}
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} check --locked --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} check --locked --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML}
        end
    end
    ''']

[tasks.check_rs_modules]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} check --locked --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TABSDATA_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} check --locked --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TABSDATA_CARGO_TOML}
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} check --locked --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TABSDATA_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} check --locked --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TABSDATA_CARGO_TOML}
        end
    end
    ''']

[tasks.fmt]
run_task = [
    { name = [
        "fmt_rs",
        "fmt_py"
    ] }
]

[tasks.fmt_rs]
run_task = [
    { name = [
        "fmt_rs_macros",
        "fmt_rs_modules"
    ] }
]

[tasks.fmt_py]
run_task = [
    { name = [
        "fmt_py_flake8_conventions",
        "fmt_py_flake8_complexity",
        "fmt_py_black",
        "fmt_py_isort"
    ] }
]

[tasks.fmt_rs_macros]
private = true
command = "cargo"
args = ["fmt", "--manifest-path", "${PROJECT_RS_TD_MACROS_CARGO_TOML}", "--all", "--", "--check"]

[tasks.fmt_rs_modules]
private = true
command = "cargo"
args = ["fmt", "--manifest-path", "${PROJECT_RS_TABSDATA_CARGO_TOML}", "--all", "--", "--check"]

[tasks.fmt_py_flake8_conventions]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: ${ENV_PREFIX}flake8 --select=E9,F63,F7,F82 --ignore=E203,W503 --show-source --statistics . --extend-exclude .tabsdata,.venv,dist,build,tabsdata-ui,target,venv,test_*,tests_*"
    exec --fail-on-error ${ENV_PREFIX}flake8 --select=E9,F63,F7,F82 --ignore=E203,W503 --show-source --statistics . --extend-exclude .tabsdata,.venv,dist,build,tabsdata-ui,target,venv,test_*,tests_*
    ''']

[tasks.fmt_py_flake8_complexity]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: ${ENV_PREFIX}flake8 --max-complexity=10 --ignore=E203,W503 --max-line-length=88 --statistics  . --extend-exclude .tabsdata,.venv,dist,build,tabsdata-ui,target,venv,test_*,tests_*"
    exec --fail-on-error ${ENV_PREFIX}flake8 --max-complexity=10 --ignore=E203,W503 --max-line-length=88 --statistics  . --extend-exclude .tabsdata,.venv,dist,build,tabsdata-ui,target,venv,test_*,tests_*
    ''']

[tasks.fmt_py_black]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: ${ENV_PREFIX}black --preview --enable-unstable-feature string_processing --check . --extend-exclude .tabsdata,.venv,dist,build,tabsdata-ui,target,venv,test_*,tests_* --force-exclude \\.pyi$"
    exec --fail-on-error ${ENV_PREFIX}black --preview --enable-unstable-feature string_processing --check . --extend-exclude .tabsdata,.venv,dist,build,tabsdata-ui,target,venv,test_*,tests_* --force-exclude \\.pyi$
    ''']

[tasks.fmt_py_isort]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: ${ENV_PREFIX}isort --check . --extend-skip .tabsdata --extend-skip .venv --extend-skip dist --extend-skip build --extend-skip tabsdata-ui --extend-skip target --extend-skip venv --extend-skip-glob test_* --extend-skip-glob tests_*"
    exec --fail-on-error ${ENV_PREFIX}isort --check . --extend-skip .tabsdata --extend-skip .venv --extend-skip dist --extend-skip build --extend-skip tabsdata-ui --extend-skip target --extend-skip venv --extend-skip-glob test_* --extend-skip-glob tests_*"
    ''']

[tasks.format]
run_task = [
    { name = [
        "format_rs",
        "format_py"
    ] }
]

[tasks.format_rs]

[tasks.format_py]
run_task = [
    { name = [
        "format_py_black",
        "format_py_isort"
    ] }
]

[tasks.format_py_black]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: ${ENV_PREFIX}black --preview --enable-unstable-feature string_processing . --force-exclude \\.pyi$"
    exec --fail-on-error ${ENV_PREFIX}black --preview --enable-unstable-feature string_processing . --force-exclude \\.pyi$
    ''']

[tasks.format_py_isort]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: ${ENV_PREFIX}isort . --extend-skip .tabsdata --extend-skip .venv --extend-skip dist --extend-skip build --extend-skip tabsdata-ui --extend-skip target --extend-skip venv --extend-skip-glob test_* --extend-skip-glob tests_*"
    exec --fail-on-error ${ENV_PREFIX}isort . --extend-skip .tabsdata --extend-skip .venv --extend-skip dist --extend-skip build --extend-skip tabsdata-ui --extend-skip target --extend-skip venv --extend-skip-glob test_* --extend-skip-glob tests_*
    ''']

[tasks.sourcetrack]
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    exists = is_path_exists ./variant/devutils/automation/tasks/makers/td-scripts/sourcetrack.py
    if eq ${exists} true
        exec --fail-on-error python ./variant/devutils/automation/tasks/makers/td-scripts/sourcetrack.py
    else
        warn "Generating the source track metadata file does not apply for this project"
    end
    ''']

[tasks.deny_rs]
run_task = [
    { name = [
        "deny_rs_macros",
        "deny_rs_modules"
    ] }
]

[tasks.deny_py]

[tasks.deny_rs_macros]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error cargo deny --locked --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
        else
            exec --fail-on-error cargo +${td-toolchain} deny --locked --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error cargo deny --locked --target ${td-target} --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
        else
            exec --fail-on-error cargo +${td-toolchain} deny --locked --target ${td-target} --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
        end
    end
    ''']

[tasks.deny_rs_modules]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error cargo deny --locked --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_TABSDATA_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
        else
            exec --fail-on-error cargo +${td-toolchain} deny --locked --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_TABSDATA_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error cargo deny --locked --target ${td-target} --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_TABSDATA_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
        else
            exec --fail-on-error cargo +${td-toolchain} deny --locked --target ${td-target} --log-level error --workspace --all-features --manifest-path ${PROJECT_RS_TABSDATA_CARGO_TOML} check --config ${DENY_TOML} bans advisories sources
        end
    end
    ''']

[tasks.audit]
run_task = [
    { name = [
        "audit_rs",
        "audit_py"
    ] }
]

[tasks.audit_rs]
run_task = [
    { name = [
        "audit_rs_macros",
        "audit_rs_modules"
    ] }
]

[tasks.audit_py]

[tasks.audit_rs_macros]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
command = "cargo"
args = ["audit", "--file", "${AUDIT_TOML}"]

[tasks.audit_rs_modules]
private = true
cwd = "${ROOT_PROJECT_TABSDATA_FOLDER}"
command = "cargo"
args = ["audit", "--file", "${AUDIT_TOML}"]

[tasks.pants]
run_task = [
    { name = [
        "pants_rs",
        "pants_py"
    ] }
]

[tasks.pants_rs]
run_task = [
    { name = [
        "pants_rs_macros",
        "pants_rs_modules"
    ] }
]

[tasks.pants_py]

[tasks.pants_rs_macros]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
command = "cargo"
args = ["pants", "--ignore-file", "${PANTS_JSON}", "--tomlfile", "${PROJECT_RS_TD_MACROS_CARGO_TOML}"]

[tasks.pants_rs_modules]
private = true
cwd = "${ROOT_PROJECT_TABSDATA_FOLDER}"
command = "cargo"
args = ["pants", "--ignore-file", "${PANTS_JSON}", "--tomlfile", "${PROJECT_RS_TABSDATA_CARGO_TOML}"]

[tasks.machete]
run_task = [
    { name = [
        "machete_rs",
        "machete_py"
    ] }
]

[tasks.machete_rs]
command = "cargo"
args = ["machete", "--with-metadata"]

[tasks.machete_py]

[tasks.clippy]
run_task = [
    { name = [
        "clippy_rs",
        "clippy_py"
    ] }
]

[tasks.clippy_rs]
run_task = [
    { name = [
        "clippy_rs_macros",
        "clippy_rs_modules"
    ] }
]

[tasks.clippy_py]

[tasks.clippy_rs_macros]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clippy --locked --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} -- -D warnings
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clippy --locked --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} -- -D warnings
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clippy --locked --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} -- -D warnings
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clippy --locked --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} -- -D warnings
        end
    end
    ''']

[tasks.clippy_rs_modules]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clippy --locked --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TABSDATA_CARGO_TOML} -- -D warnings
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clippy --locked --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TABSDATA_CARGO_TOML} -- -D warnings
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clippy --locked --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TABSDATA_CARGO_TOML} -- -D warnings
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clippy --locked --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TABSDATA_CARGO_TOML} -- -D warnings
        end
    end
    ''']

[tasks.fix]
run_task = [
    { name = [
        "fix_rs",
        "fix_py"
    ] }
]

[tasks.fix_rs]
run_task = [
    { name = [
        "fix_rs_macros",
        "fix_rs_modules"
    ] }
]

[tasks.fix_py]

[tasks.fix_rs_macros]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clippy --locked --fix --allow-dirty --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} -- -D warnings
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clippy --locked --fix --allow-dirty --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} -- -D warnings
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clippy --locked --fix --allow-dirty --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} -- -D warnings
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clippy --locked --fix --allow-dirty --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML} -- -D warnings
        end
    end
    ''']

[tasks.fix_rs_modules]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clippy --locked --fix --allow-dirty --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TABSDATA_CARGO_TOML} -- -D warnings
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clippy --locked --fix --allow-dirty --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TABSDATA_CARGO_TOML} -- -D warnings
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} clippy --locked --fix --allow-dirty --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TABSDATA_CARGO_TOML} -- -D warnings
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} clippy --locked --fix --allow-dirty --target ${td-target} --workspace --all-targets --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TABSDATA_CARGO_TOML} -- -D warnings
        end
    end
    ''']

[tasks.doc]
run_task = [
    { name = [
        "doc_rs",
        "doc_py"
    ] }
]

[tasks.doc_rs]
run_task = [
    { name = [
        "doc_rs_macros",
        "doc_rs_modules"
    ] }
]

[tasks.doc_py]
cwd = "${PROJECT_PY_TD_SDK_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: {ENV_PREFIX}mkdocs build"
    exec --fail-on-error ${ENV_PREFIX}mkdocs build
    ''']

[tasks.doc_rs_macros]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} doc --locked --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} doc --locked --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML}
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} doc --locked --target ${td-target} --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} doc --locked --target ${td-target} --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TD_MACROS_CARGO_TOML}
        end
    end
    ''']

[tasks.doc_rs_modules]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    if is_empty ${td-target}
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} doc --locked --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TABSDATA_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} doc --locked --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TABSDATA_CARGO_TOML}
       end
    else
        if is_empty ${td-toolchain}
            exec --fail-on-error ${td-cargo} doc --locked --target ${td-target} --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TABSDATA_CARGO_TOML}
        else
            exec --fail-on-error ${td-cargo} +${td-toolchain} doc --locked --target ${td-target} --workspace --all-features --profile ${td-profile} --manifest-path ${PROJECT_RS_TABSDATA_CARGO_TOML}
        end
    end
    ''']

[tasks.chrome]
run_task = [
    { name = [
        "chrome_rs",
        "chrome_py"
    ] }
]

[tasks.chrome_rs]
script = "open -b com.google.Chrome ${RUST_DOCS}"

[tasks.chrome_py]
cwd = "${PROJECT_PY_TD_SDK_FOLDER}"
script = "open -b com.google.Chrome ${PYTHON_DOCS}"

[tasks.opendoc]
run_task = [
    { name = [
        "opendoc_rs",
        "opendoc_py"
    ] }
]

[tasks.opendoc_rs]
script = "open ${RUST_DOCS}"

[tasks.opendoc_py]
cwd = "${PROJECT_PY_TD_SDK_FOLDER}"
script = "open ${PYTHON_DOCS}"

[tasks.examples]
command = "pwsh"
args = ["${PROJECT_PY_TD_SDK_FOLDER}examples/persons/persons.ps1", "${td-profile}"]

[tasks.package]
run_task = [
    { name = [
        "package_rs",
        "package_py",
    ] }
]

[tasks.package_rs]

[tasks.package_py]
run_task = [
    { name = [
        "package_py_tabsdata",
        "package_py_connectors",
    ] }
]

[tasks.package_py_tabsdata]
cwd = "${ROOT_PROJECT_TABSDATA_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    echo "Running command: python setup.py --quiet sdist --dist-dir target/python/dist --formats=tar bdist_wheel --dist-dir target/python/dist --compression stored"
    exec --fail-on-error python setup.py --quiet sdist --dist-dir target/python/dist --formats=tar bdist_wheel --dist-dir target/python/dist --compression stored
    ''']

[tasks.package_py_connectors]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    connectors = glob_array ${CONNECTORS_PY_ROOT_FOLDER}/tabsdata_*

    for connector in ${connectors}
        is_connector = is_dir ${connector}
        if ${is_connector}
            cd ${connector}
            debug "üöÄ python setup.py --quiet sdist --dist-dir target/python/dist --formats=tar bdist_wheel --dist-dir target/python/dist --compression stored"
            exec --fail-on-error python setup.py --quiet sdist --dist-dir target/python/dist --formats=tar bdist_wheel --dist-dir target/python/dist --compression stored
        end
    end
    ''']

[tasks.generate_pydoc_csv]
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    debug "üöÄ python ${GENERATE_PYDOC_CSV}"
    exec --fail-on-error python ${GENERATE_PYDOC_CSV}
    ''']

[tasks.copy_assets]
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    debug "üöÄ python ${COPY_ASSETS_PY}"
    exec --fail-on-error python ${COPY_ASSETS_PY}
    ''']

[tasks.assembly]
run_task = [
    { name = [
        "set_mode_assembly",
        "assembly_rs",
        "assembly_py"], condition = { env = { "TD_ON_GA" = "true" } } },
    { name = [
        "set_mode_assembly",
        "assembly_build",
        "sourcetrack",
        "assembly_rs",
        "assembly_py"] }
]

[tasks.set_mode_assembly]
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    compile = get_env TD_COMPILE
    compile_empty = is_empty ${compile}
    compile_true = eq ${compile} "true"
    on_ga = get_env TD_ON_GA
    on_ga_true = eq ${on_ga} "true"
    compile = set ${compile_empty} or ${compile_true}
    if ${on_ga_true}
        set_env TD_COMPILE "false"
    else
        if ${compile}
            set_env TD_COMPILE "true"
        else
            set_env TD_COMPILE "false"
        end
    end
    TD_COMPILE = get_env TD_COMPILE
    debug "üîÖ Using td compile: '${TD_COMPILE}'"
    ''']

[tasks.assembly_build]
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    compile = get_env TD_COMPILE
    if eq ${compile} "true"
        cm_run_task build
    end
    ''']

[tasks.assembly_rs]

[tasks.assembly_py]
run_task = [
    { name = [
        "assembly_py_tabsdata",
        "assembly_py_connectors",
    ] }
]

[tasks.assembly_py_tabsdata]
dependencies = ["license", "generate_pydoc_csv", "copy_assets"]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    cd "${ROOT_PROJECT_TABSDATA_FOLDER}"

    td_pypi_linked = get_env TD_PYTHON_LINKED_TO_REPOSITORY
    if eq ${td_pypi_linked} ""
        info "üîó Unespecified link to python repository status... defaulting to true"
        td_pypi_linked = set "true"
    else
        info "üîó Specified link to python repository status: ${td_pypi_linked}"
    end
    if eq ${td_pypi_linked} "true"
        set_env REQUIRE_SERVER_BINARIES "true"
        set_env REQUIRE_THIRD_PARTY "true"
        set_env REQUIRE_PYDOC_CSV "true"
        set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "false"
        set_env TD_SKIP_NON_EXISTING_ASSETS "false"
    else
        set_env REQUIRE_SERVER_BINARIES "false"
        set_env REQUIRE_THIRD_PARTY "false"
        set_env REQUIRE_PYDOC_CSV "false"
        set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "true"
        set_env TD_SKIP_NON_EXISTING_ASSETS "true"
    end
    # This must be false when using a local PyPi reopsitory.
    set_env PYTHON_IGNORE_UNAVAILABLE_PUBLIC_PACKAGES = "true"

    info "Running command: python setup.py --quiet sdist --dist-dir target/python/dist bdist_wheel --dist-dir target/python/dist"
    exec --fail-on-error python setup.py --quiet sdist --dist-dir target/python/dist bdist_wheel --dist-dir target/python/dist
    ''']

[tasks.assembly_py_connectors]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    connectors = glob_array ${CONNECTORS_PY_ROOT_FOLDER}/tabsdata_*

    for connector in ${connectors}
        is_connector = is_dir ${connector}
        if ${is_connector}
            cd ${connector}

            td_pypi_linked = get_env TD_PYTHON_LINKED_TO_REPOSITORY
            if eq ${td_pypi_linked} ""
                info "üîó Unespecified link to python repository status... defaulting to true"
                td_pypi_linked = set "true"
            else
                info "üîó Specified link to python repository status: ${td_pypi_linked}"
            end
            if eq ${td_pypi_linked} "true"
                set_env REQUIRE_SERVER_BINARIES "true"
                set_env REQUIRE_THIRD_PARTY "true"
                set_env REQUIRE_PYDOC_CSV "true"
                set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "false"
                set_env TD_SKIP_NON_EXISTING_ASSETS "false"
            else
                set_env REQUIRE_SERVER_BINARIES "false"
                set_env REQUIRE_THIRD_PARTY "false"
                set_env REQUIRE_PYDOC_CSV "false"
                set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "true"
                set_env TD_SKIP_NON_EXISTING_ASSETS "true"
            end
            # This must be false when using a local PyPi reopsitory.
            set_env PYTHON_IGNORE_UNAVAILABLE_PUBLIC_PACKAGES = "true"

            debug "üöÄ python setup.py --quiet sdist --dist-dir target/python/dist bdist_wheel --dist-dir target/python/dist"
            exec --fail-on-error python setup.py --quiet sdist --dist-dir target/python/dist bdist_wheel --dist-dir target/python/dist
        end
    end
    ''']

[tasks.wheels_4repo]
run_task = [
    { name = [
        "wheels_4repo_setup",
        "assembly",
        "wheels_rs",
        "wheels_py",
        "wheels_4repo_teardown"
    ] }
]

[tasks.wheels_4repo_setup]
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    set_env TD_PYTHON_LINKED_TO_REPOSITORY "true"

    set_env REQUIRE_SERVER_BINARIES "true"
    set_env REQUIRE_THIRD_PARTY "true"
    set_env REQUIRE_PYDOC_CSV "true"
    set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "false"
    set_env TD_SKIP_NON_EXISTING_ASSETS "false"

    set_env TD_WHEELS_FLAVOUR "4repo"
    ''']

[tasks.wheels_4repo_teardown]
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    exec python -c "from rich.console import Console; Console().clear()"

    lines = array
    array_push ${lines} "üéä Local tabsdata wheels successfully generated!"
    message = array_join ${lines} "\n"
    info ${message}

    lines = array
    array_push ${lines} ""
    array_push ${lines} ""
    array_push ${lines} "‚ùó The generated wheels are intended for use via a PyPI-compliant repository."
    array_push ${lines} "‚ùó Installing them directly using 'pip install <wheel>' will result in an incomplete or incorrect setup."
    array_push ${lines} "‚ùó Upload them using the standard 'twine upload <wheel>'."
    array_push ${lines} "‚ùó If you are using our devpi setup (http://localhost:3141/tabsdata/dev), set the environment variables below before installing."
    array_push ${lines} "‚ùó These variables must be set in every terminal where you will run the tabsdata cli or the tabsdata server."
    array_push ${lines} ""
    array_push ${lines} "export PIP_INDEX_URL=http://localhost:3141/tabsdata/dev/"
    array_push ${lines} "export UV_DEFAULT_INDEX=http://localhost:3141/tabsdata/dev/"
    array_push ${lines} ""
    array_push ${lines} "‚ùó Install the packages using the standard 'pip install <package>' command."
    array_push ${lines} "‚ùó If you are using multiple environments, remember to install the packages in each of them separately."
    array_push ${lines} ""
    array_push ${lines} "‚ùó Before starting any TabsData instance or using the cli, you must set the following environment variables."
    array_push ${lines} "‚ùó These variables must be set in every terminal where you will run the tabsdata cli or the tabsdata server."
    array_push ${lines} ""
    array_push ${lines} "export PIP_INDEX_URL=http://localhost:3141/tabsdata/dev/"
    array_push ${lines} "export UV_DEFAULT_INDEX=http://localhost:3141/tabsdata/dev/"
    array_push ${lines} "unset PYTHON_IGNORE_UNAVAILABLE_PUBLIC_PACKAGES"
    array_push ${lines} "unset REQUIRE_SERVER_BINARIES"
    array_push ${lines} "unset REQUIRE_THIRD_PARTY"
    array_push ${lines} "unset REQUIRE_PYDOC_CSV"
    array_push ${lines} "unset TD_CLI_SHOW"
    array_push ${lines} "unset TD_IGNORE_CONNECTOR_REQUIREMENTS"
    array_push ${lines} "unset TD_INHERIT_TABSDATA_PACKAGES"
    array_push ${lines} "unset TD_PYTHON_LINKED_TO_REPOSITORY"
    array_push ${lines} "unset TD_SKIP_NON_EXISTING_ASSETS"
    array_push ${lines} ""
    array_push ${lines} "‚ùó The following commands will install your local wheels on a 'td4repo' conda environment using a local devpi:"
    array_push ${lines} "‚ùó (Note: The finer details are left to you. The commands below assume you generated the wheels only with the 'wheels_4repo' task.)"
    array_push ${lines} ""
    array_push ${lines} "conda create -y --name td4repo python=3.12; conda activate td4repo"
    array_push ${lines} "cd ./target/wheels"
    array_push ${lines} "../../../tabsdata-ee/docker/devpi/install.sh"
    array_push ${lines} ""
    message = array_join ${lines} "\n"
    info ${message}
    ''']

[tasks.wheels_4whl]
run_task = [
    { name = [
        "wheels_4whl_setup",
        "assembly",
        "wheels_rs",
        "wheels_py",
        "wheels_4whl_teardown"
    ] }
]

[tasks.wheels_4whl_setup]
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    set_env TD_PYTHON_LINKED_TO_REPOSITORY "false"

    set_env REQUIRE_SERVER_BINARIES "true"
    set_env REQUIRE_THIRD_PARTY "true"
    set_env REQUIRE_PYDOC_CSV "true"
    set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "false"
    set_env TD_SKIP_NON_EXISTING_ASSETS "false"

    set_env TD_WHEELS_FLAVOUR "4whl"
    ''']

[tasks.wheels_4whl_teardown]
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    exec python -c "from rich.console import Console; Console().clear()"

    lines = array
    array_push ${lines} "üéä Local tabsdata wheels successfully generated!"
    message = array_join ${lines} "\n"
    info ${message}

    lines = array
    array_push ${lines} ""
    array_push ${lines} ""
    array_push ${lines} "‚ùó The generated wheels are not suitable for distribution via a PyPI-compliant repository."
    array_push ${lines} "‚ùó Installing them through such a repository will result in an incomplete or incorrect setup."
    array_push ${lines} ""
    array_push ${lines} "‚ùó Install all wheels directly using 'pip install <wheel>' for each file."
    array_push ${lines} "‚ùó If you are using multiple environments, remember to install the packages in each of them separately."
    array_push ${lines} ""
    array_push ${lines} "‚ùó Note: Dependencies between TabsData packages are not preserved in this mode; each wheel must be installed explicitly."
    array_push ${lines} "‚ùó Before starting any tabsdata instance or using the cli, you must set the following environment variables."
    array_push ${lines} "‚ùó These variables must be set in every terminal where you will run the tabsdata cli or the tabsdata server."
    array_push ${lines} ""
    array_push ${lines} "unset PIP_INDEX_URL"
    array_push ${lines} "unset UV_DEFAULT_INDEX"
    array_push ${lines} "export PYTHON_IGNORE_UNAVAILABLE_PUBLIC_PACKAGES=true"
    array_push ${lines} "export REQUIRE_SERVER_BINARIES=false"
    array_push ${lines} "export REQUIRE_THIRD_PARTY=false"
    array_push ${lines} "export REQUIRE_PYDOC_CSV=false"
    array_push ${lines} "export TD_CLI_SHOW=true"
    array_push ${lines} "export TD_IGNORE_CONNECTOR_REQUIREMENTS=true"
    array_push ${lines} "export TD_INHERIT_TABSDATA_PACKAGES=true"
    array_push ${lines} "export TD_PYTHON_LINKED_TO_REPOSITORY=false"
    array_push ${lines} "export TD_SKIP_NON_EXISTING_ASSETS=true"
    array_push ${lines} ""
    array_push ${lines} "‚ùó The following commands will install your local wheels on a 'td4whl' conda environment using a direct wheels:"
    array_push ${lines} "‚ùó (Note: The finer details are left to you. The commands below assume you generated the wheels only with the 'wheels_4whl' task.)"
    array_push ${lines} ""
    array_push ${lines} "conda env remove --name td4whl --yes; conda create -y --name td4whl python=3.12; conda activate td4whl"
    array_push ${lines} "cd ./target/wheels"
    array_push ${lines} "tar -xvf *.tar.gz"
    array_push ${lines} "python -m pip install --upgrade pip"
    array_push ${lines} "pip install --upgrade packaging pipx platformdirs setuptools wheel"
    array_push ${lines} "pip list --format=freeze | grep '^tabsdata==' | cut -d= -f1 | xargs -r pip uninstall -y"
    array_push ${lines} "for wheel in tabsdata*.whl; do pip install \"\${wheel}[deps]\"; done"
    array_push ${lines} "cd ../.."
    array_push ${lines} "pip install -r requirements/requirements-drivers-all.txt"
    message = array_join ${lines} "\n"
    info ${message}
    ''']

[tasks.wheels_rs]
private = true

[tasks.wheels_py]
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    cd "${ROOT_PROJECT_TABSDATA_FOLDER}"

    td_wheels_flavour = get_env TD_WHEELS_FLAVOUR

    exec --fail-on-error python ./devutils/automation/tasks/makers/td-scripts/wheels.py ${td-profile} ${td_wheels_flavour}
    ''']

[tasks.install]
run_task = [
    { name = [
        "set_mode_install",
        "install_rs",
        "install_py"], condition = { env = { "TD_ON_GA" = "true" } } },
    { name = [
        "set_mode_install",
        "assembly",
        "install_rs",
        "install_py"] }
]

[tasks.set_mode_install]
private = true
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    compile = get_env TD_COMPILE
    compile_empty = is_empty ${compile}
    compile_true = eq ${compile} "true"
    on_ga = get_env TD_ON_GA
    on_ga_true = eq ${on_ga} "true"
    compile = set ${compile_empty} or ${compile_true}
    if ${on_ga_true}
        set_env TD_COMPILE "false"
    else
        if ${compile}
            set_env TD_COMPILE "true"
        else
            set_env TD_COMPILE "false"
        end
    end
    TD_COMPILE = get_env TD_COMPILE
    debug "üîÖ Using td compile: '${TD_COMPILE}'"
    ''']

[tasks.install_rs]

[tasks.install_py]
run_task = [
    { name = [
        "install_py_connectors",
        "install_py_tabsdata",
    ] }
]

[tasks.install_py_connectors]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    connectors = glob_array ${CONNECTORS_PY_ROOT_FOLDER}/tabsdata_*

    for connector in ${connectors}
        is_connector = is_dir ${connector}
        if ${is_connector}
            cd ${connector}

            td_pypi_linked = get_env TD_PYTHON_LINKED_TO_REPOSITORY
            if eq ${td_pypi_linked} ""
                info "üîó Unespecified link to python repository status... defaulting to true"
                td_pypi_linked = set "true"
            else
                info "üîó Specified link to python repository status: ${td_pypi_linked}"
            end
            if eq ${td_pypi_linked} "true"
                set_env REQUIRE_SERVER_BINARIES "true"
                set_env REQUIRE_THIRD_PARTY "true"
                set_env REQUIRE_PYDOC_CSV "true"
                set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "false"
                set_env TD_SKIP_NON_EXISTING_ASSETS "false"
            else
                set_env REQUIRE_SERVER_BINARIES "false"
                set_env REQUIRE_THIRD_PARTY "false"
                set_env REQUIRE_PYDOC_CSV "false"
                set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "true"
                set_env TD_SKIP_NON_EXISTING_ASSETS "true"
            end
            # This must be false when using a local PyPi reopsitory.
            set_env PYTHON_IGNORE_UNAVAILABLE_PUBLIC_PACKAGES = "true"

            connector_name = basename ${connector}
            connector_package = replace ${connector_name} "_" "-"
            debug "üöÄ pip uninstall ${connector_package} --yes"
            exec --fail-on-error pip uninstall ${connector_package} --yes
            wheels = glob_array ./target/python/dist/${connector_name}*.whl
            for wheel in ${wheels}
                if not contains ${wheel} "musllinux"
                    info "Running command: pip install ${wheel}"
                    exec --fail-on-error pip install ${wheel}
                else
                    info "Skipping musl linux wheel: ${wheel}"
                end
            end

            debug "üöÄ python setup.py --quiet sdist --dist-dir target/python/dist bdist_wheel --dist-dir target/python/dist"
            exec --fail-on-error python setup.py --quiet sdist --dist-dir target/python/dist bdist_wheel --dist-dir target/python/dist
        end
    end
    ''']

[tasks.install_py_tabsdata]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    cd "${ROOT_PROJECT_TABSDATA_FOLDER}"

    td_pypi_linked = get_env TD_PYTHON_LINKED_TO_REPOSITORY
    if eq ${td_pypi_linked} ""
        info "üîó Unespecified link to python repository status... defaulting to true"
        td_pypi_linked = set "true"
    else
        info "üîó Specified link to python repository status: ${td_pypi_linked}"
    end
    if eq ${td_pypi_linked} "true"
        set_env REQUIRE_SERVER_BINARIES "true"
        set_env REQUIRE_THIRD_PARTY "true"
        set_env REQUIRE_PYDOC_CSV "true"
        set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "false"
        set_env TD_SKIP_NON_EXISTING_ASSETS "false"
    else
        set_env REQUIRE_SERVER_BINARIES "false"
        set_env REQUIRE_THIRD_PARTY "false"
        set_env REQUIRE_PYDOC_CSV "false"
        set_env TD_IGNORE_CONNECTOR_REQUIREMENTS "true"
        set_env TD_SKIP_NON_EXISTING_ASSETS "true"
    end
    # This must be false when using a local PyPi reopsitory.
    set_env PYTHON_IGNORE_UNAVAILABLE_PUBLIC_PACKAGES = "true"

    exec --fail-on-error pip uninstall tabsdata --yes
    wheels = glob_array ./target/python/dist/tabsdata*.whl
    for wheel in ${wheels}
        if not contains ${wheel} "musllinux"
            info "Running command: pip install ${wheel}"
            exec --fail-on-error pip install ${wheel}
        else
            info "Skipping musl linux wheel: ${wheel}"
        end
    end
    ''']

[tasks.uninstall]
run_task = [
    { name = [
        "uninstall_rs",
        "uninstall_py",
    ] }
]

[tasks.uninstall_rs]

[tasks.uninstall_py]
run_task = [
    { name = [
        "uninstall_py_tabsdata",
        "uninstall_py_connectors",
    ] }
]

[tasks.uninstall_py_tabsdata]
cwd = "${ROOT_PROJECT_TABSDATA_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    exec --fail-on-error pip uninstall tabsdata --yes
    exec uv cache clean tabsdata
    exec pip cache remove tabsdata
    exec python setup.py --quiet clean --all
    rm -r ${ROOT_PROJECT_TABSDATA_FOLDER}/target/python/
    ''']

[tasks.uninstall_py_connectors]
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    connectors = glob_array ${CONNECTORS_PY_ROOT_FOLDER}/tabsdata_*

    for connector in ${connectors}
        is_connector = is_dir ${connector}
        if ${is_connector}
            cd ${connector}

            connector_name = basename ${connector}
            connector_package = replace ${connector_name} "_" "-"
            debug "üöÄ pip uninstall ${connector_package} --yes"
            exec --fail-on-error pip uninstall ${connector_package} --yes
            exec uv cache clean ${connector_package}
            exec pip cache remove ${connector_package}
            exec python setup.py --quiet clean --all
            rm -r ${connector}/target/python/
        end
    end
    ''']

[tasks.bump]
run_task = [
    { name = [
        "bump_cargo",
        "bump_other",
    ] }
]

[tasks.bump_cargo]
private = true
run_task = [
    { name = [
        "bump_cargo_modules",
        "bump_cargo_macros",
        "bump_cargo_expansions",
    ] }
]

[tasks.bump_cargo_modules]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    cd "${PROJECT_TABSDATA_ROOT_FOLDER}"
    info "üöÄ cargo workspaces -v version custom ${CARGO_MAKE_TASK_ARGS} --all --no-git-commit --yes --force \"*\""
    exec --fail-on-error cargo workspaces -v version custom ${CARGO_MAKE_TASK_ARGS} --all --no-git-commit --yes --force "*"
    ''']

[tasks.bump_cargo_macros]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    cd "${PROJECT_RS_TD_MACROS_FOLDER}"
    info "üöÄ cargo workspaces -v version custom ${CARGO_MAKE_TASK_ARGS} --all --no-git-commit --yes --force \"*\""
    exec --fail-on-error cargo workspaces -v version custom ${CARGO_MAKE_TASK_ARGS} --all --no-git-commit --yes --force "*"
    ''']

[tasks.bump_cargo_expansions]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    cd "${PROJECT_RS_TY_EXPANSIONS_FOLDER}"
    info "üöÄ cargo workspaces -v version custom ${CARGO_MAKE_TASK_ARGS} --all --no-git-commit --yes --force \"*\""
    exec --fail-on-error cargo workspaces -v version custom ${CARGO_MAKE_TASK_ARGS} --all --no-git-commit --yes --force "*"
    ''']

[tasks.bump_other]
private = true
cwd = "${PROJECT_TABSDATA_ROOT_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    !include_files ./make/libraries/log.ds

    cd "${PROJECT_TABSDATA_ROOT_FOLDER}"
    info "üöÄ python ${BUMP_VERSION_PY} ${PROJECT_TABSDATA_ROOT_FOLDER} ${CARGO_MAKE_TASK_ARGS}"
    exec --fail-on-error python ${BUMP_VERSION_PY} ${PROJECT_TABSDATA_ROOT_FOLDER} ${CARGO_MAKE_TASK_ARGS}
    ''']

[tasks.virtualenv]
cwd = "${ROOT_PROJECT_TABSDATA_FOLDER}"
script_runner = "@duckscript"
script = [
    '''
    exec --fail-on-error rm -rf .venv
    exec --fail-on-error python -m venv .venv
    exec --fail-on-error ${VIRTUAL_PIP} install -U pip
    exec --fail-on-error ${VIRTUAL_PIP} install -e .[test]

    echo "Virtual environment created. Use 'source ${VIRTUAL_ACTIVATE}' to activate it"
    ''']